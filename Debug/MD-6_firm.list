
MD-6_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e4  080054e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080054e4  080054e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054e4  080054e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000002ac  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000031c  2000031c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013807  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027bd  00000000  00000000  000338a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00036068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f48  00000000  00000000  00037098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d530  00000000  00000000  00037fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ba4  00000000  00000000  00055510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a60e7  00000000  00000000  000690b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010f19b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004684  00000000  00000000  0010f1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005480 	.word	0x08005480

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005480 	.word	0x08005480

080001c8 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>:
	}else{
		return read_retval::more_message_received;
	}
}

CAN_303x8::CAN_303x8(CAN_HandleTypeDef *hcan) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	4a08      	ldr	r2, [pc, #32]	; (80001f4 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef+0x2c>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->hcan = hcan;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	683a      	ldr	r2, [r7, #0]
 80001dc:	605a      	str	r2, [r3, #4]
	HAL_CAN_Start(this->hcan);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	685b      	ldr	r3, [r3, #4]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 f9e3 	bl	80015ae <HAL_CAN_Start>
}
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4618      	mov	r0, r3
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	080054a4 	.word	0x080054a4

080001f8 <_ZN7stm_CAN9CAN_303x8D1Ev>:

CAN_303x8::~CAN_303x8() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <_ZN7stm_CAN9CAN_303x8D1Ev+0x24>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	HAL_CAN_Stop(this->hcan);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	685b      	ldr	r3, [r3, #4]
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fa13 	bl	8001636 <HAL_CAN_Stop>
}
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4618      	mov	r0, r3
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	080054a4 	.word	0x080054a4

08000220 <_ZN7stm_CAN9CAN_303x8D0Ev>:
CAN_303x8::~CAN_303x8() {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
}
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffe5 	bl	80001f8 <_ZN7stm_CAN9CAN_303x8D1Ev>
 800022e:	2194      	movs	r1, #148	; 0x94
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f005 f892 	bl	800535a <_ZdlPvj>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4618      	mov	r0, r3
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <_ZN6ws28128NeoPixel19update_write_bufferEv>:

#include "NeoPixel.h"

namespace ws2812 {

void NeoPixel::update_write_buffer(){
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	2b07      	cmp	r3, #7
 8000250:	d854      	bhi.n	80002fc <_ZN6ws28128NeoPixel19update_write_bufferEv+0xbc>
		for(uint8_t j = 0; j < color_num; j++){
 8000252:	2300      	movs	r3, #0
 8000254:	73bb      	strb	r3, [r7, #14]
 8000256:	7bbb      	ldrb	r3, [r7, #14]
 8000258:	2b02      	cmp	r3, #2
 800025a:	d84b      	bhi.n	80002f4 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xb4>
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 800025c:	7bbb      	ldrb	r3, [r7, #14]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d108      	bne.n	8000274 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x34>
 8000262:	7bfa      	ldrb	r2, [r7, #15]
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	4613      	mov	r3, r2
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	4413      	add	r3, r2
 800026c:	440b      	add	r3, r1
 800026e:	33d0      	adds	r3, #208	; 0xd0
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	e018      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 8000274:	7bbb      	ldrb	r3, [r7, #14]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d108      	bne.n	800028c <_ZN6ws28128NeoPixel19update_write_bufferEv+0x4c>
							: 	(j == 1) ? NeoPixel::colors[i].red
 800027a:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 800027c:	6879      	ldr	r1, [r7, #4]
 800027e:	4613      	mov	r3, r2
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	4413      	add	r3, r2
 8000284:	440b      	add	r3, r1
 8000286:	33cf      	adds	r3, #207	; 0xcf
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	e00c      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 800028c:	7bbb      	ldrb	r3, [r7, #14]
 800028e:	2b02      	cmp	r3, #2
 8000290:	d108      	bne.n	80002a4 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x64>
							: 	(j == 2) ? NeoPixel::colors[i].blue : 0;
 8000292:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	440b      	add	r3, r1
 800029e:	33d1      	adds	r3, #209	; 0xd1
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	e000      	b.n	80002a6 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 80002a4:	2300      	movs	r3, #0
 80002a6:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 80002a8:	2300      	movs	r3, #0
 80002aa:	737b      	strb	r3, [r7, #13]
 80002ac:	7b7b      	ldrb	r3, [r7, #13]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	d81c      	bhi.n	80002ec <_ZN6ws28128NeoPixel19update_write_bufferEv+0xac>
				NeoPixel::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? NeoPixel::high : NeoPixel::low;
 80002b2:	7b3a      	ldrb	r2, [r7, #12]
 80002b4:	7b7b      	ldrb	r3, [r7, #13]
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	fa41 f303 	asr.w	r3, r1, r3
 80002bc:	4013      	ands	r3, r2
 80002be:	2b00      	cmp	r3, #0
 80002c0:	dd02      	ble.n	80002c8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x88>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	7b1a      	ldrb	r2, [r3, #12]
 80002c6:	e001      	b.n	80002cc <_ZN6ws28128NeoPixel19update_write_bufferEv+0x8c>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b5a      	ldrb	r2, [r3, #13]
 80002cc:	7bf9      	ldrb	r1, [r7, #15]
 80002ce:	460b      	mov	r3, r1
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	4419      	add	r1, r3
 80002d4:	7bbb      	ldrb	r3, [r7, #14]
 80002d6:	440b      	add	r3, r1
 80002d8:	00d9      	lsls	r1, r3, #3
 80002da:	7b7b      	ldrb	r3, [r7, #13]
 80002dc:	440b      	add	r3, r1
 80002de:	6879      	ldr	r1, [r7, #4]
 80002e0:	440b      	add	r3, r1
 80002e2:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 80002e4:	7b7b      	ldrb	r3, [r7, #13]
 80002e6:	3301      	adds	r3, #1
 80002e8:	737b      	strb	r3, [r7, #13]
 80002ea:	e7df      	b.n	80002ac <_ZN6ws28128NeoPixel19update_write_bufferEv+0x6c>
		for(uint8_t j = 0; j < color_num; j++){
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	3301      	adds	r3, #1
 80002f0:	73bb      	strb	r3, [r7, #14]
 80002f2:	e7b0      	b.n	8000256 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	e7a7      	b.n	800024c <_ZN6ws28128NeoPixel19update_write_bufferEv+0xc>
			}
		}
	}
	NeoPixel::write_buffer[data_len] = 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <_ZN6ws28128NeoPixel4rendEv>:

void NeoPixel::rend(){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ff91 	bl	8000240 <_ZN6ws28128NeoPixel19update_write_bufferEv>
	if(NeoPixel::hdma->State != HAL_DMA_STATE_READY) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000326:	2b01      	cmp	r3, #1
 8000328:	d007      	beq.n	800033a <_ZN6ws28128NeoPixel4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(NeoPixel::htim, NeoPixel::Channel);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	4619      	mov	r1, r3
 8000334:	4610      	mov	r0, r2
 8000336:	f003 fdbf 	bl	8003eb8 <HAL_TIM_PWM_Stop_DMA>
  	}
	HAL_TIM_PWM_Start_DMA(NeoPixel::htim, NeoPixel::Channel, (uint32_t*)NeoPixel::write_buffer, data_len + reset_bit);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	6818      	ldr	r0, [r3, #0]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6859      	ldr	r1, [r3, #4]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f103 020e 	add.w	r2, r3, #14
 8000348:	23c1      	movs	r3, #193	; 0xc1
 800034a:	f003 fbaf 	bl	8003aac <HAL_TIM_PWM_Start_DMA>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

NeoPixel::NeoPixel(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 8000356:	b480      	push	{r7}
 8000358:	b085      	sub	sp, #20
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	33cf      	adds	r3, #207	; 0xcf
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
 8000374:	615a      	str	r2, [r3, #20]
	// TODO Auto-generated constructor stub
	NeoPixel::htim = htim;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	68ba      	ldr	r2, [r7, #8]
 800037a:	601a      	str	r2, [r3, #0]
	NeoPixel::Channel = Channel;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	605a      	str	r2, [r3, #4]
	NeoPixel::hdma = hdma;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	609a      	str	r2, [r3, #8]
	NeoPixel::high = high_level_pulse_len;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	7e3a      	ldrb	r2, [r7, #24]
 800038c:	731a      	strb	r2, [r3, #12]
	NeoPixel::low = low_level_pulse_len;
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	7f3a      	ldrb	r2, [r7, #28]
 8000392:	735a      	strb	r2, [r3, #13]
}
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	4618      	mov	r0, r3
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b0e4      	sub	sp, #400	; 0x190
 80003a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003aa:	f000 ff7b 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ae:	f000 f8b1 	bl	8000514 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b2:	f000 fc6d 	bl	8000c90 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80003b6:	f000 fc4d 	bl	8000c54 <_ZL11MX_DMA_Initv>
  MX_CAN_Init();
 80003ba:	f000 f919 	bl	80005f0 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 80003be:	f000 fa37 	bl	8000830 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80003c2:	f000 facd 	bl	8000960 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80003c6:	f000 fc11 	bl	8000bec <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 80003ca:	f000 f98f 	bl	80006ec <_ZL12MX_TIM1_Initv>
  MX_TIM15_Init();
 80003ce:	f000 fb61 	bl	8000a94 <_ZL13MX_TIM15_Initv>
  MX_SPI1_Init();
 80003d2:	f000 f949 	bl	8000668 <_ZL12MX_SPI1_Initv>
  /* USER CODE BEGIN 2 */
  stm_CAN::CAN_303x8 can(&hcan);
 80003d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80003da:	4947      	ldr	r1, [pc, #284]	; (80004f8 <main+0x154>)
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff fef3 	bl	80001c8 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>
  ws2812::NeoPixel pixels(&htim1, TIM_CHANNEL_1, &hdma_tim1_ch1, 45, 22);
 80003e2:	f107 0008 	add.w	r0, r7, #8
 80003e6:	2316      	movs	r3, #22
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	232d      	movs	r3, #45	; 0x2d
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	4b43      	ldr	r3, [pc, #268]	; (80004fc <main+0x158>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	4943      	ldr	r1, [pc, #268]	; (8000500 <main+0x15c>)
 80003f4:	f7ff ffaf 	bl	8000356 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>

  const ws2812::color _orenge = {48, 24, 0};
  const ws2812::color _blue = {0, 48, 128};
  const ws2812::color _green = {0, 48, 0};
 80003f8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80003fc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000408:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800040c:	2230      	movs	r2, #48	; 0x30
 800040e:	705a      	strb	r2, [r3, #1]
 8000410:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000414:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8000418:	2200      	movs	r2, #0
 800041a:	709a      	strb	r2, [r3, #2]
  const ws2812::color _purple = {24, 0, 72};
  const ws2812::color _white = {12, 16, 32};
 800041c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000420:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8000424:	4a37      	ldr	r2, [pc, #220]	; (8000504 <main+0x160>)
 8000426:	6812      	ldr	r2, [r2, #0]
 8000428:	4611      	mov	r1, r2
 800042a:	8019      	strh	r1, [r3, #0]
 800042c:	3302      	adds	r3, #2
 800042e:	0c12      	lsrs	r2, r2, #16
 8000430:	701a      	strb	r2, [r3, #0]
  const ws2812::color _full = {255, 255, 255};

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000432:	2100      	movs	r1, #0
 8000434:	4834      	ldr	r0, [pc, #208]	; (8000508 <main+0x164>)
 8000436:	f003 fa4d 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800043a:	2104      	movs	r1, #4
 800043c:	4832      	ldr	r0, [pc, #200]	; (8000508 <main+0x164>)
 800043e:	f003 fa49 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000442:	2108      	movs	r1, #8
 8000444:	4830      	ldr	r0, [pc, #192]	; (8000508 <main+0x164>)
 8000446:	f003 fa45 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800044a:	210c      	movs	r1, #12
 800044c:	482e      	ldr	r0, [pc, #184]	; (8000508 <main+0x164>)
 800044e:	f003 fa41 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000452:	2100      	movs	r1, #0
 8000454:	482d      	ldr	r0, [pc, #180]	; (800050c <main+0x168>)
 8000456:	f003 fa3d 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800045a:	2104      	movs	r1, #4
 800045c:	482b      	ldr	r0, [pc, #172]	; (800050c <main+0x168>)
 800045e:	f003 fa39 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000462:	2108      	movs	r1, #8
 8000464:	4829      	ldr	r0, [pc, #164]	; (800050c <main+0x168>)
 8000466:	f003 fa35 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800046a:	210c      	movs	r1, #12
 800046c:	4827      	ldr	r0, [pc, #156]	; (800050c <main+0x168>)
 800046e:	f003 fa31 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000472:	2100      	movs	r1, #0
 8000474:	4826      	ldr	r0, [pc, #152]	; (8000510 <main+0x16c>)
 8000476:	f003 fa2d 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800047a:	2104      	movs	r1, #4
 800047c:	4824      	ldr	r0, [pc, #144]	; (8000510 <main+0x16c>)
 800047e:	f003 fa29 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_3);
 8000482:	2108      	movs	r1, #8
 8000484:	4822      	ldr	r0, [pc, #136]	; (8000510 <main+0x16c>)
 8000486:	f003 fa25 	bl	80038d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_4);
 800048a:	210c      	movs	r1, #12
 800048c:	4820      	ldr	r0, [pc, #128]	; (8000510 <main+0x16c>)
 800048e:	f003 fa21 	bl	80038d4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 0x2000);
 8000492:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <main+0x164>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800049a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 0);
 800049c:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <main+0x164>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2200      	movs	r2, #0
 80004a2:	639a      	str	r2, [r3, #56]	; 0x38
    for (int i = 0; i < 8; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80004aa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80004ae:	2b07      	cmp	r3, #7
 80004b0:	dc19      	bgt.n	80004e6 <main+0x142>
    {
      pixels.colors[i] = _white;
 80004b2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80004b6:	f5a3 71c0 	sub.w	r1, r3, #384	; 0x180
 80004ba:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80004be:	4613      	mov	r3, r2
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	4413      	add	r3, r2
 80004c4:	440b      	add	r3, r1
 80004c6:	33c8      	adds	r3, #200	; 0xc8
 80004c8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80004cc:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80004d0:	3307      	adds	r3, #7
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	7892      	ldrb	r2, [r2, #2]
 80004d6:	8019      	strh	r1, [r3, #0]
 80004d8:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < 8; i++)
 80004da:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80004de:	3301      	adds	r3, #1
 80004e0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80004e4:	e7e1      	b.n	80004aa <main+0x106>
    }
    pixels.rend();
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff10 	bl	8000310 <_ZN6ws28128NeoPixel4rendEv>

    HAL_Delay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 ff3d 	bl	8001370 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80004f6:	e7cc      	b.n	8000492 <main+0xee>
 80004f8:	2000008c 	.word	0x2000008c
 80004fc:	20000248 	.word	0x20000248
 8000500:	20000118 	.word	0x20000118
 8000504:	08005498 	.word	0x08005498
 8000508:	20000164 	.word	0x20000164
 800050c:	200001b0 	.word	0x200001b0
 8000510:	200001fc 	.word	0x200001fc

08000514 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b096      	sub	sp, #88	; 0x58
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f004 ff4a 	bl	80053bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 031c 	add.w	r3, r7, #28
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000552:	2301      	movs	r3, #1
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000562:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000564:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000568:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fd1a 	bl	8001fa8 <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	bf14      	ite	ne
 800057a:	2301      	movne	r3, #1
 800057c:	2300      	moveq	r3, #0
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8000584:	f000 fbd0 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2102      	movs	r1, #2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fd3d 	bl	8003024 <HAL_RCC_ClockConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	bf14      	ite	ne
 80005b0:	2301      	movne	r3, #1
 80005b2:	2300      	moveq	r3, #0
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 80005ba:	f000 fbb5 	bl	8000d28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80005be:	f241 0301 	movw	r3, #4097	; 0x1001
 80005c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 ff60 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bf14      	ite	ne
 80005da:	2301      	movne	r3, #1
 80005dc:	2300      	moveq	r3, #0
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80005e4:	f000 fba0 	bl	8000d28 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3758      	adds	r7, #88	; 0x58
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 80005f6:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <_ZL11MX_CAN_Initv+0x74>)
 80005f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 80005fc:	2202      	movs	r2, #2
 80005fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 800060e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000612:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 8000616:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800061a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 800061e:	2200      	movs	r2, #0
 8000620:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 8000624:	2200      	movs	r2, #0
 8000626:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 800062a:	2200      	movs	r2, #0
 800062c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 8000630:	2200      	movs	r2, #0
 8000632:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 8000636:	2200      	movs	r2, #0
 8000638:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 800063c:	2200      	movs	r2, #0
 800063e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000640:	4807      	ldr	r0, [pc, #28]	; (8000660 <_ZL11MX_CAN_Initv+0x70>)
 8000642:	f000 feb9 	bl	80013b8 <HAL_CAN_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	bf14      	ite	ne
 800064c:	2301      	movne	r3, #1
 800064e:	2300      	moveq	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 8000656:	f000 fb67 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000008c 	.word	0x2000008c
 8000664:	40006400 	.word	0x40006400

08000668 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800066e:	4a1e      	ldr	r2, [pc, #120]	; (80006e8 <_ZL12MX_SPI1_Initv+0x80>)
 8000670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000682:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000686:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 800069e:	2208      	movs	r2, #8
 80006a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80006b6:	2207      	movs	r2, #7
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80006c2:	2208      	movs	r2, #8
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <_ZL12MX_SPI1_Initv+0x7c>)
 80006c8:	f003 f80a 	bl	80036e0 <HAL_SPI_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	bf14      	ite	ne
 80006d2:	2301      	movne	r3, #1
 80006d4:	2300      	moveq	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80006dc:	f000 fb24 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000b4 	.word	0x200000b4
 80006e8:	40013000 	.word	0x40013000

080006ec <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b096      	sub	sp, #88	; 0x58
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	222c      	movs	r2, #44	; 0x2c
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fe4f 	bl	80053bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800071e:	4b42      	ldr	r3, [pc, #264]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 8000720:	4a42      	ldr	r2, [pc, #264]	; (800082c <_ZL12MX_TIM1_Initv+0x140>)
 8000722:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000724:	4b40      	ldr	r3, [pc, #256]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072a:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 8000730:	4b3d      	ldr	r3, [pc, #244]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 8000732:	2259      	movs	r2, #89	; 0x59
 8000734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000736:	4b3c      	ldr	r3, [pc, #240]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800073c:	4b3a      	ldr	r3, [pc, #232]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000742:	4b39      	ldr	r3, [pc, #228]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000748:	4837      	ldr	r0, [pc, #220]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 800074a:	f003 f86c 	bl	8003826 <HAL_TIM_PWM_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf14      	ite	ne
 8000754:	2301      	movne	r3, #1
 8000756:	2300      	moveq	r3, #0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800075e:	f000 fae3 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000772:	4619      	mov	r1, r3
 8000774:	482c      	ldr	r0, [pc, #176]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 8000776:	f004 f9d7 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf14      	ite	ne
 8000780:	2301      	movne	r3, #1
 8000782:	2300      	moveq	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <_ZL12MX_TIM1_Initv+0xa2>
  {
    Error_Handler();
 800078a:	f000 facd 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078e:	2360      	movs	r3, #96	; 0x60
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800079a:	2300      	movs	r3, #0
 800079c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	481d      	ldr	r0, [pc, #116]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 80007b4:	f003 fc70 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bf14      	ite	ne
 80007be:	2301      	movne	r3, #1
 80007c0:	2300      	moveq	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_ZL12MX_TIM1_Initv+0xe0>
  {
    Error_Handler();
 80007c8:	f000 faae 	bl	8000d28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 8000802:	f004 f9ff 	bl	8004c04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 8000816:	f000 fa87 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <_ZL12MX_TIM1_Initv+0x13c>)
 800081c:	f000 fbba 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 8000820:	bf00      	nop
 8000822:	3758      	adds	r7, #88	; 0x58
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000118 	.word	0x20000118
 800082c:	40012c00 	.word	0x40012c00

08000830 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000854:	4b41      	ldr	r3, [pc, #260]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 8000856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800085c:	4b3f      	ldr	r3, [pc, #252]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000862:	4b3e      	ldr	r3, [pc, #248]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 8000864:	2220      	movs	r2, #32
 8000866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8000868:	4b3c      	ldr	r3, [pc, #240]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 800086a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b3a      	ldr	r3, [pc, #232]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b39      	ldr	r3, [pc, #228]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800087c:	4837      	ldr	r0, [pc, #220]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 800087e:	f002 ffd2 	bl	8003826 <HAL_TIM_PWM_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <_ZL12MX_TIM2_Initv+0x66>
  {
    Error_Handler();
 8000892:	f000 fa49 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	482d      	ldr	r0, [pc, #180]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 80008a6:	f004 f93f 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <_ZL12MX_TIM2_Initv+0x8e>
  {
    Error_Handler();
 80008ba:	f000 fa35 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008be:	2370      	movs	r3, #112	; 0x70
 80008c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4821      	ldr	r0, [pc, #132]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 80008d6:	f003 fbdf 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <_ZL12MX_TIM2_Initv+0xbe>
  {
    Error_Handler();
 80008ea:	f000 fa1d 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	2204      	movs	r2, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	4819      	ldr	r0, [pc, #100]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 80008f6:	f003 fbcf 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 800090a:	f000 fa0d 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	2208      	movs	r2, #8
 8000912:	4619      	mov	r1, r3
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 8000916:	f003 fbbf 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	bf14      	ite	ne
 8000920:	2301      	movne	r3, #1
 8000922:	2300      	moveq	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <_ZL12MX_TIM2_Initv+0xfe>
  {
    Error_Handler();
 800092a:	f000 f9fd 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	220c      	movs	r2, #12
 8000932:	4619      	mov	r1, r3
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 8000936:	f003 fbaf 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf14      	ite	ne
 8000940:	2301      	movne	r3, #1
 8000942:	2300      	moveq	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <_ZL12MX_TIM2_Initv+0x11e>
  {
    Error_Handler();
 800094a:	f000 f9ed 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800094e:	4803      	ldr	r0, [pc, #12]	; (800095c <_ZL12MX_TIM2_Initv+0x12c>)
 8000950:	f000 fb20 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000164 	.word	0x20000164

08000960 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000984:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 8000986:	4a42      	ldr	r2, [pc, #264]	; (8000a90 <_ZL12MX_TIM3_Initv+0x130>)
 8000988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800098a:	4b40      	ldr	r3, [pc, #256]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000990:	4b3e      	ldr	r3, [pc, #248]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 8000992:	2220      	movs	r2, #32
 8000994:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8000996:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 8000998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b3b      	ldr	r3, [pc, #236]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009aa:	4838      	ldr	r0, [pc, #224]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 80009ac:	f002 ff3b 	bl	8003826 <HAL_TIM_PWM_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 80009c0:	f000 f9b2 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	482e      	ldr	r0, [pc, #184]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 80009d4:	f004 f8a8 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	bf14      	ite	ne
 80009de:	2301      	movne	r3, #1
 80009e0:	2300      	moveq	r3, #0
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 80009e8:	f000 f99e 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009ec:	2370      	movs	r3, #112	; 0x70
 80009ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	4822      	ldr	r0, [pc, #136]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 8000a04:	f003 fb48 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8000a18:	f000 f986 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2204      	movs	r2, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	481a      	ldr	r0, [pc, #104]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 8000a24:	f003 fb38 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf14      	ite	ne
 8000a2e:	2301      	movne	r3, #1
 8000a30:	2300      	moveq	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <_ZL12MX_TIM3_Initv+0xdc>
  {
    Error_Handler();
 8000a38:	f000 f976 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2208      	movs	r2, #8
 8000a40:	4619      	mov	r1, r3
 8000a42:	4812      	ldr	r0, [pc, #72]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 8000a44:	f003 fb28 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf14      	ite	ne
 8000a4e:	2301      	movne	r3, #1
 8000a50:	2300      	moveq	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <_ZL12MX_TIM3_Initv+0xfc>
  {
    Error_Handler();
 8000a58:	f000 f966 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	220c      	movs	r2, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	480a      	ldr	r0, [pc, #40]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 8000a64:	f003 fb18 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	bf14      	ite	ne
 8000a6e:	2301      	movne	r3, #1
 8000a70:	2300      	moveq	r3, #0
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <_ZL12MX_TIM3_Initv+0x11c>
  {
    Error_Handler();
 8000a78:	f000 f956 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <_ZL12MX_TIM3_Initv+0x12c>)
 8000a7e:	f000 fa89 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200001b0 	.word	0x200001b0
 8000a90:	40000400 	.word	0x40000400

08000a94 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b096      	sub	sp, #88	; 0x58
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	222c      	movs	r2, #44	; 0x2c
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 fc7b 	bl	80053bc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ac6:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000ac8:	4a47      	ldr	r2, [pc, #284]	; (8000be8 <_ZL13MX_TIM15_Initv+0x154>)
 8000aca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000acc:	4b45      	ldr	r3, [pc, #276]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b44      	ldr	r3, [pc, #272]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0xffff;
 8000ad8:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ade:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b40      	ldr	r3, [pc, #256]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ae6:	4b3f      	ldr	r3, [pc, #252]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b3d      	ldr	r3, [pc, #244]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000af2:	483c      	ldr	r0, [pc, #240]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000af4:	f002 fe97 	bl	8003826 <HAL_TIM_PWM_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <_ZL13MX_TIM15_Initv+0x78>
  {
    Error_Handler();
 8000b08:	f000 f90e 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4832      	ldr	r0, [pc, #200]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000b1c:	f004 f804 	bl	8004b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <_ZL13MX_TIM15_Initv+0xa0>
  {
    Error_Handler();
 8000b30:	f000 f8fa 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b34:	2370      	movs	r3, #112	; 0x70
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b54:	2200      	movs	r2, #0
 8000b56:	4619      	mov	r1, r3
 8000b58:	4822      	ldr	r0, [pc, #136]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000b5a:	f003 fa9d 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bf14      	ite	ne
 8000b64:	2301      	movne	r3, #1
 8000b66:	2300      	moveq	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <_ZL13MX_TIM15_Initv+0xde>
  {
    Error_Handler();
 8000b6e:	f000 f8db 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b76:	2204      	movs	r2, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481a      	ldr	r0, [pc, #104]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000b7c:	f003 fa8c 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <_ZL13MX_TIM15_Initv+0x100>
  {
    Error_Handler();
 8000b90:	f000 f8ca 	bl	8000d28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000bbc:	f004 f822 	bl	8004c04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	bf14      	ite	ne
 8000bc6:	2301      	movne	r3, #1
 8000bc8:	2300      	moveq	r3, #0
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <_ZL13MX_TIM15_Initv+0x140>
  {
    Error_Handler();
 8000bd0:	f000 f8aa 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <_ZL13MX_TIM15_Initv+0x150>)
 8000bd6:	f000 f9dd 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 8000bda:	bf00      	nop
 8000bdc:	3758      	adds	r7, #88	; 0x58
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200001fc 	.word	0x200001fc
 8000be8:	40014000 	.word	0x40014000

08000bec <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <_ZL19MX_USART1_UART_Initv+0x60>)
 8000c30:	f004 f860 	bl	8004cf4 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bf14      	ite	ne
 8000c3a:	2301      	movne	r3, #1
 8000c3c:	2300      	moveq	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000c44:	f000 f870 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2000028c 	.word	0x2000028c
 8000c50:	40013800 	.word	0x40013800

08000c54 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <_ZL11MX_DMA_Initv+0x38>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <_ZL11MX_DMA_Initv+0x38>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6153      	str	r3, [r2, #20]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <_ZL11MX_DMA_Initv+0x38>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200c      	movs	r0, #12
 8000c78:	f000 fe01 	bl	800187e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c7c:	200c      	movs	r0, #12
 8000c7e:	f000 fe1a 	bl	80018b6 <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <_ZL12MX_GPIO_Initv+0x94>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <_ZL12MX_GPIO_Initv+0x94>)
 8000cac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb0:	6153      	str	r3, [r2, #20]
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <_ZL12MX_GPIO_Initv+0x94>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <_ZL12MX_GPIO_Initv+0x94>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	4a18      	ldr	r2, [pc, #96]	; (8000d24 <_ZL12MX_GPIO_Initv+0x94>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	6153      	str	r3, [r2, #20]
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <_ZL12MX_GPIO_Initv+0x94>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <_ZL12MX_GPIO_Initv+0x94>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <_ZL12MX_GPIO_Initv+0x94>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <_ZL12MX_GPIO_Initv+0x94>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACTIVE1_Pin|ACTIVE2_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f248 0120 	movw	r1, #32800	; 0x8020
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f001 f93e 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACTIVE1_Pin ACTIVE2_Pin */
  GPIO_InitStruct.Pin = ACTIVE1_Pin|ACTIVE2_Pin;
 8000cfc:	f248 0320 	movw	r3, #32800	; 0x8020
 8000d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f000 ffbc 	bl	8001c94 <HAL_GPIO_Init>

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_MspInit+0x44>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <HAL_MspInit+0x44>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_MspInit+0x44>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_MspInit+0x44>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_MspInit+0x44>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_MspInit+0x44>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <HAL_CAN_MspInit+0x80>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d129      	bne.n	8000df2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_CAN_MspInit+0x84>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_CAN_MspInit+0x84>)
 8000da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_CAN_MspInit+0x84>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_CAN_MspInit+0x84>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <HAL_CAN_MspInit+0x84>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_CAN_MspInit+0x84>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000de0:	2309      	movs	r3, #9
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f000 ff51 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40006400 	.word	0x40006400
 8000e00:	40021000 	.word	0x40021000

08000e04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_SPI_MspInit+0x7c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d127      	bne.n	8000e76 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e30:	6193      	str	r3, [r2, #24]
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	6153      	str	r3, [r2, #20]
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_SPI_MspInit+0x80>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000e56:	2328      	movs	r3, #40	; 0x28
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e66:	2305      	movs	r3, #5
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_SPI_MspInit+0x84>)
 8000e72:	f000 ff0f 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40013000 	.word	0x40013000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400

08000e8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a38      	ldr	r2, [pc, #224]	; (8000f7c <HAL_TIM_PWM_MspInit+0xf0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d134      	bne.n	8000f08 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a37      	ldr	r2, [pc, #220]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000ea4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000eb6:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000eb8:	4a33      	ldr	r2, [pc, #204]	; (8000f88 <HAL_TIM_PWM_MspInit+0xfc>)
 8000eba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ebc:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000edc:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000ee4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000ee8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000eea:	4826      	ldr	r0, [pc, #152]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000eec:	f000 fcfd 	bl	80018ea <HAL_DMA_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8000ef6:	f7ff ff17 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <HAL_TIM_PWM_MspInit+0xf8>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000f06:	e034      	b.n	8000f72 <HAL_TIM_PWM_MspInit+0xe6>
  else if(htim_pwm->Instance==TIM2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f10:	d10c      	bne.n	8000f2c <HAL_TIM_PWM_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	61d3      	str	r3, [r2, #28]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
}
 8000f2a:	e022      	b.n	8000f72 <HAL_TIM_PWM_MspInit+0xe6>
  else if(htim_pwm->Instance==TIM3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <HAL_TIM_PWM_MspInit+0x100>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10c      	bne.n	8000f50 <HAL_TIM_PWM_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
}
 8000f4e:	e010      	b.n	8000f72 <HAL_TIM_PWM_MspInit+0xe6>
  else if(htim_pwm->Instance==TIM15)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <HAL_TIM_PWM_MspInit+0x104>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10b      	bne.n	8000f72 <HAL_TIM_PWM_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f64:	6193      	str	r3, [r2, #24]
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_TIM_PWM_MspInit+0xf4>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40012c00 	.word	0x40012c00
 8000f80:	40021000 	.word	0x40021000
 8000f84:	20000248 	.word	0x20000248
 8000f88:	4002001c 	.word	0x4002001c
 8000f8c:	40000400 	.word	0x40000400
 8000f90:	40014000 	.word	0x40014000

08000f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a5d      	ldr	r2, [pc, #372]	; (8001128 <HAL_TIM_MspPostInit+0x194>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d11e      	bne.n	8000ff4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a5c      	ldr	r2, [pc, #368]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	4b5a      	ldr	r3, [pc, #360]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f000 fe51 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000ff2:	e095      	b.n	8001120 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ffc:	d12f      	bne.n	800105e <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a4a      	ldr	r2, [pc, #296]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b48      	ldr	r3, [pc, #288]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001016:	2303      	movs	r3, #3
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001026:	2301      	movs	r3, #1
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f000 fe2e 	bl	8001c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001038:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800104a:	230a      	movs	r3, #10
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001058:	f000 fe1c 	bl	8001c94 <HAL_GPIO_Init>
}
 800105c:	e060      	b.n	8001120 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a33      	ldr	r2, [pc, #204]	; (8001130 <HAL_TIM_MspPostInit+0x19c>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d139      	bne.n	80010dc <HAL_TIM_MspPostInit+0x148>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	4a2f      	ldr	r2, [pc, #188]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001072:	6153      	str	r3, [r2, #20]
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	4a29      	ldr	r2, [pc, #164]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108a:	6153      	str	r3, [r2, #20]
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001098:	2350      	movs	r3, #80	; 0x50
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010a8:	2302      	movs	r3, #2
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f000 fded 	bl	8001c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ba:	2303      	movs	r3, #3
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ca:	2302      	movs	r3, #2
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4817      	ldr	r0, [pc, #92]	; (8001134 <HAL_TIM_MspPostInit+0x1a0>)
 80010d6:	f000 fddd 	bl	8001c94 <HAL_GPIO_Init>
}
 80010da:	e021      	b.n	8001120 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM15)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a15      	ldr	r2, [pc, #84]	; (8001138 <HAL_TIM_MspPostInit+0x1a4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d11c      	bne.n	8001120 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_TIM_MspPostInit+0x198>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fe:	230c      	movs	r3, #12
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800110e:	2309      	movs	r3, #9
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f000 fdba 	bl	8001c94 <HAL_GPIO_Init>
}
 8001120:	bf00      	nop
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40012c00 	.word	0x40012c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40000400 	.word	0x40000400
 8001134:	48000400 	.word	0x48000400
 8001138:	40014000 	.word	0x40014000

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_UART_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d127      	bne.n	80011ae <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6193      	str	r3, [r2, #24]
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_UART_MspInit+0x80>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_UART_MspInit+0x80>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800118e:	23c0      	movs	r3, #192	; 0xc0
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800119e:	2307      	movs	r3, #7
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_UART_MspInit+0x84>)
 80011aa:	f000 fd73 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001210:	f000 f88e 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <DMA1_Channel2_IRQHandler+0x10>)
 800121e:	f000 fc48 	bl	8001ab2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000248 	.word	0x20000248

0800122c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 800126c:	4c0b      	ldr	r4, [pc, #44]	; (800129c <LoopForever+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800127a:	f7ff ffd7 	bl	800122c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800127e:	f004 f871 	bl	8005364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001282:	f7ff f88f 	bl	80003a4 <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001288:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001294:	080054ec 	.word	0x080054ec
  ldr r2, =_sbss
 8001298:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800129c:	2000031c 	.word	0x2000031c

080012a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_2_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_Init+0x28>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_Init+0x28>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 fad7 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ba:	200f      	movs	r0, #15
 80012bc:	f000 f808 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c0:	f7ff fd38 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40022000 	.word	0x40022000

080012d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 faef 	bl	80018d2 <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 fab7 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000000 	.word	0x20000000
 8001328:	20000008 	.word	0x20000008
 800132c:	20000004 	.word	0x20000004

08001330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008
 8001354:	20000310 	.word	0x20000310

08001358 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;  
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000310 	.word	0x20000310

08001370 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d005      	beq.n	8001396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_Delay+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001396:	bf00      	nop
 8001398:	f7ff ffde 	bl	8001358 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8f7      	bhi.n	8001398 <HAL_Delay+0x28>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008

080013b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0ed      	b.n	80015a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fcd0 	bl	8000d7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ec:	f7ff ffb4 	bl	8001358 <HAL_GetTick>
 80013f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013f2:	e012      	b.n	800141a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013f4:	f7ff ffb0 	bl	8001358 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b0a      	cmp	r3, #10
 8001400:	d90b      	bls.n	800141a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2205      	movs	r2, #5
 8001412:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0c5      	b.n	80015a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0e5      	beq.n	80013f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0202 	bic.w	r2, r2, #2
 8001436:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001438:	f7ff ff8e 	bl	8001358 <HAL_GetTick>
 800143c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800143e:	e012      	b.n	8001466 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001440:	f7ff ff8a 	bl	8001358 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d90b      	bls.n	8001466 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2205      	movs	r2, #5
 800145e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e09f      	b.n	80015a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1e5      	bne.n	8001440 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7e1b      	ldrb	r3, [r3, #24]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d108      	bne.n	800148e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e007      	b.n	800149e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7e5b      	ldrb	r3, [r3, #25]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d108      	bne.n	80014b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	e007      	b.n	80014c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7e9b      	ldrb	r3, [r3, #26]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d108      	bne.n	80014e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0220 	orr.w	r2, r2, #32
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e007      	b.n	80014f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0220 	bic.w	r2, r2, #32
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7edb      	ldrb	r3, [r3, #27]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d108      	bne.n	800150c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0210 	bic.w	r2, r2, #16
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e007      	b.n	800151c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0210 	orr.w	r2, r2, #16
 800151a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7f1b      	ldrb	r3, [r3, #28]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d108      	bne.n	8001536 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0208 	orr.w	r2, r2, #8
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e007      	b.n	8001546 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0208 	bic.w	r2, r2, #8
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7f5b      	ldrb	r3, [r3, #29]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d108      	bne.n	8001560 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0204 	orr.w	r2, r2, #4
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e007      	b.n	8001570 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0204 	bic.w	r2, r2, #4
 800156e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	ea42 0103 	orr.w	r1, r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	1e5a      	subs	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b084      	sub	sp, #16
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d12e      	bne.n	8001620 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2202      	movs	r2, #2
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0201 	bic.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015da:	f7ff febd 	bl	8001358 <HAL_GetTick>
 80015de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015e0:	e012      	b.n	8001608 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015e2:	f7ff feb9 	bl	8001358 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b0a      	cmp	r3, #10
 80015ee:	d90b      	bls.n	8001608 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2205      	movs	r2, #5
 8001600:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e012      	b.n	800162e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e5      	bne.n	80015e2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	e006      	b.n	800162e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
  }
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d133      	bne.n	80016b2 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0201 	orr.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800165a:	f7ff fe7d 	bl	8001358 <HAL_GetTick>
 800165e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001660:	e012      	b.n	8001688 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001662:	f7ff fe79 	bl	8001358 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b0a      	cmp	r3, #10
 800166e:	d90b      	bls.n	8001688 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2205      	movs	r2, #5
 8001680:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e01b      	b.n	80016c0 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0e5      	beq.n	8001662 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0202 	bic.w	r2, r2, #2
 80016a4:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e006      	b.n	80016c0 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
  }
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff8e 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff29 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff3e 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff8e 	bl	80017bc <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5d 	bl	8001768 <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff31 	bl	800172c <__NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa2 	bl	8001824 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e037      	b.n	8001970 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001916:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800191a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f97e 	bl	8001c54 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}  
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_DMA_Start_IT+0x20>
 8001994:	2302      	movs	r3, #2
 8001996:	e04a      	b.n	8001a2e <HAL_DMA_Start_IT+0xb6>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d13a      	bne.n	8001a20 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2202      	movs	r2, #2
 80019ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f912 	bl	8001bf8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 020e 	orr.w	r2, r2, #14
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e00f      	b.n	8001a0e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 020a 	orr.w	r2, r2, #10
 80019fc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0204 	bic.w	r2, r2, #4
 8001a0c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e005      	b.n	8001a2c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d005      	beq.n	8001a58 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e027      	b.n	8001aa8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 020e 	bic.w	r2, r2, #14
 8001a66:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
    } 
  }
  return status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	2204      	movs	r2, #4
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d024      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x72>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01f      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d107      	bne.n	8001b02 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0204 	bic.w	r2, r2, #4
 8001b00:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b10:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06a      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001b22:	e065      	b.n	8001bf0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2202      	movs	r2, #2
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02c      	beq.n	8001b8e <HAL_DMA_IRQHandler+0xdc>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d027      	beq.n	8001b8e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0320 	and.w	r3, r3, #32
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10b      	bne.n	8001b64 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020a 	bic.w	r2, r2, #10
 8001b5a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b72:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d035      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001b8c:	e030      	b.n	8001bf0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2208      	movs	r2, #8
 8001b94:	409a      	lsls	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d028      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x13e>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d023      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 020e 	bic.w	r2, r2, #14
 8001bb6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
    }
  }
}  
 8001bee:	e7ff      	b.n	8001bf0 <HAL_DMA_IRQHandler+0x13e>
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f202 	lsl.w	r2, r1, r2
 8001c14:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d108      	bne.n	8001c38 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c36:	e007      	b.n	8001c48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <DMA_CalcBaseAndBitshift+0x34>)
 8001c64:	4413      	add	r3, r2
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <DMA_CalcBaseAndBitshift+0x38>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	009a      	lsls	r2, r3, #2
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <DMA_CalcBaseAndBitshift+0x3c>)
 8001c78:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	bffdfff8 	.word	0xbffdfff8
 8001c8c:	cccccccd 	.word	0xcccccccd
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e14e      	b.n	8001f42 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8140 	beq.w	8001f3c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d005      	beq.n	8001cd4 <HAL_GPIO_Init+0x40>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d130      	bne.n	8001d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 0201 	and.w	r2, r3, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d017      	beq.n	8001d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d123      	bne.n	8001dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3208      	adds	r2, #8
 8001dc0:	6939      	ldr	r1, [r7, #16]
 8001dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0203 	and.w	r2, r3, #3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 809a 	beq.w	8001f3c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e08:	4b55      	ldr	r3, [pc, #340]	; (8001f60 <HAL_GPIO_Init+0x2cc>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a54      	ldr	r2, [pc, #336]	; (8001f60 <HAL_GPIO_Init+0x2cc>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b52      	ldr	r3, [pc, #328]	; (8001f60 <HAL_GPIO_Init+0x2cc>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e20:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1e0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a46      	ldr	r2, [pc, #280]	; (8001f68 <HAL_GPIO_Init+0x2d4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1dc>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a45      	ldr	r2, [pc, #276]	; (8001f6c <HAL_GPIO_Init+0x2d8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1d8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a44      	ldr	r2, [pc, #272]	; (8001f70 <HAL_GPIO_Init+0x2dc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1d4>
 8001e64:	2303      	movs	r3, #3
 8001e66:	e006      	b.n	8001e76 <HAL_GPIO_Init+0x1e2>
 8001e68:	2305      	movs	r3, #5
 8001e6a:	e004      	b.n	8001e76 <HAL_GPIO_Init+0x1e2>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x1e2>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_GPIO_Init+0x1e2>
 8001e74:	2300      	movs	r3, #0
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e86:	4937      	ldr	r1, [pc, #220]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b37      	ldr	r3, [pc, #220]	; (8001f74 <HAL_GPIO_Init+0x2e0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eb8:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <HAL_GPIO_Init+0x2e0>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_GPIO_Init+0x2e0>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ee2:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <HAL_GPIO_Init+0x2e0>)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_GPIO_Init+0x2e0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_GPIO_Init+0x2e0>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_GPIO_Init+0x2e0>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_GPIO_Init+0x2e0>)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f aea9 	bne.w	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000
 8001f68:	48000400 	.word	0x48000400
 8001f6c:	48000800 	.word	0x48000800
 8001f70:	48000c00 	.word	0x48000c00
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f94:	e002      	b.n	8001f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fb8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f001 b823 	b.w	8003014 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 817d 	beq.w	80022de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fe4:	4bbc      	ldr	r3, [pc, #752]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d00c      	beq.n	800200a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff0:	4bb9      	ldr	r3, [pc, #740]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d15c      	bne.n	80020b6 <HAL_RCC_OscConfig+0x10e>
 8001ffc:	4bb6      	ldr	r3, [pc, #728]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d155      	bne.n	80020b6 <HAL_RCC_OscConfig+0x10e>
 800200a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800201e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	095b      	lsrs	r3, r3, #5
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d102      	bne.n	800203c <HAL_RCC_OscConfig+0x94>
 8002036:	4ba8      	ldr	r3, [pc, #672]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	e015      	b.n	8002068 <HAL_RCC_OscConfig+0xc0>
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002054:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002058:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002064:	4b9c      	ldr	r3, [pc, #624]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800206c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002070:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002074:	fa92 f2a2 	rbit	r2, r2
 8002078:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800207c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002080:	fab2 f282 	clz	r2, r2
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	f042 0220 	orr.w	r2, r2, #32
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f002 021f 	and.w	r2, r2, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f202 	lsl.w	r2, r1, r2
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 811f 	beq.w	80022dc <HAL_RCC_OscConfig+0x334>
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 8116 	bne.w	80022dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f000 bfaf 	b.w	8003014 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12e>
 80020c8:	4b83      	ldr	r3, [pc, #524]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a82      	ldr	r2, [pc, #520]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e036      	b.n	8002144 <HAL_RCC_OscConfig+0x19c>
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x158>
 80020e6:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7b      	ldr	r2, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 80020ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a78      	ldr	r2, [pc, #480]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 80020f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e021      	b.n	8002144 <HAL_RCC_OscConfig+0x19c>
 8002100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x184>
 8002112:	4b71      	ldr	r3, [pc, #452]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a70      	ldr	r2, [pc, #448]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b6e      	ldr	r3, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6d      	ldr	r2, [pc, #436]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0x19c>
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a69      	ldr	r2, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002144:	4b64      	ldr	r3, [pc, #400]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	f023 020f 	bic.w	r2, r3, #15
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	495f      	ldr	r1, [pc, #380]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 800215a:	4313      	orrs	r3, r2
 800215c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d059      	beq.n	8002222 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7ff f8f3 	bl	8001358 <HAL_GetTick>
 8002172:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff f8ee 	bl	8001358 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	; 0x64
 8002186:	d902      	bls.n	800218e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	f000 bf43 	b.w	8003014 <HAL_RCC_OscConfig+0x106c>
 800218e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002192:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_OscConfig+0x218>
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e015      	b.n	80021ec <HAL_RCC_OscConfig+0x244>
 80021c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80021d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021e8:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80021f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002200:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f042 0220 	orr.w	r2, r2, #32
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f002 021f 	and.w	r2, r2, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f202 	lsl.w	r2, r1, r2
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0ab      	beq.n	8002178 <HAL_RCC_OscConfig+0x1d0>
 8002220:	e05d      	b.n	80022de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff f899 	bl	8001358 <HAL_GetTick>
 8002226:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222c:	f7ff f894 	bl	8001358 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d902      	bls.n	8002242 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	f000 bee9 	b.w	8003014 <HAL_RCC_OscConfig+0x106c>
 8002242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002246:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002256:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_RCC_OscConfig+0x2cc>
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e015      	b.n	80022a0 <HAL_RCC_OscConfig+0x2f8>
 8002274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002278:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002290:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_RCC_OscConfig+0x330>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022a4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80022a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80022b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f042 0220 	orr.w	r2, r2, #32
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f002 021f 	and.w	r2, r2, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ab      	bne.n	800222c <HAL_RCC_OscConfig+0x284>
 80022d4:	e003      	b.n	80022de <HAL_RCC_OscConfig+0x336>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 817d 	beq.w	80025ee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022f4:	4ba6      	ldr	r3, [pc, #664]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00b      	beq.n	8002318 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002300:	4ba3      	ldr	r3, [pc, #652]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d172      	bne.n	80023f2 <HAL_RCC_OscConfig+0x44a>
 800230c:	4ba0      	ldr	r3, [pc, #640]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d16c      	bne.n	80023f2 <HAL_RCC_OscConfig+0x44a>
 8002318:	2302      	movs	r3, #2
 800231a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800232a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0x3a0>
 8002342:	4b93      	ldr	r3, [pc, #588]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	e013      	b.n	8002370 <HAL_RCC_OscConfig+0x3c8>
 8002348:	2302      	movs	r3, #2
 800234a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002360:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800236c:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	2202      	movs	r2, #2
 8002372:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002376:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800237a:	fa92 f2a2 	rbit	r2, r2
 800237e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002382:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002386:	fab2 f282 	clz	r2, r2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	f042 0220 	orr.w	r2, r2, #32
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f002 021f 	and.w	r2, r2, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f202 	lsl.w	r2, r1, r2
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCC_OscConfig+0x410>
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f000 be2e 	b.w	8003014 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b75      	ldr	r3, [pc, #468]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	21f8      	movs	r1, #248	; 0xf8
 80023ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80023d6:	fa91 f1a1 	rbit	r1, r1
 80023da:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80023de:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80023e2:	fab1 f181 	clz	r1, r1
 80023e6:	b2c9      	uxtb	r1, r1
 80023e8:	408b      	lsls	r3, r1
 80023ea:	4969      	ldr	r1, [pc, #420]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f0:	e0fd      	b.n	80025ee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8088 	beq.w	8002514 <HAL_RCC_OscConfig+0x56c>
 8002404:	2301      	movs	r3, #1
 8002406:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002416:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	461a      	mov	r2, r3
 800242c:	2301      	movs	r3, #1
 800242e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe ff92 	bl	8001358 <HAL_GetTick>
 8002434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243a:	f7fe ff8d 	bl	8001358 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d902      	bls.n	8002450 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	f000 bde2 	b.w	8003014 <HAL_RCC_OscConfig+0x106c>
 8002450:	2302      	movs	r3, #2
 8002452:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002462:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HAL_RCC_OscConfig+0x4d8>
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	e013      	b.n	80024a8 <HAL_RCC_OscConfig+0x500>
 8002480:	2302      	movs	r3, #2
 8002482:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002492:	2302      	movs	r3, #2
 8002494:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002498:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024a4:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	2202      	movs	r2, #2
 80024aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80024ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80024b2:	fa92 f2a2 	rbit	r2, r2
 80024b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80024ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80024be:	fab2 f282 	clz	r2, r2
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f042 0220 	orr.w	r2, r2, #32
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f002 021f 	and.w	r2, r2, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f202 	lsl.w	r2, r1, r2
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0af      	beq.n	800243a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	21f8      	movs	r1, #248	; 0xf8
 80024f0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024f8:	fa91 f1a1 	rbit	r1, r1
 80024fc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002500:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002504:	fab1 f181 	clz	r1, r1
 8002508:	b2c9      	uxtb	r1, r1
 800250a:	408b      	lsls	r3, r1
 800250c:	4920      	ldr	r1, [pc, #128]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
 8002512:	e06c      	b.n	80025ee <HAL_RCC_OscConfig+0x646>
 8002514:	2301      	movs	r3, #1
 8002516:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002526:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002534:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	461a      	mov	r2, r3
 800253c:	2300      	movs	r3, #0
 800253e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe ff0a 	bl	8001358 <HAL_GetTick>
 8002544:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254a:	f7fe ff05 	bl	8001358 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d902      	bls.n	8002560 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	f000 bd5a 	b.w	8003014 <HAL_RCC_OscConfig+0x106c>
 8002560:	2302      	movs	r3, #2
 8002562:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d104      	bne.n	8002594 <HAL_RCC_OscConfig+0x5ec>
 800258a:	4b01      	ldr	r3, [pc, #4]	; (8002590 <HAL_RCC_OscConfig+0x5e8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	e015      	b.n	80025bc <HAL_RCC_OscConfig+0x614>
 8002590:	40021000 	.word	0x40021000
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025a6:	2302      	movs	r3, #2
 80025a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80025ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80025b8:	4bc8      	ldr	r3, [pc, #800]	; (80028dc <HAL_RCC_OscConfig+0x934>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2202      	movs	r2, #2
 80025be:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80025c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80025c6:	fa92 f2a2 	rbit	r2, r2
 80025ca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80025ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80025d2:	fab2 f282 	clz	r2, r2
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	f042 0220 	orr.w	r2, r2, #32
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f002 021f 	and.w	r2, r2, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ad      	bne.n	800254a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8110 	beq.w	8002824 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d079      	beq.n	8002708 <HAL_RCC_OscConfig+0x760>
 8002614:	2301      	movs	r3, #1
 8002616:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4bab      	ldr	r3, [pc, #684]	; (80028e0 <HAL_RCC_OscConfig+0x938>)
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	461a      	mov	r2, r3
 800263a:	2301      	movs	r3, #1
 800263c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe fe8b 	bl	8001358 <HAL_GetTick>
 8002642:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e00a      	b.n	800265e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe fe86 	bl	8001358 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d902      	bls.n	800265e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	f000 bcdb 	b.w	8003014 <HAL_RCC_OscConfig+0x106c>
 800265e:	2302      	movs	r3, #2
 8002660:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002678:	2202      	movs	r2, #2
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800269c:	2202      	movs	r2, #2
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	fa93 f2a3 	rbit	r2, r3
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b8:	4b88      	ldr	r3, [pc, #544]	; (80028dc <HAL_RCC_OscConfig+0x934>)
 80026ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026c4:	2102      	movs	r1, #2
 80026c6:	6019      	str	r1, [r3, #0]
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f1a3 	rbit	r1, r3
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026de:	6019      	str	r1, [r3, #0]
  return result;
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	fab3 f383 	clz	r3, r3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0a0      	beq.n	8002648 <HAL_RCC_OscConfig+0x6a0>
 8002706:	e08d      	b.n	8002824 <HAL_RCC_OscConfig+0x87c>
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800272a:	601a      	str	r2, [r3, #0]
  return result;
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002734:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x938>)
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	461a      	mov	r2, r3
 8002746:	2300      	movs	r3, #0
 8002748:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7fe fe05 	bl	8001358 <HAL_GetTick>
 800274e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002754:	f7fe fe00 	bl	8001358 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d902      	bls.n	800276a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	f000 bc55 	b.w	8003014 <HAL_RCC_OscConfig+0x106c>
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002772:	2202      	movs	r2, #2
 8002774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	fa93 f2a3 	rbit	r2, r3
 8002784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002788:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002792:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002796:	2202      	movs	r2, #2
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fa93 f2a3 	rbit	r2, r3
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027ba:	2202      	movs	r2, #2
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d6:	4b41      	ldr	r3, [pc, #260]	; (80028dc <HAL_RCC_OscConfig+0x934>)
 80027d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027e2:	2102      	movs	r1, #2
 80027e4:	6019      	str	r1, [r3, #0]
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f1a3 	rbit	r1, r3
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027fc:	6019      	str	r1, [r3, #0]
  return result;
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f303 	lsl.w	r3, r1, r3
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d197      	bne.n	8002754 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 81a1 	beq.w	8002b7c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002840:	4b26      	ldr	r3, [pc, #152]	; (80028dc <HAL_RCC_OscConfig+0x934>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d116      	bne.n	800287a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284c:	4b23      	ldr	r3, [pc, #140]	; (80028dc <HAL_RCC_OscConfig+0x934>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	4a22      	ldr	r2, [pc, #136]	; (80028dc <HAL_RCC_OscConfig+0x934>)
 8002852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002856:	61d3      	str	r3, [r2, #28]
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <HAL_RCC_OscConfig+0x934>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002872:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <HAL_RCC_OscConfig+0x93c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d11a      	bne.n	80028bc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_RCC_OscConfig+0x93c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a16      	ldr	r2, [pc, #88]	; (80028e4 <HAL_RCC_OscConfig+0x93c>)
 800288c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002890:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002892:	f7fe fd61 	bl	8001358 <HAL_GetTick>
 8002896:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	e009      	b.n	80028b0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fe fd5c 	bl	8001358 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e3b1      	b.n	8003014 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_RCC_OscConfig+0x93c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ef      	beq.n	800289c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCC_OscConfig+0x940>
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_RCC_OscConfig+0x934>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a02      	ldr	r2, [pc, #8]	; (80028dc <HAL_RCC_OscConfig+0x934>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	e03c      	b.n	8002954 <HAL_RCC_OscConfig+0x9ac>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	10908120 	.word	0x10908120
 80028e4:	40007000 	.word	0x40007000
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10c      	bne.n	8002912 <HAL_RCC_OscConfig+0x96a>
 80028f8:	4bc1      	ldr	r3, [pc, #772]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4ac0      	ldr	r2, [pc, #768]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	4bbe      	ldr	r3, [pc, #760]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4abd      	ldr	r2, [pc, #756]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 800290a:	f023 0304 	bic.w	r3, r3, #4
 800290e:	6213      	str	r3, [r2, #32]
 8002910:	e020      	b.n	8002954 <HAL_RCC_OscConfig+0x9ac>
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b05      	cmp	r3, #5
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0x994>
 8002922:	4bb7      	ldr	r3, [pc, #732]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4ab6      	ldr	r2, [pc, #728]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	6213      	str	r3, [r2, #32]
 800292e:	4bb4      	ldr	r3, [pc, #720]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4ab3      	ldr	r2, [pc, #716]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6213      	str	r3, [r2, #32]
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0x9ac>
 800293c:	4bb0      	ldr	r3, [pc, #704]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4aaf      	ldr	r2, [pc, #700]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	4bad      	ldr	r3, [pc, #692]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4aac      	ldr	r2, [pc, #688]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 800294e:	f023 0304 	bic.w	r3, r3, #4
 8002952:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002958:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8081 	beq.w	8002a68 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7fe fcf7 	bl	8001358 <HAL_GetTick>
 800296a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7fe fcf2 	bl	8001358 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e345      	b.n	8003014 <HAL_RCC_OscConfig+0x106c>
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002990:	2202      	movs	r2, #2
 8002992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fa93 f2a3 	rbit	r2, r3
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80029b4:	2202      	movs	r2, #2
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	fa93 f2a3 	rbit	r2, r3
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029ce:	601a      	str	r2, [r3, #0]
  return result;
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_OscConfig+0xa4c>
 80029ee:	4b84      	ldr	r3, [pc, #528]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	e013      	b.n	8002a1c <HAL_RCC_OscConfig+0xa74>
 80029f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029fc:	2202      	movs	r2, #2
 80029fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f2a3 	rbit	r2, r3
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	4b79      	ldr	r3, [pc, #484]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a20:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a24:	2102      	movs	r1, #2
 8002a26:	6011      	str	r1, [r2, #0]
 8002a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	fa92 f1a2 	rbit	r1, r2
 8002a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a3e:	6011      	str	r1, [r2, #0]
  return result;
 8002a40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a44:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f002 021f 	and.w	r2, r2, #31
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d084      	beq.n	8002970 <HAL_RCC_OscConfig+0x9c8>
 8002a66:	e07f      	b.n	8002b68 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7fe fc76 	bl	8001358 <HAL_GetTick>
 8002a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a70:	e00b      	b.n	8002a8a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fc71 	bl	8001358 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e2c4      	b.n	8003014 <HAL_RCC_OscConfig+0x106c>
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a92:	2202      	movs	r2, #2
 8002a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f2a3 	rbit	r2, r3
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	fa93 f2a3 	rbit	r2, r3
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ad0:	601a      	str	r2, [r3, #0]
  return result;
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ada:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d102      	bne.n	8002af6 <HAL_RCC_OscConfig+0xb4e>
 8002af0:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	e013      	b.n	8002b1e <HAL_RCC_OscConfig+0xb76>
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002afe:	2202      	movs	r2, #2
 8002b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	fa93 f2a3 	rbit	r2, r3
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b26:	2102      	movs	r1, #2
 8002b28:	6011      	str	r1, [r2, #0]
 8002b2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	fa92 f1a2 	rbit	r1, r2
 8002b38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b3c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b40:	6011      	str	r1, [r2, #0]
  return result;
 8002b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b46:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	fab2 f282 	clz	r2, r2
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	f002 021f 	and.w	r2, r2, #31
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d184      	bne.n	8002a72 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b68:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8242 	beq.w	8003012 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_RCC_OscConfig+0xc58>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	f000 8213 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	f040 8162 	bne.w	8002e72 <HAL_RCC_OscConfig+0xeca>
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002bb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bd2:	601a      	str	r2, [r3, #0]
  return result;
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fbb0 	bl	8001358 <HAL_GetTick>
 8002bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bfc:	e00c      	b.n	8002c18 <HAL_RCC_OscConfig+0xc70>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fba8 	bl	8001358 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e1fd      	b.n	8003014 <HAL_RCC_OscConfig+0x106c>
 8002c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c38:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c3c:	601a      	str	r2, [r3, #0]
  return result;
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_OscConfig+0xcba>
 8002c5c:	4bb0      	ldr	r3, [pc, #704]	; (8002f20 <HAL_RCC_OscConfig+0xf78>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	e027      	b.n	8002cb2 <HAL_RCC_OscConfig+0xd0a>
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c74:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	fa93 f2a3 	rbit	r2, r3
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	4b9c      	ldr	r3, [pc, #624]	; (8002f20 <HAL_RCC_OscConfig+0xf78>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cb6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002cba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cbe:	6011      	str	r1, [r2, #0]
 8002cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cc4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	fa92 f1a2 	rbit	r1, r2
 8002cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cd2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002cd6:	6011      	str	r1, [r2, #0]
  return result;
 8002cd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cdc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	fab2 f282 	clz	r2, r2
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f002 021f 	and.w	r2, r2, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d182      	bne.n	8002c04 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cfe:	4b88      	ldr	r3, [pc, #544]	; (8002f20 <HAL_RCC_OscConfig+0xf78>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	497f      	ldr	r1, [pc, #508]	; (8002f20 <HAL_RCC_OscConfig+0xf78>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d38:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d46:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d4a:	601a      	str	r2, [r3, #0]
  return result;
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d54:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d56:	fab3 f383 	clz	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	461a      	mov	r2, r3
 8002d68:	2301      	movs	r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe faf4 	bl	8001358 <HAL_GetTick>
 8002d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d74:	e009      	b.n	8002d8a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d76:	f7fe faef 	bl	8001358 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e144      	b.n	8003014 <HAL_RCC_OscConfig+0x106c>
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002dae:	601a      	str	r2, [r3, #0]
  return result;
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002db8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xe2c>
 8002dce:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <HAL_RCC_OscConfig+0xf78>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	e027      	b.n	8002e24 <HAL_RCC_OscConfig+0xe7c>
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	fa93 f2a3 	rbit	r2, r3
 8002e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_OscConfig+0xf78>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e28:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e30:	6011      	str	r1, [r2, #0]
 8002e32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e36:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	fa92 f1a2 	rbit	r1, r2
 8002e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e44:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e48:	6011      	str	r1, [r2, #0]
  return result;
 8002e4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e4e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	fab2 f282 	clz	r2, r2
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	f042 0220 	orr.w	r2, r2, #32
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	f002 021f 	and.w	r2, r2, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d082      	beq.n	8002d76 <HAL_RCC_OscConfig+0xdce>
 8002e70:	e0cf      	b.n	8003012 <HAL_RCC_OscConfig+0x106a>
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	fa93 f2a3 	rbit	r2, r3
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e96:	601a      	str	r2, [r3, #0]
  return result;
 8002e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ea0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fa4e 	bl	8001358 <HAL_GetTick>
 8002ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	e009      	b.n	8002ed6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe fa49 	bl	8001358 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e09e      	b.n	8003014 <HAL_RCC_OscConfig+0x106c>
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	fa93 f2a3 	rbit	r2, r3
 8002ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002efa:	601a      	str	r2, [r3, #0]
  return result;
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d104      	bne.n	8002f24 <HAL_RCC_OscConfig+0xf7c>
 8002f1a:	4b01      	ldr	r3, [pc, #4]	; (8002f20 <HAL_RCC_OscConfig+0xf78>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	e029      	b.n	8002f74 <HAL_RCC_OscConfig+0xfcc>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	fa93 f2a3 	rbit	r2, r3
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCC_OscConfig+0x1078>)
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f78:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f80:	6011      	str	r1, [r2, #0]
 8002f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f86:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	fa92 f1a2 	rbit	r1, r2
 8002f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f94:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f98:	6011      	str	r1, [r2, #0]
  return result;
 8002f9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f9e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	fab2 f282 	clz	r2, r2
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	f042 0220 	orr.w	r2, r2, #32
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f002 021f 	and.w	r2, r2, #31
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d180      	bne.n	8002ec2 <HAL_RCC_OscConfig+0xf1a>
 8002fc0:	e027      	b.n	8003012 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e01e      	b.n	8003014 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_OscConfig+0x1078>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fe2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d10b      	bne.n	800300e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ff6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ffa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800300a:	429a      	cmp	r2, r3
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40021000 	.word	0x40021000

08003024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b09e      	sub	sp, #120	; 0x78
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e162      	b.n	8003302 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800303c:	4b90      	ldr	r3, [pc, #576]	; (8003280 <HAL_RCC_ClockConfig+0x25c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d910      	bls.n	800306c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b8d      	ldr	r3, [pc, #564]	; (8003280 <HAL_RCC_ClockConfig+0x25c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 0207 	bic.w	r2, r3, #7
 8003052:	498b      	ldr	r1, [pc, #556]	; (8003280 <HAL_RCC_ClockConfig+0x25c>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b89      	ldr	r3, [pc, #548]	; (8003280 <HAL_RCC_ClockConfig+0x25c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e14a      	b.n	8003302 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b82      	ldr	r3, [pc, #520]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	497f      	ldr	r1, [pc, #508]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 80dc 	beq.w	8003250 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d13c      	bne.n	800311a <HAL_RCC_ClockConfig+0xf6>
 80030a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d102      	bne.n	80030ca <HAL_RCC_ClockConfig+0xa6>
 80030c4:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	e00f      	b.n	80030ea <HAL_RCC_ClockConfig+0xc6>
 80030ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	667b      	str	r3, [r7, #100]	; 0x64
 80030d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030dc:	663b      	str	r3, [r7, #96]	; 0x60
 80030de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030e6:	4b67      	ldr	r3, [pc, #412]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80030f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030f2:	fa92 f2a2 	rbit	r2, r2
 80030f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030fa:	fab2 f282 	clz	r2, r2
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f042 0220 	orr.w	r2, r2, #32
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f002 021f 	and.w	r2, r2, #31
 800310a:	2101      	movs	r1, #1
 800310c:	fa01 f202 	lsl.w	r2, r1, r2
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d17b      	bne.n	800320e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0f3      	b.n	8003302 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d13c      	bne.n	800319c <HAL_RCC_ClockConfig+0x178>
 8003122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003126:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d102      	bne.n	800314c <HAL_RCC_ClockConfig+0x128>
 8003146:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	e00f      	b.n	800316c <HAL_RCC_ClockConfig+0x148>
 800314c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	647b      	str	r3, [r7, #68]	; 0x44
 800315a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800315e:	643b      	str	r3, [r7, #64]	; 0x40
 8003160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003170:	63ba      	str	r2, [r7, #56]	; 0x38
 8003172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003174:	fa92 f2a2 	rbit	r2, r2
 8003178:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800317a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800317c:	fab2 f282 	clz	r2, r2
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f042 0220 	orr.w	r2, r2, #32
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f002 021f 	and.w	r2, r2, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d13a      	bne.n	800320e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0b2      	b.n	8003302 <HAL_RCC_ClockConfig+0x2de>
 800319c:	2302      	movs	r3, #2
 800319e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d102      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1a0>
 80031be:	4b31      	ldr	r3, [pc, #196]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	e00d      	b.n	80031e0 <HAL_RCC_ClockConfig+0x1bc>
 80031c4:	2302      	movs	r3, #2
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
 80031d0:	2302      	movs	r3, #2
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2202      	movs	r2, #2
 80031e2:	61ba      	str	r2, [r7, #24]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	fa92 f2a2 	rbit	r2, r2
 80031ea:	617a      	str	r2, [r7, #20]
  return result;
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	fab2 f282 	clz	r2, r2
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	f042 0220 	orr.w	r2, r2, #32
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	f002 021f 	and.w	r2, r2, #31
 80031fe:	2101      	movs	r1, #1
 8003200:	fa01 f202 	lsl.w	r2, r1, r2
 8003204:	4013      	ands	r3, r2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e079      	b.n	8003302 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	491a      	ldr	r1, [pc, #104]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003220:	f7fe f89a 	bl	8001358 <HAL_GetTick>
 8003224:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fe f896 	bl	8001358 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e061      	b.n	8003302 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_RCC_ClockConfig+0x260>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_ClockConfig+0x25c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d214      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <HAL_RCC_ClockConfig+0x25c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0207 	bic.w	r2, r3, #7
 8003266:	4906      	ldr	r1, [pc, #24]	; (8003280 <HAL_RCC_ClockConfig+0x25c>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <HAL_RCC_ClockConfig+0x25c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e040      	b.n	8003302 <HAL_RCC_ClockConfig+0x2de>
 8003280:	40022000 	.word	0x40022000
 8003284:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_RCC_ClockConfig+0x2e8>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	491a      	ldr	r1, [pc, #104]	; (800330c <HAL_RCC_ClockConfig+0x2e8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_RCC_ClockConfig+0x2e8>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4912      	ldr	r1, [pc, #72]	; (800330c <HAL_RCC_ClockConfig+0x2e8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032c6:	f000 f829 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032ca:	4601      	mov	r1, r0
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_RCC_ClockConfig+0x2e8>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d4:	22f0      	movs	r2, #240	; 0xf0
 80032d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	fa92 f2a2 	rbit	r2, r2
 80032de:	60fa      	str	r2, [r7, #12]
  return result;
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	fab2 f282 	clz	r2, r2
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	40d3      	lsrs	r3, r2
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <HAL_RCC_ClockConfig+0x2ec>)
 80032ec:	5cd3      	ldrb	r3, [r2, r3]
 80032ee:	fa21 f303 	lsr.w	r3, r1, r3
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <HAL_RCC_ClockConfig+0x2f0>)
 80032f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_RCC_ClockConfig+0x2f4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd ffe8 	bl	80012d0 <HAL_InitTick>
  
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3778      	adds	r7, #120	; 0x78
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	080054ac 	.word	0x080054ac
 8003314:	20000000 	.word	0x20000000
 8003318:	20000004 	.word	0x20000004

0800331c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b08b      	sub	sp, #44	; 0x2c
 8003320:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	2300      	movs	r3, #0
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003336:	4b29      	ldr	r3, [pc, #164]	; (80033dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b04      	cmp	r3, #4
 8003344:	d002      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x30>
 8003346:	2b08      	cmp	r3, #8
 8003348:	d003      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x36>
 800334a:	e03c      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800334c:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800334e:	623b      	str	r3, [r7, #32]
      break;
 8003350:	e03c      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003358:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800335c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	fa92 f2a2 	rbit	r2, r2
 8003364:	607a      	str	r2, [r7, #4]
  return result;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	fab2 f282 	clz	r2, r2
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	40d3      	lsrs	r3, r2
 8003370:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	220f      	movs	r2, #15
 8003380:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	fa92 f2a2 	rbit	r2, r2
 8003388:	60fa      	str	r2, [r7, #12]
  return result;
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	fab2 f282 	clz	r2, r2
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	40d3      	lsrs	r3, r2
 8003394:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033a4:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	e004      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	4a0c      	ldr	r2, [pc, #48]	; (80033ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	623b      	str	r3, [r7, #32]
      break;
 80033c4:	e002      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033c8:	623b      	str	r3, [r7, #32]
      break;
 80033ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033cc:	6a3b      	ldr	r3, [r7, #32]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	372c      	adds	r7, #44	; 0x2c
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	080054c4 	.word	0x080054c4
 80033e8:	080054d4 	.word	0x080054d4
 80033ec:	003d0900 	.word	0x003d0900
 80033f0:	007a1200 	.word	0x007a1200

080033f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <HAL_RCC_GetHCLKFreq+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000000 	.word	0x20000000

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003412:	f7ff ffef 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8003416:	4601      	mov	r1, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003420:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003424:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	603a      	str	r2, [r7, #0]
  return result;
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	40d3      	lsrs	r3, r2
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <HAL_RCC_GetPCLK1Freq+0x40>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	080054bc 	.word	0x080054bc

08003450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003456:	f7ff ffcd 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 800345a:	4601      	mov	r1, r0
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003464:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003468:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	fa92 f2a2 	rbit	r2, r2
 8003470:	603a      	str	r2, [r7, #0]
  return result;
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	fab2 f282 	clz	r2, r2
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	40d3      	lsrs	r3, r2
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x40>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	080054bc 	.word	0x080054bc

08003494 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b092      	sub	sp, #72	; 0x48
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80cd 	beq.w	8003652 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b8:	4b86      	ldr	r3, [pc, #536]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10e      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b83      	ldr	r3, [pc, #524]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a82      	ldr	r2, [pc, #520]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	61d3      	str	r3, [r2, #28]
 80034d0:	4b80      	ldr	r3, [pc, #512]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b7d      	ldr	r3, [pc, #500]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ee:	4b7a      	ldr	r3, [pc, #488]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a79      	ldr	r2, [pc, #484]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fd ff2d 	bl	8001358 <HAL_GetTick>
 80034fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	e008      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003502:	f7fd ff29 	bl	8001358 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	; 0x64
 800350e:	d901      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0db      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b70      	ldr	r3, [pc, #448]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003520:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d07d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800353a:	429a      	cmp	r2, r3
 800353c:	d076      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800353e:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003558:	fab3 f383 	clz	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	4b5e      	ldr	r3, [pc, #376]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	461a      	mov	r2, r3
 8003568:	2301      	movs	r3, #1
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	4b55      	ldr	r3, [pc, #340]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	461a      	mov	r2, r3
 800358c:	2300      	movs	r3, #0
 800358e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003590:	4a50      	ldr	r2, [pc, #320]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003594:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d045      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fd feda 	bl	8001358 <HAL_GetTick>
 80035a4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	e00a      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a8:	f7fd fed6 	bl	8001358 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e086      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80035be:	2302      	movs	r3, #2
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	2302      	movs	r3, #2
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	fa93 f3a3 	rbit	r3, r3
 80035d4:	61fb      	str	r3, [r7, #28]
  return result;
 80035d6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f043 0302 	orr.w	r3, r3, #2
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d102      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	e007      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2202      	movs	r2, #2
 8003604:	613a      	str	r2, [r7, #16]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	fa92 f2a2 	rbit	r2, r2
 800360c:	60fa      	str	r2, [r7, #12]
  return result;
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	fab2 f282 	clz	r2, r2
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f002 021f 	and.w	r2, r2, #31
 8003620:	2101      	movs	r1, #1
 8003622:	fa01 f202 	lsl.w	r2, r1, r2
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0bd      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4926      	ldr	r1, [pc, #152]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800363a:	4313      	orrs	r3, r2
 800363c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800363e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003642:	2b01      	cmp	r3, #1
 8003644:	d105      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003646:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4a22      	ldr	r2, [pc, #136]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800364c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003650:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	491a      	ldr	r1, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800366c:	4313      	orrs	r3, r2
 800366e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800367c:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f023 0210 	bic.w	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4912      	ldr	r1, [pc, #72]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800368a:	4313      	orrs	r3, r2
 800368c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	490b      	ldr	r1, [pc, #44]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3748      	adds	r7, #72	; 0x48
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	10908100 	.word	0x10908100

080036e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e095      	b.n	800381e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003702:	d009      	beq.n	8003718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
 800370a:	e005      	b.n	8003718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fb66 	bl	8000e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003758:	d902      	bls.n	8003760 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e002      	b.n	8003766 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003764:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800376e:	d007      	beq.n	8003780 <HAL_SPI_Init+0xa0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003778:	d002      	beq.n	8003780 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	ea42 0103 	orr.w	r1, r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	0c1b      	lsrs	r3, r3, #16
 80037dc:	f003 0204 	and.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037fc:	ea42 0103 	orr.w	r1, r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e049      	b.n	80038cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d106      	bne.n	8003852 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7fd fb1d 	bl	8000e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f000 fe1b 	bl	80044a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <HAL_TIM_PWM_Start+0x24>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	e03c      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d109      	bne.n	8003912 <HAL_TIM_PWM_Start+0x3e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	bf14      	ite	ne
 800390a:	2301      	movne	r3, #1
 800390c:	2300      	moveq	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e02f      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d109      	bne.n	800392c <HAL_TIM_PWM_Start+0x58>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	e022      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d109      	bne.n	8003946 <HAL_TIM_PWM_Start+0x72>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e015      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b10      	cmp	r3, #16
 800394a:	d109      	bne.n	8003960 <HAL_TIM_PWM_Start+0x8c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e008      	b.n	8003972 <HAL_TIM_PWM_Start+0x9e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e088      	b.n	8003a8c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0xb6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003988:	e023      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d104      	bne.n	800399a <HAL_TIM_PWM_Start+0xc6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003998:	e01b      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d104      	bne.n	80039aa <HAL_TIM_PWM_Start+0xd6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a8:	e013      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_PWM_Start+0xe6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039b8:	e00b      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0xf6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c8:	e003      	b.n	80039d2 <HAL_TIM_PWM_Start+0xfe>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 f87e 	bl	8004adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2b      	ldr	r2, [pc, #172]	; (8003a94 <HAL_TIM_PWM_Start+0x1c0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_TIM_PWM_Start+0x134>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <HAL_TIM_PWM_Start+0x1c4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d009      	beq.n	8003a08 <HAL_TIM_PWM_Start+0x134>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <HAL_TIM_PWM_Start+0x1c8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_TIM_PWM_Start+0x134>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <HAL_TIM_PWM_Start+0x1cc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <HAL_TIM_PWM_Start+0x138>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_TIM_PWM_Start+0x13a>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIM_PWM_Start+0x1c0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x176>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d009      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x176>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <HAL_TIM_PWM_Start+0x1d0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x176>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <HAL_TIM_PWM_Start+0x1c4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d115      	bne.n	8003a76 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <HAL_TIM_PWM_Start+0x1d4>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d015      	beq.n	8003a88 <HAL_TIM_PWM_Start+0x1b4>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a62:	d011      	beq.n	8003a88 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	e008      	b.n	8003a88 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0201 	orr.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e000      	b.n	8003a8a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	00010007 	.word	0x00010007

08003aac <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	bf0c      	ite	eq
 8003ad0:	2301      	moveq	r3, #1
 8003ad2:	2300      	movne	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e03c      	b.n	8003b52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d109      	bne.n	8003af2 <HAL_TIM_PWM_Start_DMA+0x46>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	e02f      	b.n	8003b52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d109      	bne.n	8003b0c <HAL_TIM_PWM_Start_DMA+0x60>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e022      	b.n	8003b52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d109      	bne.n	8003b26 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	e015      	b.n	8003b52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d109      	bne.n	8003b40 <HAL_TIM_PWM_Start_DMA+0x94>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e008      	b.n	8003b52 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
 8003b58:	e197      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e03c      	b.n	8003bee <HAL_TIM_PWM_Start_DMA+0x142>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d109      	bne.n	8003b8e <HAL_TIM_PWM_Start_DMA+0xe2>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	bf0c      	ite	eq
 8003b86:	2301      	moveq	r3, #1
 8003b88:	2300      	movne	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	e02f      	b.n	8003bee <HAL_TIM_PWM_Start_DMA+0x142>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d109      	bne.n	8003ba8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e022      	b.n	8003bee <HAL_TIM_PWM_Start_DMA+0x142>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b0c      	cmp	r3, #12
 8003bac:	d109      	bne.n	8003bc2 <HAL_TIM_PWM_Start_DMA+0x116>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	e015      	b.n	8003bee <HAL_TIM_PWM_Start_DMA+0x142>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d109      	bne.n	8003bdc <HAL_TIM_PWM_Start_DMA+0x130>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	e008      	b.n	8003bee <HAL_TIM_PWM_Start_DMA+0x142>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d034      	beq.n	8003c5c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x156>
 8003bf8:	887b      	ldrh	r3, [r7, #2]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e143      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <HAL_TIM_PWM_Start_DMA+0x166>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c10:	e026      	b.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d104      	bne.n	8003c22 <HAL_TIM_PWM_Start_DMA+0x176>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c20:	e01e      	b.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d104      	bne.n	8003c32 <HAL_TIM_PWM_Start_DMA+0x186>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c30:	e016      	b.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	d104      	bne.n	8003c42 <HAL_TIM_PWM_Start_DMA+0x196>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c40:	e00e      	b.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c50:	e006      	b.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c5a:	e001      	b.n	8003c60 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e114      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	f200 80ae 	bhi.w	8003dc4 <HAL_TIM_PWM_Start_DMA+0x318>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003dc5 	.word	0x08003dc5
 8003c78:	08003dc5 	.word	0x08003dc5
 8003c7c:	08003dc5 	.word	0x08003dc5
 8003c80:	08003ced 	.word	0x08003ced
 8003c84:	08003dc5 	.word	0x08003dc5
 8003c88:	08003dc5 	.word	0x08003dc5
 8003c8c:	08003dc5 	.word	0x08003dc5
 8003c90:	08003d35 	.word	0x08003d35
 8003c94:	08003dc5 	.word	0x08003dc5
 8003c98:	08003dc5 	.word	0x08003dc5
 8003c9c:	08003dc5 	.word	0x08003dc5
 8003ca0:	08003d7d 	.word	0x08003d7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	4a7a      	ldr	r2, [pc, #488]	; (8003e94 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003caa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	4a79      	ldr	r2, [pc, #484]	; (8003e98 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	4a78      	ldr	r2, [pc, #480]	; (8003e9c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3334      	adds	r3, #52	; 0x34
 8003cc8:	461a      	mov	r2, r3
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	f7fd fe54 	bl	8001978 <HAL_DMA_Start_IT>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0d7      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce8:	60da      	str	r2, [r3, #12]
      break;
 8003cea:	e06e      	b.n	8003dca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	4a68      	ldr	r2, [pc, #416]	; (8003e94 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	4a67      	ldr	r2, [pc, #412]	; (8003e98 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	4a66      	ldr	r2, [pc, #408]	; (8003e9c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3338      	adds	r3, #56	; 0x38
 8003d10:	461a      	mov	r2, r3
 8003d12:	887b      	ldrh	r3, [r7, #2]
 8003d14:	f7fd fe30 	bl	8001978 <HAL_DMA_Start_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0b3      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d30:	60da      	str	r2, [r3, #12]
      break;
 8003d32:	e04a      	b.n	8003dca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	4a56      	ldr	r2, [pc, #344]	; (8003e94 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	4a55      	ldr	r2, [pc, #340]	; (8003e98 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	333c      	adds	r3, #60	; 0x3c
 8003d58:	461a      	mov	r2, r3
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	f7fd fe0c 	bl	8001978 <HAL_DMA_Start_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e08f      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d78:	60da      	str	r2, [r3, #12]
      break;
 8003d7a:	e026      	b.n	8003dca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	4a44      	ldr	r2, [pc, #272]	; (8003e94 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	4a43      	ldr	r2, [pc, #268]	; (8003e98 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	4a42      	ldr	r2, [pc, #264]	; (8003e9c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3340      	adds	r3, #64	; 0x40
 8003da0:	461a      	mov	r2, r3
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	f7fd fde8 	bl	8001978 <HAL_DMA_Start_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e06b      	b.n	8003e8a <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dc0:	60da      	str	r2, [r3, #12]
      break;
 8003dc2:	e002      	b.n	8003dca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d15b      	bne.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fe7f 	bl	8004adc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2f      	ldr	r2, [pc, #188]	; (8003ea0 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_TIM_PWM_Start_DMA+0x35a>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_TIM_PWM_Start_DMA+0x35a>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2c      	ldr	r2, [pc, #176]	; (8003ea8 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_TIM_PWM_Start_DMA+0x35a>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <HAL_TIM_PWM_Start_DMA+0x400>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_TIM_PWM_Start_DMA+0x35e>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_TIM_PWM_Start_DMA+0x360>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d009      	beq.n	8003e48 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d115      	bne.n	8003e74 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d015      	beq.n	8003e86 <HAL_TIM_PWM_Start_DMA+0x3da>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d011      	beq.n	8003e86 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0201 	orr.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e72:	e008      	b.n	8003e86 <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e000      	b.n	8003e88 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e86:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	0800438f 	.word	0x0800438f
 8003e98:	08004437 	.word	0x08004437
 8003e9c:	080042fd 	.word	0x080042fd
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	00010007 	.word	0x00010007

08003eb8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d855      	bhi.n	8003f78 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f79 	.word	0x08003f79
 8003edc:	08003f79 	.word	0x08003f79
 8003ee0:	08003f79 	.word	0x08003f79
 8003ee4:	08003f25 	.word	0x08003f25
 8003ee8:	08003f79 	.word	0x08003f79
 8003eec:	08003f79 	.word	0x08003f79
 8003ef0:	08003f79 	.word	0x08003f79
 8003ef4:	08003f41 	.word	0x08003f41
 8003ef8:	08003f79 	.word	0x08003f79
 8003efc:	08003f79 	.word	0x08003f79
 8003f00:	08003f79 	.word	0x08003f79
 8003f04:	08003f5d 	.word	0x08003f5d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fd fd8a 	bl	8001a36 <HAL_DMA_Abort_IT>
      break;
 8003f22:	e02c      	b.n	8003f7e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fd fd7c 	bl	8001a36 <HAL_DMA_Abort_IT>
      break;
 8003f3e:	e01e      	b.n	8003f7e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fd fd6e 	bl	8001a36 <HAL_DMA_Abort_IT>
      break;
 8003f5a:	e010      	b.n	8003f7e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fd fd60 	bl	8001a36 <HAL_DMA_Abort_IT>
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d17b      	bne.n	800407c <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fda5 	bl	8004adc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a3c      	ldr	r2, [pc, #240]	; (8004088 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_TIM_PWM_Stop_DMA+0x102>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a3a      	ldr	r2, [pc, #232]	; (800408c <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_TIM_PWM_Stop_DMA+0x102>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a39      	ldr	r2, [pc, #228]	; (8004090 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_TIM_PWM_Stop_DMA+0x102>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a37      	ldr	r2, [pc, #220]	; (8004094 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d101      	bne.n	8003fbe <HAL_TIM_PWM_Stop_DMA+0x106>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <HAL_TIM_PWM_Stop_DMA+0x108>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d017      	beq.n	8003ff4 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a1a      	ldr	r2, [r3, #32]
 8003fca:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	f240 4344 	movw	r3, #1092	; 0x444
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d107      	bne.n	8003ff4 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ff2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6a1a      	ldr	r2, [r3, #32]
 8003ffa:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10f      	bne.n	8004024 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6a1a      	ldr	r2, [r3, #32]
 800400a:	f240 4344 	movw	r3, #1092	; 0x444
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d107      	bne.n	8004024 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d104      	bne.n	8004034 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004032:	e023      	b.n	800407c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b04      	cmp	r3, #4
 8004038:	d104      	bne.n	8004044 <HAL_TIM_PWM_Stop_DMA+0x18c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004042:	e01b      	b.n	800407c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b08      	cmp	r3, #8
 8004048:	d104      	bne.n	8004054 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004052:	e013      	b.n	800407c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b0c      	cmp	r3, #12
 8004058:	d104      	bne.n	8004064 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004062:	e00b      	b.n	800407c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b10      	cmp	r3, #16
 8004068:	d104      	bne.n	8004074 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004072:	e003      	b.n	800407c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800

08004098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0ff      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b14      	cmp	r3, #20
 80040c2:	f200 80f0 	bhi.w	80042a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040c6:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	08004121 	.word	0x08004121
 80040d0:	080042a7 	.word	0x080042a7
 80040d4:	080042a7 	.word	0x080042a7
 80040d8:	080042a7 	.word	0x080042a7
 80040dc:	08004161 	.word	0x08004161
 80040e0:	080042a7 	.word	0x080042a7
 80040e4:	080042a7 	.word	0x080042a7
 80040e8:	080042a7 	.word	0x080042a7
 80040ec:	080041a3 	.word	0x080041a3
 80040f0:	080042a7 	.word	0x080042a7
 80040f4:	080042a7 	.word	0x080042a7
 80040f8:	080042a7 	.word	0x080042a7
 80040fc:	080041e3 	.word	0x080041e3
 8004100:	080042a7 	.word	0x080042a7
 8004104:	080042a7 	.word	0x080042a7
 8004108:	080042a7 	.word	0x080042a7
 800410c:	08004225 	.word	0x08004225
 8004110:	080042a7 	.word	0x080042a7
 8004114:	080042a7 	.word	0x080042a7
 8004118:	080042a7 	.word	0x080042a7
 800411c:	08004265 	.word	0x08004265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fa32 	bl	8004590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0208 	orr.w	r2, r2, #8
 800413a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0204 	bic.w	r2, r2, #4
 800414a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6999      	ldr	r1, [r3, #24]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	619a      	str	r2, [r3, #24]
      break;
 800415e:	e0a5      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fa98 	bl	800469c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6999      	ldr	r1, [r3, #24]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	021a      	lsls	r2, r3, #8
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	619a      	str	r2, [r3, #24]
      break;
 80041a0:	e084      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 faf7 	bl	800479c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0208 	orr.w	r2, r2, #8
 80041bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0204 	bic.w	r2, r2, #4
 80041cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69d9      	ldr	r1, [r3, #28]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	61da      	str	r2, [r3, #28]
      break;
 80041e0:	e064      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fb55 	bl	8004898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69d9      	ldr	r1, [r3, #28]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	021a      	lsls	r2, r3, #8
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	61da      	str	r2, [r3, #28]
      break;
 8004222:	e043      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fb98 	bl	8004960 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0208 	orr.w	r2, r2, #8
 800423e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0204 	bic.w	r2, r2, #4
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004262:	e023      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fbd6 	bl	8004a1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800427e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	021a      	lsls	r2, r3, #8
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042a4:	e002      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
      break;
 80042aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop

080042c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	d107      	bne.n	8004324 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004322:	e02a      	b.n	800437a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d107      	bne.n	800433e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2202      	movs	r2, #2
 8004332:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800433c:	e01d      	b.n	800437a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	d107      	bne.n	8004358 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2204      	movs	r2, #4
 800434c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004356:	e010      	b.n	800437a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	d107      	bne.n	8004372 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2208      	movs	r2, #8
 8004366:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004370:	e003      	b.n	800437a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff ffb4 	bl	80042e8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	771a      	strb	r2, [r3, #28]
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d10b      	bne.n	80043be <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d136      	bne.n	8004422 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043bc:	e031      	b.n	8004422 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d10b      	bne.n	80043e0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2202      	movs	r2, #2
 80043cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d125      	bne.n	8004422 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043de:	e020      	b.n	8004422 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d10b      	bne.n	8004402 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2204      	movs	r2, #4
 80043ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d114      	bne.n	8004422 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004400:	e00f      	b.n	8004422 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d10a      	bne.n	8004422 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2208      	movs	r2, #8
 8004410:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d103      	bne.n	8004422 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff ff4c 	bl	80042c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	771a      	strb	r2, [r3, #28]
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	429a      	cmp	r2, r3
 800444c:	d103      	bne.n	8004456 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	771a      	strb	r2, [r3, #28]
 8004454:	e019      	b.n	800448a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	429a      	cmp	r2, r3
 800445e:	d103      	bne.n	8004468 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2202      	movs	r2, #2
 8004464:	771a      	strb	r2, [r3, #28]
 8004466:	e010      	b.n	800448a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	429a      	cmp	r2, r3
 8004470:	d103      	bne.n	800447a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2204      	movs	r2, #4
 8004476:	771a      	strb	r2, [r3, #28]
 8004478:	e007      	b.n	800448a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d102      	bne.n	800448a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2208      	movs	r2, #8
 8004488:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f7ff ff22 	bl	80042d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	771a      	strb	r2, [r3, #28]
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a32      	ldr	r2, [pc, #200]	; (800457c <TIM_Base_SetConfig+0xdc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d007      	beq.n	80044c8 <TIM_Base_SetConfig+0x28>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044be:	d003      	beq.n	80044c8 <TIM_Base_SetConfig+0x28>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <TIM_Base_SetConfig+0xe0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d108      	bne.n	80044da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a27      	ldr	r2, [pc, #156]	; (800457c <TIM_Base_SetConfig+0xdc>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <TIM_Base_SetConfig+0x6a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d00f      	beq.n	800450a <TIM_Base_SetConfig+0x6a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a24      	ldr	r2, [pc, #144]	; (8004580 <TIM_Base_SetConfig+0xe0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00b      	beq.n	800450a <TIM_Base_SetConfig+0x6a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a23      	ldr	r2, [pc, #140]	; (8004584 <TIM_Base_SetConfig+0xe4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d007      	beq.n	800450a <TIM_Base_SetConfig+0x6a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a22      	ldr	r2, [pc, #136]	; (8004588 <TIM_Base_SetConfig+0xe8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <TIM_Base_SetConfig+0x6a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a21      	ldr	r2, [pc, #132]	; (800458c <TIM_Base_SetConfig+0xec>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d108      	bne.n	800451c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0e      	ldr	r2, [pc, #56]	; (800457c <TIM_Base_SetConfig+0xdc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00b      	beq.n	8004560 <TIM_Base_SetConfig+0xc0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <TIM_Base_SetConfig+0xe4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <TIM_Base_SetConfig+0xc0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0d      	ldr	r2, [pc, #52]	; (8004588 <TIM_Base_SetConfig+0xe8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d003      	beq.n	8004560 <TIM_Base_SetConfig+0xc0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a0c      	ldr	r2, [pc, #48]	; (800458c <TIM_Base_SetConfig+0xec>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d103      	bne.n	8004568 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	615a      	str	r2, [r3, #20]
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40012c00 	.word	0x40012c00
 8004580:	40000400 	.word	0x40000400
 8004584:	40014000 	.word	0x40014000
 8004588:	40014400 	.word	0x40014400
 800458c:	40014800 	.word	0x40014800

08004590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0201 	bic.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f023 0302 	bic.w	r3, r3, #2
 80045dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a28      	ldr	r2, [pc, #160]	; (800468c <TIM_OC1_SetConfig+0xfc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00b      	beq.n	8004608 <TIM_OC1_SetConfig+0x78>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a27      	ldr	r2, [pc, #156]	; (8004690 <TIM_OC1_SetConfig+0x100>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d007      	beq.n	8004608 <TIM_OC1_SetConfig+0x78>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a26      	ldr	r2, [pc, #152]	; (8004694 <TIM_OC1_SetConfig+0x104>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_OC1_SetConfig+0x78>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a25      	ldr	r2, [pc, #148]	; (8004698 <TIM_OC1_SetConfig+0x108>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d10c      	bne.n	8004622 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0308 	bic.w	r3, r3, #8
 800460e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a19      	ldr	r2, [pc, #100]	; (800468c <TIM_OC1_SetConfig+0xfc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00b      	beq.n	8004642 <TIM_OC1_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <TIM_OC1_SetConfig+0x100>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <TIM_OC1_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a17      	ldr	r2, [pc, #92]	; (8004694 <TIM_OC1_SetConfig+0x104>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d003      	beq.n	8004642 <TIM_OC1_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a16      	ldr	r2, [pc, #88]	; (8004698 <TIM_OC1_SetConfig+0x108>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d111      	bne.n	8004666 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40014000 	.word	0x40014000
 8004694:	40014400 	.word	0x40014400
 8004698:	40014800 	.word	0x40014800

0800469c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0210 	bic.w	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 0320 	bic.w	r3, r3, #32
 80046ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a24      	ldr	r2, [pc, #144]	; (800478c <TIM_OC2_SetConfig+0xf0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10d      	bne.n	800471c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a1b      	ldr	r2, [pc, #108]	; (800478c <TIM_OC2_SetConfig+0xf0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00b      	beq.n	800473c <TIM_OC2_SetConfig+0xa0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a1a      	ldr	r2, [pc, #104]	; (8004790 <TIM_OC2_SetConfig+0xf4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <TIM_OC2_SetConfig+0xa0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a19      	ldr	r2, [pc, #100]	; (8004794 <TIM_OC2_SetConfig+0xf8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_OC2_SetConfig+0xa0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <TIM_OC2_SetConfig+0xfc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d113      	bne.n	8004764 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004742:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800474a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a23      	ldr	r2, [pc, #140]	; (8004888 <TIM_OC3_SetConfig+0xec>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d10d      	bne.n	800481a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004818:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <TIM_OC3_SetConfig+0xec>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00b      	beq.n	800483a <TIM_OC3_SetConfig+0x9e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a19      	ldr	r2, [pc, #100]	; (800488c <TIM_OC3_SetConfig+0xf0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <TIM_OC3_SetConfig+0x9e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a18      	ldr	r2, [pc, #96]	; (8004890 <TIM_OC3_SetConfig+0xf4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_OC3_SetConfig+0x9e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a17      	ldr	r2, [pc, #92]	; (8004894 <TIM_OC3_SetConfig+0xf8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d113      	bne.n	8004862 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	031b      	lsls	r3, r3, #12
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a16      	ldr	r2, [pc, #88]	; (8004950 <TIM_OC4_SetConfig+0xb8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00b      	beq.n	8004914 <TIM_OC4_SetConfig+0x7c>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a15      	ldr	r2, [pc, #84]	; (8004954 <TIM_OC4_SetConfig+0xbc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d007      	beq.n	8004914 <TIM_OC4_SetConfig+0x7c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a14      	ldr	r2, [pc, #80]	; (8004958 <TIM_OC4_SetConfig+0xc0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_OC4_SetConfig+0x7c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a13      	ldr	r2, [pc, #76]	; (800495c <TIM_OC4_SetConfig+0xc4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d109      	bne.n	8004928 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	019b      	lsls	r3, r3, #6
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800

08004960 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <TIM_OC5_SetConfig+0xac>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00b      	beq.n	80049d2 <TIM_OC5_SetConfig+0x72>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <TIM_OC5_SetConfig+0xb0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d007      	beq.n	80049d2 <TIM_OC5_SetConfig+0x72>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <TIM_OC5_SetConfig+0xb4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d003      	beq.n	80049d2 <TIM_OC5_SetConfig+0x72>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <TIM_OC5_SetConfig+0xb8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d109      	bne.n	80049e6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800

08004a1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	051b      	lsls	r3, r3, #20
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <TIM_OC6_SetConfig+0xb0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_OC6_SetConfig+0x74>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <TIM_OC6_SetConfig+0xb4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_OC6_SetConfig+0x74>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a14      	ldr	r2, [pc, #80]	; (8004ad4 <TIM_OC6_SetConfig+0xb8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC6_SetConfig+0x74>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <TIM_OC6_SetConfig+0xbc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d109      	bne.n	8004aa4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	029b      	lsls	r3, r3, #10
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40012c00 	.word	0x40012c00
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40014800 	.word	0x40014800

08004adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f003 031f 	and.w	r3, r3, #31
 8004aee:	2201      	movs	r2, #1
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1a      	ldr	r2, [r3, #32]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	43db      	mvns	r3, r3
 8004afe:	401a      	ands	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1a      	ldr	r2, [r3, #32]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	431a      	orrs	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e054      	b.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a24      	ldr	r2, [pc, #144]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d108      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d009      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40000400 	.word	0x40000400
 8004c00:	40014000 	.word	0x40014000

08004c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e060      	b.n	8004ce2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a14      	ldr	r2, [pc, #80]	; (8004cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d115      	bne.n	8004cd0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	051b      	lsls	r3, r3, #20
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40012c00 	.word	0x40012c00

08004cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e040      	b.n	8004d88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fc fa10 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2224      	movs	r2, #36	; 0x24
 8004d20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f82c 	bl	8004d90 <UART_SetConfig>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e022      	b.n	8004d88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f956 	bl	8004ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f9dd 	bl	8005140 <UART_CheckIdleState>
 8004d86:	4603      	mov	r3, r0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b8a      	ldr	r3, [pc, #552]	; (8004fe4 <UART_SetConfig+0x254>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a78      	ldr	r2, [pc, #480]	; (8004fe8 <UART_SetConfig+0x258>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d120      	bne.n	8004e4e <UART_SetConfig+0xbe>
 8004e0c:	4b77      	ldr	r3, [pc, #476]	; (8004fec <UART_SetConfig+0x25c>)
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d817      	bhi.n	8004e48 <UART_SetConfig+0xb8>
 8004e18:	a201      	add	r2, pc, #4	; (adr r2, 8004e20 <UART_SetConfig+0x90>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e31 	.word	0x08004e31
 8004e24:	08004e3d 	.word	0x08004e3d
 8004e28:	08004e43 	.word	0x08004e43
 8004e2c:	08004e37 	.word	0x08004e37
 8004e30:	2300      	movs	r3, #0
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e01d      	b.n	8004e72 <UART_SetConfig+0xe2>
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e01a      	b.n	8004e72 <UART_SetConfig+0xe2>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e017      	b.n	8004e72 <UART_SetConfig+0xe2>
 8004e42:	2308      	movs	r3, #8
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e014      	b.n	8004e72 <UART_SetConfig+0xe2>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e011      	b.n	8004e72 <UART_SetConfig+0xe2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a67      	ldr	r2, [pc, #412]	; (8004ff0 <UART_SetConfig+0x260>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d102      	bne.n	8004e5e <UART_SetConfig+0xce>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e009      	b.n	8004e72 <UART_SetConfig+0xe2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a64      	ldr	r2, [pc, #400]	; (8004ff4 <UART_SetConfig+0x264>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d102      	bne.n	8004e6e <UART_SetConfig+0xde>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e001      	b.n	8004e72 <UART_SetConfig+0xe2>
 8004e6e:	2310      	movs	r3, #16
 8004e70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7a:	d15b      	bne.n	8004f34 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004e7c:	7ffb      	ldrb	r3, [r7, #31]
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d827      	bhi.n	8004ed2 <UART_SetConfig+0x142>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <UART_SetConfig+0xf8>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004eb5 	.word	0x08004eb5
 8004e90:	08004ebd 	.word	0x08004ebd
 8004e94:	08004ed3 	.word	0x08004ed3
 8004e98:	08004ec3 	.word	0x08004ec3
 8004e9c:	08004ed3 	.word	0x08004ed3
 8004ea0:	08004ed3 	.word	0x08004ed3
 8004ea4:	08004ed3 	.word	0x08004ed3
 8004ea8:	08004ecb 	.word	0x08004ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eac:	f7fe faae 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8004eb0:	61b8      	str	r0, [r7, #24]
        break;
 8004eb2:	e013      	b.n	8004edc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb4:	f7fe facc 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 8004eb8:	61b8      	str	r0, [r7, #24]
        break;
 8004eba:	e00f      	b.n	8004edc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ebc:	4b4e      	ldr	r3, [pc, #312]	; (8004ff8 <UART_SetConfig+0x268>)
 8004ebe:	61bb      	str	r3, [r7, #24]
        break;
 8004ec0:	e00c      	b.n	8004edc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec2:	f7fe fa2b 	bl	800331c <HAL_RCC_GetSysClockFreq>
 8004ec6:	61b8      	str	r0, [r7, #24]
        break;
 8004ec8:	e008      	b.n	8004edc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ece:	61bb      	str	r3, [r7, #24]
        break;
 8004ed0:	e004      	b.n	8004edc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	77bb      	strb	r3, [r7, #30]
        break;
 8004eda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d074      	beq.n	8004fcc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	005a      	lsls	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b0f      	cmp	r3, #15
 8004efe:	d916      	bls.n	8004f2e <UART_SetConfig+0x19e>
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f06:	d212      	bcs.n	8004f2e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f023 030f 	bic.w	r3, r3, #15
 8004f10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	89fb      	ldrh	r3, [r7, #14]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	89fa      	ldrh	r2, [r7, #14]
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	e04e      	b.n	8004fcc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	77bb      	strb	r3, [r7, #30]
 8004f32:	e04b      	b.n	8004fcc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f34:	7ffb      	ldrb	r3, [r7, #31]
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d827      	bhi.n	8004f8a <UART_SetConfig+0x1fa>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x1b0>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f6d 	.word	0x08004f6d
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	08004f8b 	.word	0x08004f8b
 8004f50:	08004f7b 	.word	0x08004f7b
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f8b 	.word	0x08004f8b
 8004f5c:	08004f8b 	.word	0x08004f8b
 8004f60:	08004f83 	.word	0x08004f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7fe fa52 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8004f68:	61b8      	str	r0, [r7, #24]
        break;
 8004f6a:	e013      	b.n	8004f94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7fe fa70 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 8004f70:	61b8      	str	r0, [r7, #24]
        break;
 8004f72:	e00f      	b.n	8004f94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f74:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <UART_SetConfig+0x268>)
 8004f76:	61bb      	str	r3, [r7, #24]
        break;
 8004f78:	e00c      	b.n	8004f94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7fe f9cf 	bl	800331c <HAL_RCC_GetSysClockFreq>
 8004f7e:	61b8      	str	r0, [r7, #24]
        break;
 8004f80:	e008      	b.n	8004f94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f86:	61bb      	str	r3, [r7, #24]
        break;
 8004f88:	e004      	b.n	8004f94 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	77bb      	strb	r3, [r7, #30]
        break;
 8004f92:	bf00      	nop
    }

    if (pclk != 0U)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	085a      	lsrs	r2, r3, #1
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	441a      	add	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b0f      	cmp	r3, #15
 8004fb4:	d908      	bls.n	8004fc8 <UART_SetConfig+0x238>
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbc:	d204      	bcs.n	8004fc8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	e001      	b.n	8004fcc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	efff69f3 	.word	0xefff69f3
 8004fe8:	40013800 	.word	0x40013800
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40004400 	.word	0x40004400
 8004ff4:	40004800 	.word	0x40004800
 8004ff8:	007a1200 	.word	0x007a1200

08004ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01a      	beq.n	8005112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fa:	d10a      	bne.n	8005112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	605a      	str	r2, [r3, #4]
  }
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af02      	add	r7, sp, #8
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005150:	f7fc f902 	bl	8001358 <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b08      	cmp	r3, #8
 8005162:	d10e      	bne.n	8005182 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f82d 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e023      	b.n	80051ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b04      	cmp	r3, #4
 800518e:	d10e      	bne.n	80051ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f817 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e00d      	b.n	80051ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b09c      	sub	sp, #112	; 0x70
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e2:	e0a5      	b.n	8005330 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ea:	f000 80a1 	beq.w	8005330 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fc f8b3 	bl	8001358 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <UART_WaitOnFlagUntilTimeout+0x32>
 80051fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005200:	2b00      	cmp	r3, #0
 8005202:	d13e      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005218:	667b      	str	r3, [r7, #100]	; 0x64
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005224:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e6      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3308      	adds	r3, #8
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	663b      	str	r3, [r7, #96]	; 0x60
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3308      	adds	r3, #8
 8005254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005256:	64ba      	str	r2, [r7, #72]	; 0x48
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800525c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e5      	bne.n	8005236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e067      	b.n	8005352 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d04f      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529e:	d147      	bne.n	8005330 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	637b      	str	r3, [r7, #52]	; 0x34
 80052ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	613b      	str	r3, [r7, #16]
   return(result);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052fc:	623a      	str	r2, [r7, #32]
 80052fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	69f9      	ldr	r1, [r7, #28]
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	61bb      	str	r3, [r7, #24]
   return(result);
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e010      	b.n	8005352 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4013      	ands	r3, r2
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	429a      	cmp	r2, r3
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	429a      	cmp	r2, r3
 800534c:	f43f af4a 	beq.w	80051e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3770      	adds	r7, #112	; 0x70
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <_ZdlPvj>:
 800535a:	f000 b800 	b.w	800535e <_ZdlPv>

0800535e <_ZdlPv>:
 800535e:	f000 b825 	b.w	80053ac <free>
	...

08005364 <__libc_init_array>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	4d0d      	ldr	r5, [pc, #52]	; (800539c <__libc_init_array+0x38>)
 8005368:	4c0d      	ldr	r4, [pc, #52]	; (80053a0 <__libc_init_array+0x3c>)
 800536a:	1b64      	subs	r4, r4, r5
 800536c:	10a4      	asrs	r4, r4, #2
 800536e:	2600      	movs	r6, #0
 8005370:	42a6      	cmp	r6, r4
 8005372:	d109      	bne.n	8005388 <__libc_init_array+0x24>
 8005374:	4d0b      	ldr	r5, [pc, #44]	; (80053a4 <__libc_init_array+0x40>)
 8005376:	4c0c      	ldr	r4, [pc, #48]	; (80053a8 <__libc_init_array+0x44>)
 8005378:	f000 f882 	bl	8005480 <_init>
 800537c:	1b64      	subs	r4, r4, r5
 800537e:	10a4      	asrs	r4, r4, #2
 8005380:	2600      	movs	r6, #0
 8005382:	42a6      	cmp	r6, r4
 8005384:	d105      	bne.n	8005392 <__libc_init_array+0x2e>
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	f855 3b04 	ldr.w	r3, [r5], #4
 800538c:	4798      	blx	r3
 800538e:	3601      	adds	r6, #1
 8005390:	e7ee      	b.n	8005370 <__libc_init_array+0xc>
 8005392:	f855 3b04 	ldr.w	r3, [r5], #4
 8005396:	4798      	blx	r3
 8005398:	3601      	adds	r6, #1
 800539a:	e7f2      	b.n	8005382 <__libc_init_array+0x1e>
 800539c:	080054e4 	.word	0x080054e4
 80053a0:	080054e4 	.word	0x080054e4
 80053a4:	080054e4 	.word	0x080054e4
 80053a8:	080054e8 	.word	0x080054e8

080053ac <free>:
 80053ac:	4b02      	ldr	r3, [pc, #8]	; (80053b8 <free+0xc>)
 80053ae:	4601      	mov	r1, r0
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	f000 b80b 	b.w	80053cc <_free_r>
 80053b6:	bf00      	nop
 80053b8:	2000000c 	.word	0x2000000c

080053bc <memset>:
 80053bc:	4402      	add	r2, r0
 80053be:	4603      	mov	r3, r0
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d100      	bne.n	80053c6 <memset+0xa>
 80053c4:	4770      	bx	lr
 80053c6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ca:	e7f9      	b.n	80053c0 <memset+0x4>

080053cc <_free_r>:
 80053cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ce:	2900      	cmp	r1, #0
 80053d0:	d044      	beq.n	800545c <_free_r+0x90>
 80053d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d6:	9001      	str	r0, [sp, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f1a1 0404 	sub.w	r4, r1, #4
 80053de:	bfb8      	it	lt
 80053e0:	18e4      	addlt	r4, r4, r3
 80053e2:	f000 f83f 	bl	8005464 <__malloc_lock>
 80053e6:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <_free_r+0x94>)
 80053e8:	9801      	ldr	r0, [sp, #4]
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	b933      	cbnz	r3, 80053fc <_free_r+0x30>
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	6014      	str	r4, [r2, #0]
 80053f2:	b003      	add	sp, #12
 80053f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053f8:	f000 b83a 	b.w	8005470 <__malloc_unlock>
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	d908      	bls.n	8005412 <_free_r+0x46>
 8005400:	6825      	ldr	r5, [r4, #0]
 8005402:	1961      	adds	r1, r4, r5
 8005404:	428b      	cmp	r3, r1
 8005406:	bf01      	itttt	eq
 8005408:	6819      	ldreq	r1, [r3, #0]
 800540a:	685b      	ldreq	r3, [r3, #4]
 800540c:	1949      	addeq	r1, r1, r5
 800540e:	6021      	streq	r1, [r4, #0]
 8005410:	e7ed      	b.n	80053ee <_free_r+0x22>
 8005412:	461a      	mov	r2, r3
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	b10b      	cbz	r3, 800541c <_free_r+0x50>
 8005418:	42a3      	cmp	r3, r4
 800541a:	d9fa      	bls.n	8005412 <_free_r+0x46>
 800541c:	6811      	ldr	r1, [r2, #0]
 800541e:	1855      	adds	r5, r2, r1
 8005420:	42a5      	cmp	r5, r4
 8005422:	d10b      	bne.n	800543c <_free_r+0x70>
 8005424:	6824      	ldr	r4, [r4, #0]
 8005426:	4421      	add	r1, r4
 8005428:	1854      	adds	r4, r2, r1
 800542a:	42a3      	cmp	r3, r4
 800542c:	6011      	str	r1, [r2, #0]
 800542e:	d1e0      	bne.n	80053f2 <_free_r+0x26>
 8005430:	681c      	ldr	r4, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	6053      	str	r3, [r2, #4]
 8005436:	4421      	add	r1, r4
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	e7da      	b.n	80053f2 <_free_r+0x26>
 800543c:	d902      	bls.n	8005444 <_free_r+0x78>
 800543e:	230c      	movs	r3, #12
 8005440:	6003      	str	r3, [r0, #0]
 8005442:	e7d6      	b.n	80053f2 <_free_r+0x26>
 8005444:	6825      	ldr	r5, [r4, #0]
 8005446:	1961      	adds	r1, r4, r5
 8005448:	428b      	cmp	r3, r1
 800544a:	bf04      	itt	eq
 800544c:	6819      	ldreq	r1, [r3, #0]
 800544e:	685b      	ldreq	r3, [r3, #4]
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	bf04      	itt	eq
 8005454:	1949      	addeq	r1, r1, r5
 8005456:	6021      	streq	r1, [r4, #0]
 8005458:	6054      	str	r4, [r2, #4]
 800545a:	e7ca      	b.n	80053f2 <_free_r+0x26>
 800545c:	b003      	add	sp, #12
 800545e:	bd30      	pop	{r4, r5, pc}
 8005460:	20000314 	.word	0x20000314

08005464 <__malloc_lock>:
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__malloc_lock+0x8>)
 8005466:	f000 b809 	b.w	800547c <__retarget_lock_acquire_recursive>
 800546a:	bf00      	nop
 800546c:	20000318 	.word	0x20000318

08005470 <__malloc_unlock>:
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <__malloc_unlock+0x8>)
 8005472:	f000 b804 	b.w	800547e <__retarget_lock_release_recursive>
 8005476:	bf00      	nop
 8005478:	20000318 	.word	0x20000318

0800547c <__retarget_lock_acquire_recursive>:
 800547c:	4770      	bx	lr

0800547e <__retarget_lock_release_recursive>:
 800547e:	4770      	bx	lr

08005480 <_init>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr

0800548c <_fini>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr
