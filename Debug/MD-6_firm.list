
MD-6_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de0  08006de0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006de0  08006de0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006de0  08006de0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de0  08006de0  00016de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000002f0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000370  20000370  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014085  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e5  00000000  00000000  00034135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  00036a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f80  00000000  00000000  00037a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d530  00000000  00000000  000389f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fe5  00000000  00000000  00055f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a61fc  00000000  00000000  00069f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00110101  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004724  00000000  00000000  00110154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d2c 	.word	0x08006d2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08006d2c 	.word	0x08006d2c

080001c8 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm>:

#include "CAN303x8.h"

namespace stm_CAN {

HAL_StatusTypeDef CAN_303x8::send(uint32_t ID, ID_type ide, Frame_type rtr, uint8_t *data, uint32_t data_len) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	; 0x30
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4611      	mov	r1, r2
 80001d4:	461a      	mov	r2, r3
 80001d6:	460b      	mov	r3, r1
 80001d8:	71fb      	strb	r3, [r7, #7]
 80001da:	4613      	mov	r3, r2
 80001dc:	71bb      	strb	r3, [r7, #6]
	if(data_len > 8)
 80001de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001e0:	2b08      	cmp	r3, #8
 80001e2:	d901      	bls.n	80001e8 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm+0x20>
		return HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	e017      	b.n	8000218 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm+0x50>
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	TxHeader.StdId = ID;
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	61bb      	str	r3, [r7, #24]
	TxHeader.ExtId = ID;
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = ide;
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = rtr;
 80001f4:	79bb      	ldrb	r3, [r7, #6]
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.DLC = data_len;
 80001f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TransmitGlobalTime = DISABLE;
 80001fc:	2300      	movs	r3, #0
 80001fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	return HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	6858      	ldr	r0, [r3, #4]
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	f107 0118 	add.w	r1, r7, #24
 800020e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000210:	f002 f986 	bl	8002520 <HAL_CAN_AddTxMessage>
 8000214:	4603      	mov	r3, r0
 8000216:	bf00      	nop
}
 8000218:	4618      	mov	r0, r3
 800021a:	3730      	adds	r7, #48	; 0x30
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>:

HAL_StatusTypeDef CAN_303x8::subscribe_message(uint32_t ID, ID_type ide, Frame_type rtr, FIFO fifo) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b092      	sub	sp, #72	; 0x48
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	4611      	mov	r1, r2
 800022c:	461a      	mov	r2, r3
 800022e:	460b      	mov	r3, r1
 8000230:	71fb      	strb	r3, [r7, #7]
 8000232:	4613      	mov	r3, r2
 8000234:	71bb      	strb	r3, [r7, #6]
	uint32_t id_for_filter = (ID << ((ide == ID_type::std)?21:3)) | ide | rtr;
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d101      	bne.n	8000240 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x20>
 800023c:	2315      	movs	r3, #21
 800023e:	e000      	b.n	8000242 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x22>
 8000240:	2303      	movs	r3, #3
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	409a      	lsls	r2, r3
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	431a      	orrs	r2, r3
 800024a:	79bb      	ldrb	r3, [r7, #6]
 800024c:	4313      	orrs	r3, r2
 800024e:	63fb      	str	r3, [r7, #60]	; 0x3c
	int filter_buffer_index = -1;
 8000250:	f04f 33ff 	mov.w	r3, #4294967295
 8000254:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < 14; i++){
 8000256:	2300      	movs	r3, #0
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
 800025a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800025c:	2b0d      	cmp	r3, #13
 800025e:	dc50      	bgt.n	8000302 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xe2>
		switch(this->filter_buffer[i].list){
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000264:	323c      	adds	r2, #60	; 0x3c
 8000266:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 800026a:	2b02      	cmp	r3, #2
 800026c:	d021      	beq.n	80002b2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x92>
 800026e:	2b02      	cmp	r3, #2
 8000270:	dc43      	bgt.n	80002fa <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
 8000272:	2b00      	cmp	r3, #0
 8000274:	d002      	beq.n	800027c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x5c>
 8000276:	2b01      	cmp	r3, #1
 8000278:	d003      	beq.n	8000282 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x62>
 800027a:	e03e      	b.n	80002fa <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
		case filter_buffer_status::list::empty:
			filter_buffer_index = i;
 800027c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800027e:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000280:	e03b      	b.n	80002fa <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
		case filter_buffer_status::list::filled_harf:
			if(this->filter_buffer[i].fifo == fifo){
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000286:	333c      	adds	r3, #60	; 0x3c
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	4413      	add	r3, r2
 800028c:	785b      	ldrb	r3, [r3, #1]
 800028e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000292:	429a      	cmp	r2, r3
 8000294:	d12c      	bne.n	80002f0 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd0>
				if(this->subscribed_id[i*2] == id_for_filter)
 8000296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000298:	005a      	lsls	r2, r3, #1
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	3202      	adds	r2, #2
 800029e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d101      	bne.n	80002ac <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x8c>
					return HAL_OK;
 80002a8:	2300      	movs	r3, #0
 80002aa:	e09f      	b.n	80003ec <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				else{
					filter_buffer_index = i;
 80002ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002ae:	647b      	str	r3, [r7, #68]	; 0x44
					break;
 80002b0:	e023      	b.n	80002fa <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
				}
			}else{
				continue;
			}
		case filter_buffer_status::list::filled:
			if(this->filter_buffer[i].fifo == fifo){
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002b6:	333c      	adds	r3, #60	; 0x3c
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	4413      	add	r3, r2
 80002bc:	785b      	ldrb	r3, [r3, #1]
 80002be:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d116      	bne.n	80002f4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd4>
				if(this->subscribed_id[i*2] == id_for_filter || this->subscribed_id[i*2+1] == id_for_filter)
 80002c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002c8:	005a      	lsls	r2, r3, #1
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3202      	adds	r2, #2
 80002ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d009      	beq.n	80002ec <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xcc>
 80002d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	1c5a      	adds	r2, r3, #1
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3202      	adds	r2, #2
 80002e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d105      	bne.n	80002f8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd8>
					return HAL_OK;
 80002ec:	2300      	movs	r3, #0
 80002ee:	e07d      	b.n	80003ec <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				continue;
 80002f0:	bf00      	nop
 80002f2:	e002      	b.n	80002fa <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
				else{
					continue;
				}
			}else{
				continue;
 80002f4:	bf00      	nop
 80002f6:	e000      	b.n	80002fa <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
					continue;
 80002f8:	bf00      	nop
	for(int i = 0; i < 14; i++){
 80002fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002fc:	3301      	adds	r3, #1
 80002fe:	643b      	str	r3, [r7, #64]	; 0x40
 8000300:	e7ab      	b.n	800025a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x3a>
			}
		}
	}
	if(filter_buffer_index == -1)
 8000302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000308:	d101      	bne.n	800030e <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xee>
		return HAL_ERROR;
 800030a:	2301      	movs	r3, #1
 800030c:	e06e      	b.n	80003ec <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	uint32_t id_for_filter_first = (this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty)?id_for_filter:this->subscribed_id[filter_buffer_index*2];
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000312:	323c      	adds	r2, #60	; 0x3c
 8000314:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d006      	beq.n	800032a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10a>
 800031c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800031e:	005a      	lsls	r2, r3, #1
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3202      	adds	r2, #2
 8000324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000328:	e000      	b.n	800032c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10c>
 800032a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800032c:	63bb      	str	r3, [r7, #56]	; 0x38
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = id_for_filter_first >> 16;
 800032e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000330:	0c1b      	lsrs	r3, r3, #16
 8000332:	613b      	str	r3, [r7, #16]
	filter.FilterIdLow = id_for_filter_first & 0xffff;
 8000334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000336:	b29b      	uxth	r3, r3
 8000338:	617b      	str	r3, [r7, #20]
	filter.FilterMaskIdHigh = id_for_filter >> 16; 
 800033a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800033c:	0c1b      	lsrs	r3, r3, #16
 800033e:	61bb      	str	r3, [r7, #24]
	filter.FilterMaskIdLow = id_for_filter & 0xffff;
 8000340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000342:	b29b      	uxth	r3, r3
 8000344:	61fb      	str	r3, [r7, #28]
	filter.FilterScale = Filter_scale::_32;
 8000346:	2301      	movs	r3, #1
 8000348:	62fb      	str	r3, [r7, #44]	; 0x2c
	filter.FilterMode = Filter_mode::list;
 800034a:	2301      	movs	r3, #1
 800034c:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterFIFOAssignment = fifo;
 800034e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000352:	623b      	str	r3, [r7, #32]
	filter.FilterActivation = Filter_activation::enable;
 8000354:	2301      	movs	r3, #1
 8000356:	633b      	str	r3, [r7, #48]	; 0x30
	filter.FilterBank = filter_buffer_index;
 8000358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(this->hcan, &filter) != HAL_OK)
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	f107 0210 	add.w	r2, r7, #16
 8000364:	4611      	mov	r1, r2
 8000366:	4618      	mov	r0, r3
 8000368:	f001 ff83 	bl	8002272 <HAL_CAN_ConfigFilter>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	bf14      	ite	ne
 8000372:	2301      	movne	r3, #1
 8000374:	2300      	moveq	r3, #0
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x160>
		return HAL_ERROR;
 800037c:	2301      	movs	r3, #1
 800037e:	e035      	b.n	80003ec <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	this->filter_buffer[filter_buffer_index].fifo = fifo;
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000384:	333c      	adds	r3, #60	; 0x3c
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	4413      	add	r3, r2
 800038a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800038e:	705a      	strb	r2, [r3, #1]
	if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty){
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000394:	323c      	adds	r2, #60	; 0x3c
 8000396:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d10e      	bne.n	80003bc <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x19c>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled_harf;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80003a2:	323c      	adds	r2, #60	; 0x3c
 80003a4:	2101      	movs	r1, #1
 80003a6:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2] = id_for_filter;
 80003aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003ac:	005a      	lsls	r2, r3, #1
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3202      	adds	r2, #2
 80003b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80003b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 80003b8:	2300      	movs	r3, #0
 80003ba:	e017      	b.n	80003ec <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::filled_harf){
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80003c0:	323c      	adds	r2, #60	; 0x3c
 80003c2:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d10f      	bne.n	80003ea <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1ca>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80003ce:	323c      	adds	r2, #60	; 0x3c
 80003d0:	2102      	movs	r1, #2
 80003d2:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2+1] = id_for_filter;
 80003d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	1c5a      	adds	r2, r3, #1
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3202      	adds	r2, #2
 80003e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80003e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 80003e6:	2300      	movs	r3, #0
 80003e8:	e000      	b.n	80003ec <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else{
		return HAL_ERROR;
 80003ea:	2301      	movs	r3, #1
	}
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3748      	adds	r7, #72	; 0x48
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh>:
	}else{
		return HAL_ERROR;
	}
}

read_retval CAN_303x8::read(FIFO fifo, uint8_t *data){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08c      	sub	sp, #48	; 0x30
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	460b      	mov	r3, r1
 80003fe:	607a      	str	r2, [r7, #4]
 8000400:	72fb      	strb	r3, [r7, #11]
	uint32_t fifofilllevel = HAL_CAN_GetRxFifoFillLevel(this->hcan, fifo);
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	7afa      	ldrb	r2, [r7, #11]
 8000408:	4611      	mov	r1, r2
 800040a:	4618      	mov	r0, r3
 800040c:	f002 fa75 	bl	80028fa <HAL_CAN_GetRxFifoFillLevel>
 8000410:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(fifofilllevel == 0)
 8000412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000414:	2b00      	cmp	r3, #0
 8000416:	d101      	bne.n	800041c <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x28>
		return read_retval::no_message;
 8000418:	2300      	movs	r3, #0
 800041a:	e017      	b.n	800044c <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x58>
	CAN_RxHeaderTypeDef RxHeader;
	if(HAL_CAN_GetRxMessage(this->hcan, fifo, &RxHeader, data) != HAL_OK)
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	6858      	ldr	r0, [r3, #4]
 8000420:	7af9      	ldrb	r1, [r7, #11]
 8000422:	f107 0210 	add.w	r2, r7, #16
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f002 f955 	bl	80026d6 <HAL_CAN_GetRxMessage>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	bf14      	ite	ne
 8000432:	2301      	movne	r3, #1
 8000434:	2300      	moveq	r3, #0
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x4c>
		return read_retval::error;
 800043c:	2303      	movs	r3, #3
 800043e:	e005      	b.n	800044c <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x58>
	if(fifofilllevel == 1){
 8000440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000442:	2b01      	cmp	r3, #1
 8000444:	d101      	bne.n	800044a <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x56>
		return read_retval::message_received;
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x58>
	}else{
		return read_retval::more_message_received;
 800044a:	2302      	movs	r3, #2
	}
}
 800044c:	4618      	mov	r0, r3
 800044e:	3730      	adds	r7, #48	; 0x30
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPhP19CAN_RxHeaderTypeDef>:

read_retval CAN_303x8::read(FIFO fifo, uint8_t *data, CAN_RxHeaderTypeDef *RxHeader){
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	460b      	mov	r3, r1
 8000462:	72fb      	strb	r3, [r7, #11]
	uint32_t fifofilllevel = HAL_CAN_GetRxFifoFillLevel(this->hcan, fifo);
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	7afa      	ldrb	r2, [r7, #11]
 800046a:	4611      	mov	r1, r2
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fa44 	bl	80028fa <HAL_CAN_GetRxFifoFillLevel>
 8000472:	6178      	str	r0, [r7, #20]
	if(fifofilllevel == 0)
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d101      	bne.n	800047e <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x2a>
		return read_retval::no_message;
 800047a:	2300      	movs	r3, #0
 800047c:	e016      	b.n	80004ac <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x58>
	if(HAL_CAN_GetRxMessage(this->hcan, fifo, RxHeader, data) != HAL_OK)
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	6858      	ldr	r0, [r3, #4]
 8000482:	7af9      	ldrb	r1, [r7, #11]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	f002 f925 	bl	80026d6 <HAL_CAN_GetRxMessage>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	bf14      	ite	ne
 8000492:	2301      	movne	r3, #1
 8000494:	2300      	moveq	r3, #0
 8000496:	b2db      	uxtb	r3, r3
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x4c>
		return read_retval::error;
 800049c:	2303      	movs	r3, #3
 800049e:	e005      	b.n	80004ac <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x58>
	if(fifofilllevel == 1){
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d101      	bne.n	80004aa <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x56>
		return read_retval::message_received;
 80004a6:	2301      	movs	r3, #1
 80004a8:	e000      	b.n	80004ac <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPhP19CAN_RxHeaderTypeDef+0x58>
	}else{
		return read_retval::more_message_received;
 80004aa:	2302      	movs	r3, #2
	}
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>:

CAN_303x8::CAN_303x8(CAN_HandleTypeDef *hcan) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef+0x2c>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->hcan = hcan;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	605a      	str	r2, [r3, #4]
	HAL_CAN_Start(this->hcan);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 ff99 	bl	8002406 <HAL_CAN_Start>
}
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4618      	mov	r0, r3
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	08006da0 	.word	0x08006da0

080004e4 <_ZN7stm_CAN9CAN_303x8D1Ev>:

CAN_303x8::~CAN_303x8() {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <_ZN7stm_CAN9CAN_303x8D1Ev+0x24>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	HAL_CAN_Stop(this->hcan);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 ffc9 	bl	800248e <HAL_CAN_Stop>
}
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4618      	mov	r0, r3
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	08006da0 	.word	0x08006da0

0800050c <_ZN7stm_CAN9CAN_303x8D0Ev>:
CAN_303x8::~CAN_303x8() {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff ffe5 	bl	80004e4 <_ZN7stm_CAN9CAN_303x8D1Ev>
 800051a:	2194      	movs	r1, #148	; 0x94
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f006 fb72 	bl	8006c06 <_ZdlPvj>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <_ZN6ws28128NeoPixel19update_write_bufferEv>:

#include "NeoPixel.h"

namespace ws2812 {

void NeoPixel::update_write_buffer(){
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 8000534:	2300      	movs	r3, #0
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b07      	cmp	r3, #7
 800053c:	d854      	bhi.n	80005e8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xbc>
		for(uint8_t j = 0; j < color_num; j++){
 800053e:	2300      	movs	r3, #0
 8000540:	73bb      	strb	r3, [r7, #14]
 8000542:	7bbb      	ldrb	r3, [r7, #14]
 8000544:	2b02      	cmp	r3, #2
 8000546:	d84b      	bhi.n	80005e0 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xb4>
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 8000548:	7bbb      	ldrb	r3, [r7, #14]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d108      	bne.n	8000560 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x34>
 800054e:	7bfa      	ldrb	r2, [r7, #15]
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	4613      	mov	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4413      	add	r3, r2
 8000558:	440b      	add	r3, r1
 800055a:	33d0      	adds	r3, #208	; 0xd0
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	e018      	b.n	8000592 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 8000560:	7bbb      	ldrb	r3, [r7, #14]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d108      	bne.n	8000578 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x4c>
							: 	(j == 1) ? NeoPixel::colors[i].red
 8000566:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4613      	mov	r3, r2
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	4413      	add	r3, r2
 8000570:	440b      	add	r3, r1
 8000572:	33cf      	adds	r3, #207	; 0xcf
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	e00c      	b.n	8000592 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d108      	bne.n	8000590 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x64>
							: 	(j == 2) ? NeoPixel::colors[i].blue : 0;
 800057e:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? NeoPixel::colors[i].green
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	4613      	mov	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	4413      	add	r3, r2
 8000588:	440b      	add	r3, r1
 800058a:	33d1      	adds	r3, #209	; 0xd1
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	e000      	b.n	8000592 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x66>
 8000590:	2300      	movs	r3, #0
 8000592:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 8000594:	2300      	movs	r3, #0
 8000596:	737b      	strb	r3, [r7, #13]
 8000598:	7b7b      	ldrb	r3, [r7, #13]
 800059a:	2b07      	cmp	r3, #7
 800059c:	d81c      	bhi.n	80005d8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xac>
				NeoPixel::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? NeoPixel::high : NeoPixel::low;
 800059e:	7b3a      	ldrb	r2, [r7, #12]
 80005a0:	7b7b      	ldrb	r3, [r7, #13]
 80005a2:	2180      	movs	r1, #128	; 0x80
 80005a4:	fa41 f303 	asr.w	r3, r1, r3
 80005a8:	4013      	ands	r3, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dd02      	ble.n	80005b4 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x88>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7b1a      	ldrb	r2, [r3, #12]
 80005b2:	e001      	b.n	80005b8 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x8c>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7b5a      	ldrb	r2, [r3, #13]
 80005b8:	7bf9      	ldrb	r1, [r7, #15]
 80005ba:	460b      	mov	r3, r1
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	4419      	add	r1, r3
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	440b      	add	r3, r1
 80005c4:	00d9      	lsls	r1, r3, #3
 80005c6:	7b7b      	ldrb	r3, [r7, #13]
 80005c8:	440b      	add	r3, r1
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	440b      	add	r3, r1
 80005ce:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
 80005d2:	3301      	adds	r3, #1
 80005d4:	737b      	strb	r3, [r7, #13]
 80005d6:	e7df      	b.n	8000598 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x6c>
		for(uint8_t j = 0; j < color_num; j++){
 80005d8:	7bbb      	ldrb	r3, [r7, #14]
 80005da:	3301      	adds	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]
 80005de:	e7b0      	b.n	8000542 <_ZN6ws28128NeoPixel19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	3301      	adds	r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	e7a7      	b.n	8000538 <_ZN6ws28128NeoPixel19update_write_bufferEv+0xc>
			}
		}
	}
	NeoPixel::write_buffer[data_len] = 0;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZN6ws28128NeoPixel4rendEv>:

void NeoPixel::rend(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff91 	bl	800052c <_ZN6ws28128NeoPixel19update_write_bufferEv>
	if(NeoPixel::hdma->State != HAL_DMA_STATE_READY) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000612:	2b01      	cmp	r3, #1
 8000614:	d007      	beq.n	8000626 <_ZN6ws28128NeoPixel4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(NeoPixel::htim, NeoPixel::Channel);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	4619      	mov	r1, r3
 8000620:	4610      	mov	r0, r2
 8000622:	f005 f89f 	bl	8005764 <HAL_TIM_PWM_Stop_DMA>
  	}
	HAL_TIM_PWM_Start_DMA(NeoPixel::htim, NeoPixel::Channel, (uint32_t*)NeoPixel::write_buffer, data_len + reset_bit);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6818      	ldr	r0, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6859      	ldr	r1, [r3, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f103 020e 	add.w	r2, r3, #14
 8000634:	23c1      	movs	r3, #193	; 0xc1
 8000636:	f004 fe8f 	bl	8005358 <HAL_TIM_PWM_Start_DMA>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

NeoPixel::NeoPixel(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 8000642:	b480      	push	{r7}
 8000644:	b085      	sub	sp, #20
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	33cf      	adds	r3, #207	; 0xcf
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
	// TODO Auto-generated constructor stub
	NeoPixel::htim = htim;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	601a      	str	r2, [r3, #0]
	NeoPixel::Channel = Channel;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	605a      	str	r2, [r3, #4]
	NeoPixel::hdma = hdma;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	609a      	str	r2, [r3, #8]
	NeoPixel::high = high_level_pulse_len;
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	7e3a      	ldrb	r2, [r7, #24]
 8000678:	731a      	strb	r2, [r3, #12]
	NeoPixel::low = low_level_pulse_len;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	7f3a      	ldrb	r2, [r7, #28]
 800067e:	735a      	strb	r2, [r3, #13]
}
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	4618      	mov	r0, r3
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>:
  } state = STATE_STOPPED;
  uint32_t read_id[] = {0, 0};
  int16_t motor_output[] = {0, 0, 0, 0, 0, 0, 0, 0};

  auto write_motor = [&](){
    auto clamp_unsigned = [](int16_t v){return (v > 0)? v : 0;};
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	807b      	strh	r3, [r7, #2]
 800069a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800069e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZZ4mainENKUlvE_clEv>:
  auto write_motor = [&](){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 5; i++){
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	f300 81ca 	bgt.w	8000a58 <_ZZ4mainENKUlvE_clEv+0x3a8>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6819      	ldr	r1, [r3, #0]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	4613      	mov	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4413      	add	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	440b      	add	r3, r1
 80006d4:	3304      	adds	r3, #4
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d119      	bne.n	8000710 <_ZZ4mainENKUlvE_clEv+0x60>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4611      	mov	r1, r2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffce 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 80006f2:	4603      	mov	r3, r0
 80006f4:	0058      	lsls	r0, r3, #1
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	697a      	ldr	r2, [r7, #20]
 80006fc:	4613      	mov	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	440b      	add	r3, r1
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4602      	mov	r2, r0
 800070c:	635a      	str	r2, [r3, #52]	; 0x34
 800070e:	e0b0      	b.n	8000872 <_ZZ4mainENKUlvE_clEv+0x1c2>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6819      	ldr	r1, [r3, #0]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	440b      	add	r3, r1
 8000720:	3304      	adds	r3, #4
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b04      	cmp	r3, #4
 8000726:	d119      	bne.n	800075c <_ZZ4mainENKUlvE_clEv+0xac>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	697a      	ldr	r2, [r7, #20]
 800072e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ffa8 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 800073e:	4603      	mov	r3, r0
 8000740:	0058      	lsls	r0, r3, #1
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6819      	ldr	r1, [r3, #0]
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	4613      	mov	r3, r2
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4413      	add	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	440b      	add	r3, r1
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4602      	mov	r2, r0
 8000758:	639a      	str	r2, [r3, #56]	; 0x38
 800075a:	e08a      	b.n	8000872 <_ZZ4mainENKUlvE_clEv+0x1c2>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	440b      	add	r3, r1
 800076c:	3304      	adds	r3, #4
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b08      	cmp	r3, #8
 8000772:	d119      	bne.n	80007a8 <_ZZ4mainENKUlvE_clEv+0xf8>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff82 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 800078a:	4603      	mov	r3, r0
 800078c:	0058      	lsls	r0, r3, #1
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6819      	ldr	r1, [r3, #0]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	440b      	add	r3, r1
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4602      	mov	r2, r0
 80007a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80007a6:	e064      	b.n	8000872 <_ZZ4mainENKUlvE_clEv+0x1c2>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6819      	ldr	r1, [r3, #0]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	4613      	mov	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	440b      	add	r3, r1
 80007b8:	3304      	adds	r3, #4
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b0c      	cmp	r3, #12
 80007be:	d119      	bne.n	80007f4 <_ZZ4mainENKUlvE_clEv+0x144>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5c 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 80007d6:	4603      	mov	r3, r0
 80007d8:	0058      	lsls	r0, r3, #1
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6819      	ldr	r1, [r3, #0]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4602      	mov	r2, r0
 80007f0:	641a      	str	r2, [r3, #64]	; 0x40
 80007f2:	e03e      	b.n	8000872 <_ZZ4mainENKUlvE_clEv+0x1c2>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	4613      	mov	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	4413      	add	r3, r2
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	440b      	add	r3, r1
 8000804:	3304      	adds	r3, #4
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b10      	cmp	r3, #16
 800080a:	d119      	bne.n	8000840 <_ZZ4mainENKUlvE_clEv+0x190>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff36 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 8000822:	4603      	mov	r3, r0
 8000824:	0058      	lsls	r0, r3, #1
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6819      	ldr	r1, [r3, #0]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	4413      	add	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	440b      	add	r3, r1
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4602      	mov	r2, r0
 800083c:	659a      	str	r2, [r3, #88]	; 0x58
 800083e:	e018      	b.n	8000872 <_ZZ4mainENKUlvE_clEv+0x1c2>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff1c 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 8000856:	4603      	mov	r3, r0
 8000858:	0058      	lsls	r0, r3, #1
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6819      	ldr	r1, [r3, #0]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	4613      	mov	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4413      	add	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	440b      	add	r3, r1
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4602      	mov	r2, r0
 8000870:	65da      	str	r2, [r3, #92]	; 0x5c
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	440b      	add	r3, r1
 8000882:	3308      	adds	r3, #8
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d11d      	bne.n	80008c6 <_ZZ4mainENKUlvE_clEv+0x216>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000894:	b29b      	uxth	r3, r3
 8000896:	425b      	negs	r3, r3
 8000898:	b29b      	uxth	r3, r3
 800089a:	b21a      	sxth	r2, r3
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fef3 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 80008a8:	4603      	mov	r3, r0
 80008aa:	0058      	lsls	r0, r3, #1
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	440b      	add	r3, r1
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4602      	mov	r2, r0
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
 80008c4:	e0c4      	b.n	8000a50 <_ZZ4mainENKUlvE_clEv+0x3a0>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	4613      	mov	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	440b      	add	r3, r1
 80008d6:	3308      	adds	r3, #8
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d11d      	bne.n	800091a <_ZZ4mainENKUlvE_clEv+0x26a>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	425b      	negs	r3, r3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fec9 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 80008fc:	4603      	mov	r3, r0
 80008fe:	0058      	lsls	r0, r3, #1
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	440b      	add	r3, r1
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4602      	mov	r2, r0
 8000916:	639a      	str	r2, [r3, #56]	; 0x38
 8000918:	e09a      	b.n	8000a50 <_ZZ4mainENKUlvE_clEv+0x3a0>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	440b      	add	r3, r1
 800092a:	3308      	adds	r3, #8
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b08      	cmp	r3, #8
 8000930:	d11d      	bne.n	800096e <_ZZ4mainENKUlvE_clEv+0x2be>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800093c:	b29b      	uxth	r3, r3
 800093e:	425b      	negs	r3, r3
 8000940:	b29b      	uxth	r3, r3
 8000942:	b21a      	sxth	r2, r3
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe9f 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 8000950:	4603      	mov	r3, r0
 8000952:	0058      	lsls	r0, r3, #1
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	440b      	add	r3, r1
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4602      	mov	r2, r0
 800096a:	63da      	str	r2, [r3, #60]	; 0x3c
 800096c:	e070      	b.n	8000a50 <_ZZ4mainENKUlvE_clEv+0x3a0>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	440b      	add	r3, r1
 800097e:	3308      	adds	r3, #8
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b0c      	cmp	r3, #12
 8000984:	d11d      	bne.n	80009c2 <_ZZ4mainENKUlvE_clEv+0x312>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000990:	b29b      	uxth	r3, r3
 8000992:	425b      	negs	r3, r3
 8000994:	b29b      	uxth	r3, r3
 8000996:	b21a      	sxth	r2, r3
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fe75 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 80009a4:	4603      	mov	r3, r0
 80009a6:	0058      	lsls	r0, r3, #1
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	440b      	add	r3, r1
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4602      	mov	r2, r0
 80009be:	641a      	str	r2, [r3, #64]	; 0x40
 80009c0:	e046      	b.n	8000a50 <_ZZ4mainENKUlvE_clEv+0x3a0>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	3308      	adds	r3, #8
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b10      	cmp	r3, #16
 80009d8:	d11d      	bne.n	8000a16 <_ZZ4mainENKUlvE_clEv+0x366>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	425b      	negs	r3, r3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe4b 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 80009f8:	4603      	mov	r3, r0
 80009fa:	0058      	lsls	r0, r3, #1
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	4613      	mov	r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	4413      	add	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4602      	mov	r2, r0
 8000a12:	659a      	str	r2, [r3, #88]	; 0x58
 8000a14:	e01c      	b.n	8000a50 <_ZZ4mainENKUlvE_clEv+0x3a0>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	425b      	negs	r3, r3
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe2d 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 8000a34:	4603      	mov	r3, r0
 8000a36:	0058      	lsls	r0, r3, #1
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6819      	ldr	r1, [r3, #0]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel2, clamp_unsigned(-motor_output[i]) << 1);
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	65da      	str	r2, [r3, #92]	; 0x5c
    for (int i = 0; i < 5; i++){
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	3301      	adds	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e631      	b.n	80006bc <_ZZ4mainENKUlvE_clEv+0xc>
    }
    
    static uint16_t spi_datas[] = {0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
    for(int i = 0; i < 3; i++){
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	dc33      	bgt.n	8000aca <_ZZ4mainENKUlvE_clEv+0x41a>
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
      spi_datas[i*2+1] = clamp_unsigned(motor_output[i + 5]) << 1;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	3205      	adds	r2, #5
 8000a6a:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe0a 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	3301      	adds	r3, #1
 8000a84:	0052      	lsls	r2, r2, #1
 8000a86:	b291      	uxth	r1, r2
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <_ZZ4mainENKUlvE_clEv+0x42c>)
 8000a8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      __HAL_TIM_SET_COMPARE(motor_tim[i].htim, motor_tim[i].channel1, clamp_unsigned(motor_output[i]) << 1);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
      spi_datas[i*2+2] = clamp_unsigned(-motor_output[i + 5]) << 1;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	3205      	adds	r2, #5
 8000a96:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fdf0 	bl	800068e <_ZZZ4mainENKUlvE_clEvENKUlsE_clEs>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	b291      	uxth	r1, r2
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <_ZZ4mainENKUlvE_clEv+0x42c>)
 8000abe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i = 0; i < 3; i++){
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	e7c8      	b.n	8000a5c <_ZZ4mainENKUlvE_clEv+0x3ac>
    }
    HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)&spi_datas, 7);
 8000aca:	2207      	movs	r2, #7
 8000acc:	4903      	ldr	r1, [pc, #12]	; (8000adc <_ZZ4mainENKUlvE_clEv+0x42c>)
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <_ZZ4mainENKUlvE_clEv+0x430>)
 8000ad0:	f004 f806 	bl	8004ae0 <HAL_SPI_Transmit_DMA>
  };
 8000ad4:	bf00      	nop
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	200000c4 	.word	0x200000c4

08000ae4 <_ZZ4mainENKUlPhE0_clES_>:

  auto process_data = [&](uint8_t* data){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
    switch (data[0])
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	dc10      	bgt.n	8000b18 <_ZZ4mainENKUlPhE0_clES_+0x34>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f2c0 808f 	blt.w	8000c1a <_ZZ4mainENKUlPhE0_clES_+0x136>
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	f200 808c 	bhi.w	8000c1a <_ZZ4mainENKUlPhE0_clES_+0x136>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <_ZZ4mainENKUlPhE0_clES_+0x24>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b1f 	.word	0x08000b1f
 8000b0c:	08000b39 	.word	0x08000b39
 8000b10:	08000b3f 	.word	0x08000b3f
 8000b14:	08000b67 	.word	0x08000b67
 8000b18:	2bff      	cmp	r3, #255	; 0xff
 8000b1a:	d061      	beq.n	8000be0 <_ZZ4mainENKUlPhE0_clES_+0xfc>
          motor_output[data[1]] = data[2] | (data[3] << 8);
        }
        break;
      
      default:
        break;
 8000b1c:	e07d      	b.n	8000c1a <_ZZ4mainENKUlPhE0_clES_+0x136>
        can.send(original_id, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, data, 0);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	f7ff fb49 	bl	80001c8 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm>
        break;
 8000b36:	e075      	b.n	8000c24 <_ZZ4mainENKUlPhE0_clES_+0x140>
        HAL_NVIC_SystemReset();
 8000b38:	f002 f823 	bl	8002b82 <HAL_NVIC_SystemReset>
        break;
 8000b3c:	e072      	b.n	8000c24 <_ZZ4mainENKUlPhE0_clES_+0x140>
        if (data[1] == 0x00){
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d104      	bne.n	8000b52 <_ZZ4mainENKUlPhE0_clES_+0x6e>
          state = STATE_STOPPED;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
        break;
 8000b50:	e065      	b.n	8000c1e <_ZZ4mainENKUlPhE0_clES_+0x13a>
        else if (data[1] == 0x01){
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d160      	bne.n	8000c1e <_ZZ4mainENKUlPhE0_clES_+0x13a>
          state = STATE_STOPPED;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
          state = STATE_RUNNING;
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
        break;
 8000b64:	e05b      	b.n	8000c1e <_ZZ4mainENKUlPhE0_clES_+0x13a>
        can.send(original_id, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, data, 0);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6818      	ldr	r0, [r3, #0]
        can.subscribe_message(data[1] | (data[2] << 8), stm_CAN::ID_type::std, stm_CAN::Frame_type::data, stm_CAN::FIFO::_1);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3302      	adds	r3, #2
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	2301      	movs	r3, #1
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	2200      	movs	r2, #0
 8000b86:	f7ff fb4b 	bl	8000220 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
        can.send(original_id, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, data, 0);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6818      	ldr	r0, [r3, #0]
        can.subscribe_message(data[3] | (data[4] << 8), stm_CAN::ID_type::std, stm_CAN::Frame_type::data, stm_CAN::FIFO::_1);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	3303      	adds	r3, #3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f7ff fb39 	bl	8000220 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
        read_id[0] = data[1] | (data[2] << 8);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	3302      	adds	r3, #2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	601a      	str	r2, [r3, #0]
        read_id[1] = data[3] | (data[4] << 8);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	3303      	adds	r3, #3
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	431a      	orrs	r2, r3
        read_id[0] = data[1] | (data[2] << 8);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
        read_id[1] = data[3] | (data[4] << 8);
 8000bdc:	605a      	str	r2, [r3, #4]
        break;
 8000bde:	e021      	b.n	8000c24 <_ZZ4mainENKUlPhE0_clES_+0x140>
        if(data[1] < 8 && state == STATE_RUNNING){
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	d81b      	bhi.n	8000c22 <_ZZ4mainENKUlPhE0_clES_+0x13e>
          state = STATE_STOPPED;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
        if(data[1] < 8 && state == STATE_RUNNING){
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d116      	bne.n	8000c22 <_ZZ4mainENKUlPhE0_clES_+0x13e>
          motor_output[data[1]] = data[2] | (data[3] << 8);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b219      	sxth	r1, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3303      	adds	r3, #3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21a      	sxth	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	6838      	ldr	r0, [r7, #0]
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	7800      	ldrb	r0, [r0, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	b212      	sxth	r2, r2
 8000c14:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
        break;
 8000c18:	e003      	b.n	8000c22 <_ZZ4mainENKUlPhE0_clES_+0x13e>
        break;
 8000c1a:	bf00      	nop
 8000c1c:	e002      	b.n	8000c24 <_ZZ4mainENKUlPhE0_clES_+0x140>
        break;
 8000c1e:	bf00      	nop
 8000c20:	e000      	b.n	8000c24 <_ZZ4mainENKUlPhE0_clES_+0x140>
        break;
 8000c22:	bf00      	nop
      }
    return;
 8000c24:	bf00      	nop
  };
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <main>:
{
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8000c32:	af02      	add	r7, sp, #8
  HAL_Init();
 8000c34:	f001 f998 	bl	8001f68 <HAL_Init>
  SystemClock_Config();
 8000c38:	f000 fa90 	bl	800115c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8000c3c:	f000 fe54 	bl	80018e8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000c40:	f000 fe2c 	bl	800189c <_ZL11MX_DMA_Initv>
  MX_CAN_Init();
 8000c44:	f000 faf8 	bl	8001238 <_ZL11MX_CAN_Initv>
  MX_TIM2_Init();
 8000c48:	f000 fc16 	bl	8001478 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000c4c:	f000 fcac 	bl	80015a8 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8000c50:	f000 fdf0 	bl	8001834 <_ZL19MX_USART1_UART_Initv>
  MX_TIM1_Init();
 8000c54:	f000 fb6e 	bl	8001334 <_ZL12MX_TIM1_Initv>
  MX_TIM15_Init();
 8000c58:	f000 fd40 	bl	80016dc <_ZL13MX_TIM15_Initv>
  MX_SPI1_Init();
 8000c5c:	f000 fb28 	bl	80012b0 <_ZL12MX_SPI1_Initv>
  stm_CAN::CAN_303x8 can(&hcan);
 8000c60:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000c64:	49bf      	ldr	r1, [pc, #764]	; (8000f64 <main+0x338>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fc24 	bl	80004b4 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>
  ws2812::NeoPixel pixels(&htim1, TIM_CHANNEL_1, &hdma_tim1_ch1, 45, 22);
 8000c6c:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8000c70:	2316      	movs	r3, #22
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	232d      	movs	r3, #45	; 0x2d
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	4bbb      	ldr	r3, [pc, #748]	; (8000f68 <main+0x33c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	49bb      	ldr	r1, [pc, #748]	; (8000f6c <main+0x340>)
 8000c7e:	f7ff fce0 	bl	8000642 <_ZN6ws28128NeoPixelC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>
  const ws2812::color _orenge = {48, 24, 0};
 8000c82:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000c86:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000c8a:	4ab9      	ldr	r2, [pc, #740]	; (8000f70 <main+0x344>)
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	8019      	strh	r1, [r3, #0]
 8000c92:	3302      	adds	r3, #2
 8000c94:	0c12      	lsrs	r2, r2, #16
 8000c96:	701a      	strb	r2, [r3, #0]
  const ws2812::color _blue = {0, 48, 128};
 8000c98:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000c9c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000ca0:	4ab4      	ldr	r2, [pc, #720]	; (8000f74 <main+0x348>)
 8000ca2:	6812      	ldr	r2, [r2, #0]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	8019      	strh	r1, [r3, #0]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	0c12      	lsrs	r2, r2, #16
 8000cac:	701a      	strb	r2, [r3, #0]
  const ws2812::color _green = {0, 48, 0};
 8000cae:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000cb2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000cbe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8000cc2:	2230      	movs	r2, #48	; 0x30
 8000cc4:	705a      	strb	r2, [r3, #1]
 8000cc6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000cca:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	709a      	strb	r2, [r3, #2]
  const ws2812::color _purple = {24, 0, 72};
 8000cd2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000cd6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000cda:	4aa7      	ldr	r2, [pc, #668]	; (8000f78 <main+0x34c>)
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	8019      	strh	r1, [r3, #0]
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	0c12      	lsrs	r2, r2, #16
 8000ce6:	701a      	strb	r2, [r3, #0]
  const ws2812::color _white = {12, 16, 32};
 8000ce8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000cec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000cf0:	4aa2      	ldr	r2, [pc, #648]	; (8000f7c <main+0x350>)
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	8019      	strh	r1, [r3, #0]
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	701a      	strb	r2, [r3, #0]
  } motor_tim[] = {
 8000cfe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000d02:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8000d06:	4a9e      	ldr	r2, [pc, #632]	; (8000f80 <main+0x354>)
 8000d08:	461c      	mov	r4, r3
 8000d0a:	4615      	mov	r5, r2
 8000d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for (int i = 0; i < 5; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8000d26:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	dc3d      	bgt.n	8000daa <main+0x17e>
    HAL_TIM_PWM_Start(motor_tim[i].htim, motor_tim[i].channel1);
 8000d2e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000d32:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 8000d36:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	440b      	add	r3, r1
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000d4a:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 8000d4e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f004 fa0d 	bl	8005180 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(motor_tim[i].htim, motor_tim[i].channel2);
 8000d66:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000d6a:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 8000d6e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000d82:	f5a3 71f4 	sub.w	r1, r3, #488	; 0x1e8
 8000d86:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	4413      	add	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	440b      	add	r3, r1
 8000d94:	3308      	adds	r3, #8
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f004 f9f1 	bl	8005180 <HAL_TIM_PWM_Start>
  for (int i = 0; i < 5; i++)
 8000d9e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000da2:	3301      	adds	r3, #1
 8000da4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8000da8:	e7bd      	b.n	8000d26 <main+0xfa>
  const uint32_t original_id = 0x0100;
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  can.subscribe_message(0x00, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 8000db2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8000db6:	2300      	movs	r3, #0
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f7ff fa2e 	bl	8000220 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
  can.subscribe_message(original_id, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 8000dc4:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	2204      	movs	r2, #4
 8000dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd4:	f7ff fa24 	bl	8000220 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
  } state = STATE_STOPPED;
 8000dd8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000ddc:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
  uint32_t read_id[] = {0, 0};
 8000de4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000de8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000df4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  int16_t motor_output[] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000dfc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000e00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e04:	461a      	mov	r2, r3
 8000e06:	2300      	movs	r3, #0
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	6053      	str	r3, [r2, #4]
 8000e0c:	6093      	str	r3, [r2, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
  };
 8000e10:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000e14:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000e18:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000e22:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000e26:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e2a:	605a      	str	r2, [r3, #4]
  };
 8000e2c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000e30:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000e34:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000e3e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000e42:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000e4c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000e50:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000e5a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000e5e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000e62:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint8_t data[] = {0, 0, 0, 0, 0, 0, 0, 0};
 8000e64:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000e68:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000e6c:	4a45      	ldr	r2, [pc, #276]	; (8000f84 <main+0x358>)
 8000e6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e72:	e883 0003 	stmia.w	r3, {r0, r1}
    if (can.read(stm_CAN::FIFO::_0, data)){
 8000e76:	f107 021c 	add.w	r2, r7, #28
 8000e7a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fab7 	bl	80003f4 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	bf14      	ite	ne
 8000e8c:	2301      	movne	r3, #1
 8000e8e:	2300      	moveq	r3, #0
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d007      	beq.n	8000ea6 <main+0x27a>
      process_data(data);
 8000e96:	f107 021c 	add.w	r2, r7, #28
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fe1f 	bl	8000ae4 <_ZZ4mainENKUlPhE0_clES_>
    }
    for (int i = 0; i < 8; i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8000eac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000eb0:	2b07      	cmp	r3, #7
 8000eb2:	dc0e      	bgt.n	8000ed2 <main+0x2a6>
    {
      data[i] = 0;
 8000eb4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000eb8:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000ebc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000ec0:	4413      	add	r3, r2
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 8000ec6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8000eca:	3301      	adds	r3, #1
 8000ecc:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8000ed0:	e7ec      	b.n	8000eac <main+0x280>
    }
    
    CAN_RxHeaderTypeDef header;
    if (can.read(stm_CAN::FIFO::_1, data, &header)){
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	f107 021c 	add.w	r2, r7, #28
 8000ed8:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8000edc:	2101      	movs	r1, #1
 8000ede:	f7ff fab9 	bl	8000454 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPhP19CAN_RxHeaderTypeDef>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bf14      	ite	ne
 8000ee8:	2301      	movne	r3, #1
 8000eea:	2300      	moveq	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 8082 	beq.w	8000ff8 <main+0x3cc>
      if (header.StdId == read_id[0]){
 8000ef4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000ef8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f02:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d13d      	bne.n	8000f88 <main+0x35c>
        for(int i = 0; i < 4; i++){
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8000f12:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	dc6e      	bgt.n	8000ff8 <main+0x3cc>
          motor_output[i] = data[i*2] | (data[i*2+1] << 8);
 8000f1a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8000f24:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	3301      	adds	r3, #1
 8000f34:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8000f38:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 8000f3c:	5ccb      	ldrb	r3, [r1, r3]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b219      	sxth	r1, r3
 8000f46:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f4e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8000f52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for(int i = 0; i < 4; i++){
 8000f56:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8000f60:	e7d7      	b.n	8000f12 <main+0x2e6>
 8000f62:	bf00      	nop
 8000f64:	2000009c 	.word	0x2000009c
 8000f68:	2000029c 	.word	0x2000029c
 8000f6c:	2000016c 	.word	0x2000016c
 8000f70:	08006d44 	.word	0x08006d44
 8000f74:	08006d48 	.word	0x08006d48
 8000f78:	08006d4c 	.word	0x08006d4c
 8000f7c:	08006d50 	.word	0x08006d50
 8000f80:	08006d54 	.word	0x08006d54
 8000f84:	08006d90 	.word	0x08006d90
        }
      }else if (header.StdId == read_id[1]){
 8000f88:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f8c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f96:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f040 80d1 	bne.w	8001144 <main+0x518>
        for(int i = 0; i < 4; i++){
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8000fa8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	dc23      	bgt.n	8000ff8 <main+0x3cc>
          motor_output[i] = data[i*2] | (data[i*2+1] << 8);
 8000fb0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8000fba:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8000fce:	f5a1 7109 	sub.w	r1, r1, #548	; 0x224
 8000fd2:	5ccb      	ldrb	r3, [r1, r3]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b219      	sxth	r1, r3
 8000fdc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000fe0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fe4:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8000fe8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for(int i = 0; i < 4; i++){
 8000fec:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8000ff6:	e7d7      	b.n	8000fa8 <main+0x37c>
        }
      }else{break;}
    }
    if(state == STATE_STOPPED){
 8000ff8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000ffc:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d115      	bne.n	8001032 <main+0x406>
      for(int i = 0; i < 8; i++){
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800100c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001010:	2b07      	cmp	r3, #7
 8001012:	dc0e      	bgt.n	8001032 <main+0x406>
        motor_output[i] = 0;
 8001014:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001018:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800101c:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001020:	2100      	movs	r1, #0
 8001022:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      for(int i = 0; i < 8; i++){
 8001026:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800102a:	3301      	adds	r3, #1
 800102c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001030:	e7ec      	b.n	800100c <main+0x3e0>
      }
    }
    write_motor();
 8001032:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb3a 	bl	80006b0 <_ZZ4mainENKUlvE_clEv>
    // motor_output[5] = -16383;
    // motor_output[6] = 16383;
    // motor_output[7] = -16383;
    // write_motor();
    
    for (int i = 0; i < 8; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001042:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001046:	2b07      	cmp	r3, #7
 8001048:	dc73      	bgt.n	8001132 <main+0x506>
    {
      if(state == STATE_RUNNING){
 800104a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800104e:	f2a3 13e9 	subw	r3, r3, #489	; 0x1e9
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d152      	bne.n	80010fe <main+0x4d2>
        if(motor_output[i] == 0){
 8001058:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800105c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001060:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8001064:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d114      	bne.n	8001096 <main+0x46a>
          pixels.colors[i] = _white;
 800106c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001070:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8001074:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	440b      	add	r3, r1
 8001080:	33c8      	adds	r3, #200	; 0xc8
 8001082:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8001086:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800108a:	3307      	adds	r3, #7
 800108c:	8811      	ldrh	r1, [r2, #0]
 800108e:	7892      	ldrb	r2, [r2, #2]
 8001090:	8019      	strh	r1, [r3, #0]
 8001092:	709a      	strb	r2, [r3, #2]
 8001094:	e047      	b.n	8001126 <main+0x4fa>
        }else if (motor_output[i] > 0){
 8001096:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800109a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800109e:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80010a2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	dd14      	ble.n	80010d4 <main+0x4a8>
          pixels.colors[i] = _blue;
 80010aa:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010ae:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 80010b2:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	440b      	add	r3, r1
 80010be:	33c8      	adds	r3, #200	; 0xc8
 80010c0:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80010c4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80010c8:	3307      	adds	r3, #7
 80010ca:	8811      	ldrh	r1, [r2, #0]
 80010cc:	7892      	ldrb	r2, [r2, #2]
 80010ce:	8019      	strh	r1, [r3, #0]
 80010d0:	709a      	strb	r2, [r3, #2]
 80010d2:	e028      	b.n	8001126 <main+0x4fa>
        }else{
          pixels.colors[i] = _orenge;
 80010d4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010d8:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 80010dc:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	33c8      	adds	r3, #200	; 0xc8
 80010ea:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80010ee:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 80010f2:	3307      	adds	r3, #7
 80010f4:	8811      	ldrh	r1, [r2, #0]
 80010f6:	7892      	ldrb	r2, [r2, #2]
 80010f8:	8019      	strh	r1, [r3, #0]
 80010fa:	709a      	strb	r2, [r3, #2]
 80010fc:	e013      	b.n	8001126 <main+0x4fa>
        }
      }else{
        pixels.colors[i] = _purple;
 80010fe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001102:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 8001106:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	440b      	add	r3, r1
 8001112:	33c8      	adds	r3, #200	; 0xc8
 8001114:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8001118:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800111c:	3307      	adds	r3, #7
 800111e:	8811      	ldrh	r1, [r2, #0]
 8001120:	7892      	ldrb	r2, [r2, #2]
 8001122:	8019      	strh	r1, [r3, #0]
 8001124:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < 8; i++)
 8001126:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800112a:	3301      	adds	r3, #1
 800112c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001130:	e787      	b.n	8001042 <main+0x416>
      }
    }
    pixels.rend();
 8001132:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fa60 	bl	80005fc <_ZN6ws28128NeoPixel4rendEv>

    HAL_Delay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 ff79 	bl	8002034 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001142:	e68f      	b.n	8000e64 <main+0x238>
      }else{break;}
 8001144:	bf00      	nop
  stm_CAN::CAN_303x8 can(&hcan);
 8001146:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9ca 	bl	80004e4 <_ZN7stm_CAN9CAN_303x8D1Ev>
  /* USER CODE END 3 */
}
 8001150:	2300      	movs	r3, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8001158:	46bd      	mov	sp, r7
 800115a:	bdb0      	pop	{r4, r5, r7, pc}

0800115c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b096      	sub	sp, #88	; 0x58
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001166:	2228      	movs	r2, #40	; 0x28
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f005 fd7c 	bl	8006c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001190:	2301      	movs	r3, #1
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800119a:	2301      	movs	r3, #1
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119e:	2301      	movs	r3, #1
 80011a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f852 	bl	8003260 <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bf14      	ite	ne
 80011c2:	2301      	movne	r3, #1
 80011c4:	2300      	moveq	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 80011cc:	f000 fbd8 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2102      	movs	r1, #2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 f875 	bl	80042dc <HAL_RCC_ClockConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf14      	ite	ne
 80011f8:	2301      	movne	r3, #1
 80011fa:	2300      	moveq	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8001202:	f000 fbbd 	bl	8001980 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8001206:	f241 0301 	movw	r3, #4097	; 0x1001
 800120a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fa98 	bl	800474c <HAL_RCCEx_PeriphCLKConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800122c:	f000 fba8 	bl	8001980 <Error_Handler>
  }
}
 8001230:	bf00      	nop
 8001232:	3758      	adds	r7, #88	; 0x58
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 800123e:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <_ZL11MX_CAN_Initv+0x74>)
 8001240:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 8001244:	2202      	movs	r2, #2
 8001246:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 8001256:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800125a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 800125e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001262:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 8001266:	2200      	movs	r2, #0
 8001268:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 800126c:	2200      	movs	r2, #0
 800126e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 8001272:	2200      	movs	r2, #0
 8001274:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 8001278:	2200      	movs	r2, #0
 800127a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 800127e:	2200      	movs	r2, #0
 8001280:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 8001284:	2200      	movs	r2, #0
 8001286:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <_ZL11MX_CAN_Initv+0x70>)
 800128a:	f000 fef7 	bl	800207c <HAL_CAN_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 800129e:	f000 fb6f 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000009c 	.word	0x2000009c
 80012ac:	40006400 	.word	0x40006400

080012b0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012b6:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <_ZL12MX_SPI1_Initv+0x80>)
 80012b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012ca:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80012ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012e6:	2210      	movs	r2, #16
 80012e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 80012fe:	2207      	movs	r2, #7
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 8001304:	2200      	movs	r2, #0
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 800130a:	2208      	movs	r2, #8
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <_ZL12MX_SPI1_Initv+0x7c>)
 8001310:	f003 fb42 	bl	8004998 <HAL_SPI_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8001324:	f000 fb2c 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200000c4 	.word	0x200000c4
 8001330:	40013000 	.word	0x40013000

08001334 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b096      	sub	sp, #88	; 0x58
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	222c      	movs	r2, #44	; 0x2c
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f005 fc81 	bl	8006c68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 8001368:	4a42      	ldr	r2, [pc, #264]	; (8001474 <_ZL12MX_TIM1_Initv+0x140>)
 800136a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800136c:	4b40      	ldr	r3, [pc, #256]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 8001378:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 800137a:	2259      	movs	r2, #89	; 0x59
 800137c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b39      	ldr	r3, [pc, #228]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001390:	4837      	ldr	r0, [pc, #220]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 8001392:	f003 fe9d 	bl	80050d0 <HAL_TIM_PWM_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80013a6:	f000 faeb 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ba:	4619      	mov	r1, r3
 80013bc:	482c      	ldr	r0, [pc, #176]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 80013be:	f005 f809 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf14      	ite	ne
 80013c8:	2301      	movne	r3, #1
 80013ca:	2300      	moveq	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <_ZL12MX_TIM1_Initv+0xa2>
  {
    Error_Handler();
 80013d2:	f000 fad5 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	; 0x60
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	481d      	ldr	r0, [pc, #116]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 80013fc:	f004 faa2 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <_ZL12MX_TIM1_Initv+0xe0>
  {
    Error_Handler();
 8001410:	f000 fab6 	bl	8001980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4809      	ldr	r0, [pc, #36]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 800144a:	f005 f831 	bl	80064b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 800145e:	f000 fa8f 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001462:	4803      	ldr	r0, [pc, #12]	; (8001470 <_ZL12MX_TIM1_Initv+0x13c>)
 8001464:	f000 fbee 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 8001468:	bf00      	nop
 800146a:	3758      	adds	r7, #88	; 0x58
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000016c 	.word	0x2000016c
 8001474:	40012c00 	.word	0x40012c00

08001478 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a4:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014aa:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 80014ac:	2220      	movs	r2, #32
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80014b0:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 80014b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c4:	4837      	ldr	r0, [pc, #220]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 80014c6:	f003 fe03 	bl	80050d0 <HAL_TIM_PWM_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf14      	ite	ne
 80014d0:	2301      	movne	r3, #1
 80014d2:	2300      	moveq	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <_ZL12MX_TIM2_Initv+0x66>
  {
    Error_Handler();
 80014da:	f000 fa51 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	482d      	ldr	r0, [pc, #180]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 80014ee:	f004 ff71 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <_ZL12MX_TIM2_Initv+0x8e>
  {
    Error_Handler();
 8001502:	f000 fa3d 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001506:	2370      	movs	r3, #112	; 0x70
 8001508:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	4821      	ldr	r0, [pc, #132]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 800151e:	f004 fa11 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf14      	ite	ne
 8001528:	2301      	movne	r3, #1
 800152a:	2300      	moveq	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <_ZL12MX_TIM2_Initv+0xbe>
  {
    Error_Handler();
 8001532:	f000 fa25 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	2204      	movs	r2, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4819      	ldr	r0, [pc, #100]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 800153e:	f004 fa01 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf14      	ite	ne
 8001548:	2301      	movne	r3, #1
 800154a:	2300      	moveq	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <_ZL12MX_TIM2_Initv+0xde>
  {
    Error_Handler();
 8001552:	f000 fa15 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	2208      	movs	r2, #8
 800155a:	4619      	mov	r1, r3
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 800155e:	f004 f9f1 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <_ZL12MX_TIM2_Initv+0xfe>
  {
    Error_Handler();
 8001572:	f000 fa05 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	220c      	movs	r2, #12
 800157a:	4619      	mov	r1, r3
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 800157e:	f004 f9e1 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <_ZL12MX_TIM2_Initv+0x11e>
  {
    Error_Handler();
 8001592:	f000 f9f5 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <_ZL12MX_TIM2_Initv+0x12c>)
 8001598:	f000 fb54 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200001b8 	.word	0x200001b8

080015a8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ba:	463b      	mov	r3, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015cc:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 80015ce:	4a42      	ldr	r2, [pc, #264]	; (80016d8 <_ZL12MX_TIM3_Initv+0x130>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015d2:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80015d8:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 80015da:	2220      	movs	r2, #32
 80015dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 80015e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015f2:	4838      	ldr	r0, [pc, #224]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 80015f4:	f003 fd6c 	bl	80050d0 <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf14      	ite	ne
 80015fe:	2301      	movne	r3, #1
 8001600:	2300      	moveq	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <_ZL12MX_TIM3_Initv+0x64>
  {
    Error_Handler();
 8001608:	f000 f9ba 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	482e      	ldr	r0, [pc, #184]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 800161c:	f004 feda 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8001630:	f000 f9a6 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001634:	2370      	movs	r3, #112	; 0x70
 8001636:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	4619      	mov	r1, r3
 800164a:	4822      	ldr	r0, [pc, #136]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 800164c:	f004 f97a 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 8001660:	f000 f98e 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	2204      	movs	r2, #4
 8001668:	4619      	mov	r1, r3
 800166a:	481a      	ldr	r0, [pc, #104]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 800166c:	f004 f96a 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <_ZL12MX_TIM3_Initv+0xdc>
  {
    Error_Handler();
 8001680:	f000 f97e 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	2208      	movs	r2, #8
 8001688:	4619      	mov	r1, r3
 800168a:	4812      	ldr	r0, [pc, #72]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 800168c:	f004 f95a 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	bf14      	ite	ne
 8001696:	2301      	movne	r3, #1
 8001698:	2300      	moveq	r3, #0
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <_ZL12MX_TIM3_Initv+0xfc>
  {
    Error_Handler();
 80016a0:	f000 f96e 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	220c      	movs	r2, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	480a      	ldr	r0, [pc, #40]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 80016ac:	f004 f94a 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <_ZL12MX_TIM3_Initv+0x11c>
  {
    Error_Handler();
 80016c0:	f000 f95e 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <_ZL12MX_TIM3_Initv+0x12c>)
 80016c6:	f000 fabd 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000204 	.word	0x20000204
 80016d8:	40000400 	.word	0x40000400

080016dc <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b096      	sub	sp, #88	; 0x58
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	222c      	movs	r2, #44	; 0x2c
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f005 faad 	bl	8006c68 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 8001710:	4a47      	ldr	r2, [pc, #284]	; (8001830 <_ZL13MX_TIM15_Initv+0x154>)
 8001712:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001714:	4b45      	ldr	r3, [pc, #276]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b44      	ldr	r3, [pc, #272]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0xffff;
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 8001722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001726:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b40      	ldr	r3, [pc, #256]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b3d      	ldr	r3, [pc, #244]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800173a:	483c      	ldr	r0, [pc, #240]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 800173c:	f003 fcc8 	bl	80050d0 <HAL_TIM_PWM_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf14      	ite	ne
 8001746:	2301      	movne	r3, #1
 8001748:	2300      	moveq	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <_ZL13MX_TIM15_Initv+0x78>
  {
    Error_Handler();
 8001750:	f000 f916 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800175c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001760:	4619      	mov	r1, r3
 8001762:	4832      	ldr	r0, [pc, #200]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 8001764:	f004 fe36 	bl	80063d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <_ZL13MX_TIM15_Initv+0xa0>
  {
    Error_Handler();
 8001778:	f000 f902 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800177c:	2370      	movs	r3, #112	; 0x70
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001784:	2300      	movs	r3, #0
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001788:	2300      	movs	r3, #0
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800179c:	2200      	movs	r2, #0
 800179e:	4619      	mov	r1, r3
 80017a0:	4822      	ldr	r0, [pc, #136]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 80017a2:	f004 f8cf 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bf14      	ite	ne
 80017ac:	2301      	movne	r3, #1
 80017ae:	2300      	moveq	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <_ZL13MX_TIM15_Initv+0xde>
  {
    Error_Handler();
 80017b6:	f000 f8e3 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017be:	2204      	movs	r2, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	481a      	ldr	r0, [pc, #104]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 80017c4:	f004 f8be 	bl	8005944 <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	bf14      	ite	ne
 80017ce:	2301      	movne	r3, #1
 80017d0:	2300      	moveq	r3, #0
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <_ZL13MX_TIM15_Initv+0x100>
  {
    Error_Handler();
 80017d8:	f000 f8d2 	bl	8001980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	4619      	mov	r1, r3
 8001802:	480a      	ldr	r0, [pc, #40]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 8001804:	f004 fe54 	bl	80064b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	bf14      	ite	ne
 800180e:	2301      	movne	r3, #1
 8001810:	2300      	moveq	r3, #0
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <_ZL13MX_TIM15_Initv+0x140>
  {
    Error_Handler();
 8001818:	f000 f8b2 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <_ZL13MX_TIM15_Initv+0x150>)
 800181e:	f000 fa11 	bl	8001c44 <HAL_TIM_MspPostInit>

}
 8001822:	bf00      	nop
 8001824:	3758      	adds	r7, #88	; 0x58
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000250 	.word	0x20000250
 8001830:	40014000 	.word	0x40014000

08001834 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 800183a:	4a17      	ldr	r2, [pc, #92]	; (8001898 <_ZL19MX_USART1_UART_Initv+0x64>)
 800183c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001876:	4807      	ldr	r0, [pc, #28]	; (8001894 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001878:	f004 fe92 	bl	80065a0 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 800188c:	f000 f878 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200002e0 	.word	0x200002e0
 8001898:	40013800 	.word	0x40013800

0800189c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <_ZL11MX_DMA_Initv+0x48>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <_ZL11MX_DMA_Initv+0x48>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6153      	str	r3, [r2, #20]
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <_ZL11MX_DMA_Initv+0x48>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	200c      	movs	r0, #12
 80018c0:	f001 f935 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018c4:	200c      	movs	r0, #12
 80018c6:	f001 f94e 	bl	8002b66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	200d      	movs	r0, #13
 80018d0:	f001 f92d 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018d4:	200d      	movs	r0, #13
 80018d6:	f001 f946 	bl	8002b66 <HAL_NVIC_EnableIRQ>

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <_ZL12MX_GPIO_Initv+0x94>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a1e      	ldr	r2, [pc, #120]	; (800197c <_ZL12MX_GPIO_Initv+0x94>)
 8001904:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001908:	6153      	str	r3, [r2, #20]
 800190a:	4b1c      	ldr	r3, [pc, #112]	; (800197c <_ZL12MX_GPIO_Initv+0x94>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <_ZL12MX_GPIO_Initv+0x94>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <_ZL12MX_GPIO_Initv+0x94>)
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	6153      	str	r3, [r2, #20]
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <_ZL12MX_GPIO_Initv+0x94>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <_ZL12MX_GPIO_Initv+0x94>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <_ZL12MX_GPIO_Initv+0x94>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001938:	6153      	str	r3, [r2, #20]
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_ZL12MX_GPIO_Initv+0x94>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ACTIVE1_Pin|ACTIVE2_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	f248 0120 	movw	r1, #32800	; 0x8020
 800194c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001950:	f001 fc6e 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACTIVE1_Pin ACTIVE2_Pin */
  GPIO_InitStruct.Pin = ACTIVE1_Pin|ACTIVE2_Pin;
 8001954:	f248 0320 	movw	r3, #32800	; 0x8020
 8001958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001970:	f001 faec 	bl	8002f4c <HAL_GPIO_Init>

}
 8001974:	bf00      	nop
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	e7fe      	b.n	8001988 <Error_Handler+0x8>
	...

0800198c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_MspInit+0x44>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_MspInit+0x44>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6193      	str	r3, [r2, #24]
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_MspInit+0x44>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_MspInit+0x44>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_MspInit+0x44>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_MspInit+0x44>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000

080019d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_CAN_MspInit+0x80>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d129      	bne.n	8001a4a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_CAN_MspInit+0x84>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_CAN_MspInit+0x84>)
 80019fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_CAN_MspInit+0x84>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_CAN_MspInit+0x84>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_CAN_MspInit+0x84>)
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	6153      	str	r3, [r2, #20]
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_CAN_MspInit+0x84>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001a38:	2309      	movs	r3, #9
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f001 fa81 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40006400 	.word	0x40006400
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2b      	ldr	r2, [pc, #172]	; (8001b28 <HAL_SPI_MspInit+0xcc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d14f      	bne.n	8001b1e <HAL_SPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_SPI_MspInit+0xd0>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_SPI_MspInit+0xd0>)
 8001a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a88:	6193      	str	r3, [r2, #24]
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_SPI_MspInit+0xd0>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_SPI_MspInit+0xd0>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a24      	ldr	r2, [pc, #144]	; (8001b2c <HAL_SPI_MspInit+0xd0>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_SPI_MspInit+0xd0>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001aae:	2328      	movs	r3, #40	; 0x28
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001abe:	2305      	movs	r3, #5
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4819      	ldr	r0, [pc, #100]	; (8001b30 <HAL_SPI_MspInit+0xd4>)
 8001aca:	f001 fa3f 	bl	8002f4c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001ad0:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <HAL_SPI_MspInit+0xdc>)
 8001ad2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aec:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b02:	480c      	ldr	r0, [pc, #48]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001b04:	f001 f84d 	bl	8002ba2 <HAL_DMA_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_SPI_MspInit+0xb6>
    {
      Error_Handler();
 8001b0e:	f7ff ff37 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_SPI_MspInit+0xd8>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40013000 	.word	0x40013000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	20000128 	.word	0x20000128
 8001b38:	40020030 	.word	0x40020030

08001b3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <HAL_TIM_PWM_MspInit+0xf0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d134      	bne.n	8001bb8 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	4a37      	ldr	r2, [pc, #220]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001b54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b58:	6193      	str	r3, [r2, #24]
 8001b5a:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001b66:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001b68:	4a33      	ldr	r2, [pc, #204]	; (8001c38 <HAL_TIM_PWM_MspInit+0xfc>)
 8001b6a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001b6e:	2210      	movs	r2, #16
 8001b70:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b78:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b84:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001b94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001b98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001b9a:	4826      	ldr	r0, [pc, #152]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001b9c:	f001 f801 	bl	8002ba2 <HAL_DMA_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 8001ba6:	f7ff feeb 	bl	8001980 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <HAL_TIM_PWM_MspInit+0xf8>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001bb6:	e034      	b.n	8001c22 <HAL_TIM_PWM_MspInit+0xe6>
  else if(htim_pwm->Instance==TIM2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_TIM_PWM_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a1a      	ldr	r2, [pc, #104]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	61d3      	str	r3, [r2, #28]
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
}
 8001bda:	e022      	b.n	8001c22 <HAL_TIM_PWM_MspInit+0xe6>
  else if(htim_pwm->Instance==TIM3)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_TIM_PWM_MspInit+0x100>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10c      	bne.n	8001c00 <HAL_TIM_PWM_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	61d3      	str	r3, [r2, #28]
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
}
 8001bfe:	e010      	b.n	8001c22 <HAL_TIM_PWM_MspInit+0xe6>
  else if(htim_pwm->Instance==TIM15)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_TIM_PWM_MspInit+0x104>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10b      	bne.n	8001c22 <HAL_TIM_PWM_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_TIM_PWM_MspInit+0xf4>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40012c00 	.word	0x40012c00
 8001c30:	40021000 	.word	0x40021000
 8001c34:	2000029c 	.word	0x2000029c
 8001c38:	4002001c 	.word	0x4002001c
 8001c3c:	40000400 	.word	0x40000400
 8001c40:	40014000 	.word	0x40014000

08001c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	; 0x30
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a5d      	ldr	r2, [pc, #372]	; (8001dd8 <HAL_TIM_MspPostInit+0x194>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d11e      	bne.n	8001ca4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b5d      	ldr	r3, [pc, #372]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	4a5c      	ldr	r2, [pc, #368]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c70:	6153      	str	r3, [r2, #20]
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c90:	2306      	movs	r3, #6
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9e:	f001 f955 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001ca2:	e095      	b.n	8001dd0 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d12f      	bne.n	8001d0e <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b4b      	ldr	r3, [pc, #300]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	4a4a      	ldr	r2, [pc, #296]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	6153      	str	r3, [r2, #20]
 8001cba:	4b48      	ldr	r3, [pc, #288]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce4:	f001 f932 	bl	8002f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ce8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d08:	f001 f920 	bl	8002f4c <HAL_GPIO_Init>
}
 8001d0c:	e060      	b.n	8001dd0 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM3)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a33      	ldr	r2, [pc, #204]	; (8001de0 <HAL_TIM_MspPostInit+0x19c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d139      	bne.n	8001d8c <HAL_TIM_MspPostInit+0x148>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d22:	6153      	str	r3, [r2, #20]
 8001d24:	4b2d      	ldr	r3, [pc, #180]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3a:	6153      	str	r3, [r2, #20]
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d48:	2350      	movs	r3, #80	; 0x50
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d66:	f001 f8f1 	bl	8002f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4817      	ldr	r0, [pc, #92]	; (8001de4 <HAL_TIM_MspPostInit+0x1a0>)
 8001d86:	f001 f8e1 	bl	8002f4c <HAL_GPIO_Init>
}
 8001d8a:	e021      	b.n	8001dd0 <HAL_TIM_MspPostInit+0x18c>
  else if(htim->Instance==TIM15)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <HAL_TIM_MspPostInit+0x1a4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11c      	bne.n	8001dd0 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	6153      	str	r3, [r2, #20]
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_TIM_MspPostInit+0x198>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dae:	230c      	movs	r3, #12
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001dbe:	2309      	movs	r3, #9
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dcc:	f001 f8be 	bl	8002f4c <HAL_GPIO_Init>
}
 8001dd0:	bf00      	nop
 8001dd2:	3730      	adds	r7, #48	; 0x30
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40000400 	.word	0x40000400
 8001de4:	48000400 	.word	0x48000400
 8001de8:	40014000 	.word	0x40014000

08001dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_UART_MspInit+0x7c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d127      	bne.n	8001e5e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e30:	6153      	str	r3, [r2, #20]
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_UART_MspInit+0x80>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e3e:	23c0      	movs	r3, #192	; 0xc0
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <HAL_UART_MspInit+0x84>)
 8001e5a:	f001 f877 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	48000400 	.word	0x48000400

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler+0x4>

08001e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 f898 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA1_Channel2_IRQHandler+0x10>)
 8001ece:	f000 ff4c 	bl	8002d6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000029c 	.word	0x2000029c

08001edc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <DMA1_Channel3_IRQHandler+0x10>)
 8001ee2:	f000 ff42 	bl	8002d6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000128 	.word	0x20000128

08001ef0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <SystemInit+0x20>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <SystemInit+0x20>)
 8001efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f18:	480d      	ldr	r0, [pc, #52]	; (8001f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f1a:	490e      	ldr	r1, [pc, #56]	; (8001f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <LoopForever+0xe>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f30:	4c0b      	ldr	r4, [pc, #44]	; (8001f60 <LoopForever+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f3e:	f7ff ffd7 	bl	8001ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f42:	f004 fe65 	bl	8006c10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f46:	f7fe fe71 	bl	8000c2c <main>

08001f4a <LoopForever>:

LoopForever:
    b LoopForever
 8001f4a:	e7fe      	b.n	8001f4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f4c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f58:	08006de8 	.word	0x08006de8
  ldr r2, =_sbss
 8001f5c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f60:	20000370 	.word	0x20000370

08001f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC1_2_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_Init+0x28>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_Init+0x28>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 fdcd 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fd02 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40022000 	.word	0x40022000

08001f94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fde9 	bl	8002b8a <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 fdad 	bl	8002b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000010 	.word	0x20000010
 8001fec:	20000018 	.word	0x20000018
 8001ff0:	20000014 	.word	0x20000014

08001ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000018 	.word	0x20000018
 8002018:	20000364 	.word	0x20000364

0800201c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000364 	.word	0x20000364

08002034 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000018 	.word	0x20000018

0800207c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0ed      	b.n	800226a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fc9a 	bl	80019d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020b0:	f7ff ffb4 	bl	800201c <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020b6:	e012      	b.n	80020de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b8:	f7ff ffb0 	bl	800201c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b0a      	cmp	r3, #10
 80020c4:	d90b      	bls.n	80020de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2205      	movs	r2, #5
 80020d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0c5      	b.n	800226a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0e5      	beq.n	80020b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0202 	bic.w	r2, r2, #2
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020fc:	f7ff ff8e 	bl	800201c <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002102:	e012      	b.n	800212a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002104:	f7ff ff8a 	bl	800201c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b0a      	cmp	r3, #10
 8002110:	d90b      	bls.n	800212a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e09f      	b.n	800226a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e5      	bne.n	8002104 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7e1b      	ldrb	r3, [r3, #24]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d108      	bne.n	8002152 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e007      	b.n	8002162 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002160:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7e5b      	ldrb	r3, [r3, #25]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	e007      	b.n	800218c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800218a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7e9b      	ldrb	r3, [r3, #26]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d108      	bne.n	80021a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0220 	orr.w	r2, r2, #32
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e007      	b.n	80021b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0220 	bic.w	r2, r2, #32
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7edb      	ldrb	r3, [r3, #27]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0210 	bic.w	r2, r2, #16
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e007      	b.n	80021e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0210 	orr.w	r2, r2, #16
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7f1b      	ldrb	r3, [r3, #28]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d108      	bne.n	80021fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0208 	orr.w	r2, r2, #8
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	e007      	b.n	800220a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0208 	bic.w	r2, r2, #8
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7f5b      	ldrb	r3, [r3, #29]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d108      	bne.n	8002224 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0204 	orr.w	r2, r2, #4
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	e007      	b.n	8002234 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0204 	bic.w	r2, r2, #4
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	ea42 0103 	orr.w	r1, r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002272:	b480      	push	{r7}
 8002274:	b087      	sub	sp, #28
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002288:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800228a:	7cfb      	ldrb	r3, [r7, #19]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d003      	beq.n	8002298 <HAL_CAN_ConfigFilter+0x26>
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	2b02      	cmp	r3, #2
 8002294:	f040 80aa 	bne.w	80023ec <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2201      	movs	r2, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d123      	bne.n	800231a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43db      	mvns	r3, r3
 80022dc:	401a      	ands	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3248      	adds	r2, #72	; 0x48
 80022fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800230e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002310:	6979      	ldr	r1, [r7, #20]
 8002312:	3348      	adds	r3, #72	; 0x48
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d122      	bne.n	8002368 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	431a      	orrs	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002342:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3248      	adds	r2, #72	; 0x48
 8002348:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800235c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800235e:	6979      	ldr	r1, [r7, #20]
 8002360:	3348      	adds	r3, #72	; 0x48
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002382:	e007      	b.n	8002394 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	431a      	orrs	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023ae:	e007      	b.n	80023c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d107      	bne.n	80023d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023de:	f023 0201 	bic.w	r2, r3, #1
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e006      	b.n	80023fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d12e      	bne.n	8002478 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002432:	f7ff fdf3 	bl	800201c <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002438:	e012      	b.n	8002460 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800243a:	f7ff fdef 	bl	800201c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b0a      	cmp	r3, #10
 8002446:	d90b      	bls.n	8002460 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2205      	movs	r2, #5
 8002458:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e012      	b.n	8002486 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e5      	bne.n	800243a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e006      	b.n	8002486 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d133      	bne.n	800250a <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024b2:	f7ff fdb3 	bl	800201c <HAL_GetTick>
 80024b6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024b8:	e012      	b.n	80024e0 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024ba:	f7ff fdaf 	bl	800201c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b0a      	cmp	r3, #10
 80024c6:	d90b      	bls.n	80024e0 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2205      	movs	r2, #5
 80024d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e01b      	b.n	8002518 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0e5      	beq.n	80024ba <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0202 	bic.w	r2, r2, #2
 80024fc:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e006      	b.n	8002518 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002534:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800253e:	7ffb      	ldrb	r3, [r7, #31]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d003      	beq.n	800254c <HAL_CAN_AddTxMessage+0x2c>
 8002544:	7ffb      	ldrb	r3, [r7, #31]
 8002546:	2b02      	cmp	r3, #2
 8002548:	f040 80b8 	bne.w	80026bc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10a      	bne.n	800256c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80a0 	beq.w	80026ac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	0e1b      	lsrs	r3, r3, #24
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d907      	bls.n	800258c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e09e      	b.n	80026ca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800258c:	2201      	movs	r2, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	409a      	lsls	r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10d      	bne.n	80025ba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025a8:	68f9      	ldr	r1, [r7, #12]
 80025aa:	6809      	ldr	r1, [r1, #0]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3318      	adds	r3, #24
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	440b      	add	r3, r1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e00f      	b.n	80025da <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025c4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ca:	68f9      	ldr	r1, [r7, #12]
 80025cc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025ce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3318      	adds	r3, #24
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	440b      	add	r3, r1
 80025d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3318      	adds	r3, #24
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	440b      	add	r3, r1
 80025ea:	3304      	adds	r3, #4
 80025ec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	7d1b      	ldrb	r3, [r3, #20]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d111      	bne.n	800261a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3318      	adds	r3, #24
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4413      	add	r3, r2
 8002602:	3304      	adds	r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	6811      	ldr	r1, [r2, #0]
 800260a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3318      	adds	r3, #24
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	440b      	add	r3, r1
 8002616:	3304      	adds	r3, #4
 8002618:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3307      	adds	r3, #7
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	061a      	lsls	r2, r3, #24
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3306      	adds	r3, #6
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3305      	adds	r3, #5
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	4313      	orrs	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	3204      	adds	r2, #4
 800263a:	7812      	ldrb	r2, [r2, #0]
 800263c:	4610      	mov	r0, r2
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	6811      	ldr	r1, [r2, #0]
 8002642:	ea43 0200 	orr.w	r2, r3, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	440b      	add	r3, r1
 800264c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002650:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3303      	adds	r3, #3
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	061a      	lsls	r2, r3, #24
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3302      	adds	r3, #2
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3301      	adds	r3, #1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	4313      	orrs	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	4610      	mov	r0, r2
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	6811      	ldr	r1, [r2, #0]
 8002678:	ea43 0200 	orr.w	r2, r3, r0
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	440b      	add	r3, r1
 8002682:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002686:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3318      	adds	r3, #24
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	6811      	ldr	r1, [r2, #0]
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3318      	adds	r3, #24
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	440b      	add	r3, r1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e00e      	b.n	80026ca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e006      	b.n	80026ca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
  }
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026d6:	b480      	push	{r7}
 80026d8:	b087      	sub	sp, #28
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d003      	beq.n	80026fa <HAL_CAN_GetRxMessage+0x24>
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	f040 80f3 	bne.w	80028e0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10e      	bne.n	800271e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0e7      	b.n	80028ee <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0d8      	b.n	80028ee <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	331b      	adds	r3, #27
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	4413      	add	r3, r2
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0204 	and.w	r2, r3, #4
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	331b      	adds	r3, #27
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	4413      	add	r3, r2
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0d5b      	lsrs	r3, r3, #21
 800276a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e00b      	b.n	800278c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	331b      	adds	r3, #27
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4413      	add	r3, r2
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	08db      	lsrs	r3, r3, #3
 8002784:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	331b      	adds	r3, #27
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0202 	and.w	r2, r3, #2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	331b      	adds	r3, #27
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 020f 	and.w	r2, r3, #15
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	331b      	adds	r3, #27
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4413      	add	r3, r2
 80027c6:	3304      	adds	r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	331b      	adds	r3, #27
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	4413      	add	r3, r2
 80027de:	3304      	adds	r3, #4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0c1b      	lsrs	r3, r3, #16
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	4413      	add	r3, r2
 800280a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0a1a      	lsrs	r2, r3, #8
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0c1a      	lsrs	r2, r3, #16
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	3302      	adds	r3, #2
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e1a      	lsrs	r2, r3, #24
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	3303      	adds	r3, #3
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	4413      	add	r3, r2
 8002858:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	3304      	adds	r3, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	4413      	add	r3, r2
 8002870:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0a1a      	lsrs	r2, r3, #8
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	3305      	adds	r3, #5
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	4413      	add	r3, r2
 800288a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0c1a      	lsrs	r2, r3, #16
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	3306      	adds	r3, #6
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	0e1a      	lsrs	r2, r3, #24
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	3307      	adds	r3, #7
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d108      	bne.n	80028cc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0220 	orr.w	r2, r2, #32
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	e007      	b.n	80028dc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0220 	orr.w	r2, r2, #32
 80028da:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e006      	b.n	80028ee <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
  }
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800290e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d002      	beq.n	800291c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d10f      	bne.n	800293c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	e005      	b.n	800293c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	60d3      	str	r3, [r2, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <__NVIC_GetPriorityGrouping+0x18>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	f003 0307 	and.w	r3, r3, #7
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db0b      	blt.n	80029da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4907      	ldr	r1, [pc, #28]	; (80029e8 <__NVIC_EnableIRQ+0x38>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2001      	movs	r0, #1
 80029d2:	fa00 f202 	lsl.w	r2, r0, r2
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000e100 	.word	0xe000e100

080029ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	db0a      	blt.n	8002a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	490c      	ldr	r1, [pc, #48]	; (8002a38 <__NVIC_SetPriority+0x4c>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a14:	e00a      	b.n	8002a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4908      	ldr	r1, [pc, #32]	; (8002a3c <__NVIC_SetPriority+0x50>)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	3b04      	subs	r3, #4
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	440b      	add	r3, r1
 8002a2a:	761a      	strb	r2, [r3, #24]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000e100 	.word	0xe000e100
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f1c3 0307 	rsb	r3, r3, #7
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	bf28      	it	cs
 8002a5e:	2304      	movcs	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d902      	bls.n	8002a70 <NVIC_EncodePriority+0x30>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3b03      	subs	r3, #3
 8002a6e:	e000      	b.n	8002a72 <NVIC_EncodePriority+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	401a      	ands	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	4313      	orrs	r3, r2
         );
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002aac:	f3bf 8f4f 	dsb	sy
}
 8002ab0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <__NVIC_SystemReset+0x24>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002aba:	4904      	ldr	r1, [pc, #16]	; (8002acc <__NVIC_SystemReset+0x24>)
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <__NVIC_SystemReset+0x28>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac2:	f3bf 8f4f 	dsb	sy
}
 8002ac6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <__NVIC_SystemReset+0x20>
 8002acc:	e000ed00 	.word	0xe000ed00
 8002ad0:	05fa0004 	.word	0x05fa0004

08002ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae4:	d301      	bcc.n	8002aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00f      	b.n	8002b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <SysTick_Config+0x40>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af2:	210f      	movs	r1, #15
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f7ff ff78 	bl	80029ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SysTick_Config+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <SysTick_Config+0x40>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff13 	bl	800294c <__NVIC_SetPriorityGrouping>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b40:	f7ff ff28 	bl	8002994 <__NVIC_GetPriorityGrouping>
 8002b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff78 	bl	8002a40 <NVIC_EncodePriority>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff47 	bl	80029ec <__NVIC_SetPriority>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff1b 	bl	80029b0 <__NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002b86:	f7ff ff8f 	bl	8002aa8 <__NVIC_SystemReset>

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff9e 	bl	8002ad4 <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e037      	b.n	8002c28 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f97e 	bl	8002f0c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}  
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_Start_IT+0x20>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e04a      	b.n	8002ce6 <HAL_DMA_Start_IT+0xb6>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d13a      	bne.n	8002cd8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f912 	bl	8002eb0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 020e 	orr.w	r2, r2, #14
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e00f      	b.n	8002cc6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 020a 	orr.w	r2, r2, #10
 8002cb4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0204 	bic.w	r2, r2, #4
 8002cc4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e005      	b.n	8002ce4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d005      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2204      	movs	r2, #4
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	e027      	b.n	8002d60 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 020e 	bic.w	r2, r2, #14
 8002d1e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
    } 
  }
  return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2204      	movs	r2, #4
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d024      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x72>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01f      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0204 	bic.w	r2, r2, #4
 8002db8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d06a      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002dda:	e065      	b.n	8002ea8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	2202      	movs	r2, #2
 8002de2:	409a      	lsls	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d02c      	beq.n	8002e46 <HAL_DMA_IRQHandler+0xdc>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d027      	beq.n	8002e46 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10b      	bne.n	8002e1c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 020a 	bic.w	r2, r2, #10
 8002e12:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	2102      	movs	r1, #2
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d035      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e44:	e030      	b.n	8002ea8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d028      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x13e>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d023      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d004      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
    }
  }
}  
 8002ea6:	e7ff      	b.n	8002ea8 <HAL_DMA_IRQHandler+0x13e>
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d108      	bne.n	8002ef0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eee:	e007      	b.n	8002f00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <DMA_CalcBaseAndBitshift+0x34>)
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <DMA_CalcBaseAndBitshift+0x38>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	009a      	lsls	r2, r3, #2
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <DMA_CalcBaseAndBitshift+0x3c>)
 8002f30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	bffdfff8 	.word	0xbffdfff8
 8002f44:	cccccccd 	.word	0xcccccccd
 8002f48:	40020000 	.word	0x40020000

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5a:	e14e      	b.n	80031fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8140 	beq.w	80031f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d005      	beq.n	8002f8c <HAL_GPIO_Init+0x40>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d130      	bne.n	8002fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	2203      	movs	r2, #3
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 0201 	and.w	r2, r3, #1
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d017      	beq.n	800302a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	2203      	movs	r2, #3
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d123      	bne.n	800307e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3208      	adds	r2, #8
 800303e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	220f      	movs	r2, #15
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4013      	ands	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	6939      	ldr	r1, [r7, #16]
 800307a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0203 	and.w	r2, r3, #3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 809a 	beq.w	80031f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c0:	4b55      	ldr	r3, [pc, #340]	; (8003218 <HAL_GPIO_Init+0x2cc>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	4a54      	ldr	r2, [pc, #336]	; (8003218 <HAL_GPIO_Init+0x2cc>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6193      	str	r3, [r2, #24]
 80030cc:	4b52      	ldr	r3, [pc, #328]	; (8003218 <HAL_GPIO_Init+0x2cc>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030d8:	4a50      	ldr	r2, [pc, #320]	; (800321c <HAL_GPIO_Init+0x2d0>)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003102:	d013      	beq.n	800312c <HAL_GPIO_Init+0x1e0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a46      	ldr	r2, [pc, #280]	; (8003220 <HAL_GPIO_Init+0x2d4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00d      	beq.n	8003128 <HAL_GPIO_Init+0x1dc>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a45      	ldr	r2, [pc, #276]	; (8003224 <HAL_GPIO_Init+0x2d8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <HAL_GPIO_Init+0x1d8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a44      	ldr	r2, [pc, #272]	; (8003228 <HAL_GPIO_Init+0x2dc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_GPIO_Init+0x1d4>
 800311c:	2303      	movs	r3, #3
 800311e:	e006      	b.n	800312e <HAL_GPIO_Init+0x1e2>
 8003120:	2305      	movs	r3, #5
 8003122:	e004      	b.n	800312e <HAL_GPIO_Init+0x1e2>
 8003124:	2302      	movs	r3, #2
 8003126:	e002      	b.n	800312e <HAL_GPIO_Init+0x1e2>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_GPIO_Init+0x1e2>
 800312c:	2300      	movs	r3, #0
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	f002 0203 	and.w	r2, r2, #3
 8003134:	0092      	lsls	r2, r2, #2
 8003136:	4093      	lsls	r3, r2
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800313e:	4937      	ldr	r1, [pc, #220]	; (800321c <HAL_GPIO_Init+0x2d0>)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800314c:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_GPIO_Init+0x2e0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003170:	4a2e      	ldr	r2, [pc, #184]	; (800322c <HAL_GPIO_Init+0x2e0>)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_GPIO_Init+0x2e0>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800319a:	4a24      	ldr	r2, [pc, #144]	; (800322c <HAL_GPIO_Init+0x2e0>)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_GPIO_Init+0x2e0>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031c4:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_GPIO_Init+0x2e0>)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_GPIO_Init+0x2e0>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031ee:	4a0f      	ldr	r2, [pc, #60]	; (800322c <HAL_GPIO_Init+0x2e0>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	3301      	adds	r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	f47f aea9 	bne.w	8002f5c <HAL_GPIO_Init+0x10>
  }
}
 800320a:	bf00      	nop
 800320c:	bf00      	nop
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40021000 	.word	0x40021000
 800321c:	40010000 	.word	0x40010000
 8003220:	48000400 	.word	0x48000400
 8003224:	48000800 	.word	0x48000800
 8003228:	48000c00 	.word	0x48000c00
 800322c:	40010400 	.word	0x40010400

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800324c:	e002      	b.n	8003254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800324e:	887a      	ldrh	r2, [r7, #2]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003266:	af00      	add	r7, sp, #0
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003270:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f001 b823 	b.w	80042cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 817d 	beq.w	8003596 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800329c:	4bbc      	ldr	r3, [pc, #752]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d00c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032a8:	4bb9      	ldr	r3, [pc, #740]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d15c      	bne.n	800336e <HAL_RCC_OscConfig+0x10e>
 80032b4:	4bb6      	ldr	r3, [pc, #728]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d155      	bne.n	800336e <HAL_RCC_OscConfig+0x10e>
 80032c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032ce:	fa93 f3a3 	rbit	r3, r3
 80032d2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_RCC_OscConfig+0x94>
 80032ee:	4ba8      	ldr	r3, [pc, #672]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e015      	b.n	8003320 <HAL_RCC_OscConfig+0xc0>
 80032f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003310:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800331c:	4b9c      	ldr	r3, [pc, #624]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003324:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003328:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800332c:	fa92 f2a2 	rbit	r2, r2
 8003330:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003334:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003338:	fab2 f282 	clz	r2, r2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f042 0220 	orr.w	r2, r2, #32
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	f002 021f 	and.w	r2, r2, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f202 	lsl.w	r2, r1, r2
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 811f 	beq.w	8003594 <HAL_RCC_OscConfig+0x334>
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 8116 	bne.w	8003594 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f000 bfaf 	b.w	80042cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x12e>
 8003380:	4b83      	ldr	r3, [pc, #524]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a82      	ldr	r2, [pc, #520]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e036      	b.n	80033fc <HAL_RCC_OscConfig+0x19c>
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x158>
 800339e:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7b      	ldr	r2, [pc, #492]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b79      	ldr	r3, [pc, #484]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a78      	ldr	r2, [pc, #480]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e021      	b.n	80033fc <HAL_RCC_OscConfig+0x19c>
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x184>
 80033ca:	4b71      	ldr	r3, [pc, #452]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a70      	ldr	r2, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b6e      	ldr	r3, [pc, #440]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6d      	ldr	r2, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x19c>
 80033e4:	4b6a      	ldr	r3, [pc, #424]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a69      	ldr	r2, [pc, #420]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b67      	ldr	r3, [pc, #412]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a66      	ldr	r2, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033fc:	4b64      	ldr	r3, [pc, #400]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	f023 020f 	bic.w	r2, r3, #15
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	495f      	ldr	r1, [pc, #380]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 8003412:	4313      	orrs	r3, r2
 8003414:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d059      	beq.n	80034da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fdf9 	bl	800201c <HAL_GetTick>
 800342a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	e00a      	b.n	8003446 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fe fdf4 	bl	800201c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b64      	cmp	r3, #100	; 0x64
 800343e:	d902      	bls.n	8003446 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	f000 bf43 	b.w	80042cc <HAL_RCC_OscConfig+0x106c>
 8003446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800344a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800345a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	d102      	bne.n	8003478 <HAL_RCC_OscConfig+0x218>
 8003472:	4b47      	ldr	r3, [pc, #284]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	e015      	b.n	80034a4 <HAL_RCC_OscConfig+0x244>
 8003478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800347c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800348c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003490:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003494:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034a8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034b0:	fa92 f2a2 	rbit	r2, r2
 80034b4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80034b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80034bc:	fab2 f282 	clz	r2, r2
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	f042 0220 	orr.w	r2, r2, #32
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f002 021f 	and.w	r2, r2, #31
 80034cc:	2101      	movs	r1, #1
 80034ce:	fa01 f202 	lsl.w	r2, r1, r2
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ab      	beq.n	8003430 <HAL_RCC_OscConfig+0x1d0>
 80034d8:	e05d      	b.n	8003596 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe fd9f 	bl	800201c <HAL_GetTick>
 80034de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe fd9a 	bl	800201c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b64      	cmp	r3, #100	; 0x64
 80034f2:	d902      	bls.n	80034fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	f000 bee9 	b.w	80042cc <HAL_RCC_OscConfig+0x106c>
 80034fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800350e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <HAL_RCC_OscConfig+0x2cc>
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	e015      	b.n	8003558 <HAL_RCC_OscConfig+0x2f8>
 800352c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003530:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003540:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003544:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003548:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_RCC_OscConfig+0x330>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800355c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003560:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003564:	fa92 f2a2 	rbit	r2, r2
 8003568:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800356c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003570:	fab2 f282 	clz	r2, r2
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	f042 0220 	orr.w	r2, r2, #32
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	f002 021f 	and.w	r2, r2, #31
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f202 	lsl.w	r2, r1, r2
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ab      	bne.n	80034e4 <HAL_RCC_OscConfig+0x284>
 800358c:	e003      	b.n	8003596 <HAL_RCC_OscConfig+0x336>
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 817d 	beq.w	80038a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035ac:	4ba6      	ldr	r3, [pc, #664]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00b      	beq.n	80035d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035b8:	4ba3      	ldr	r3, [pc, #652]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 030c 	and.w	r3, r3, #12
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d172      	bne.n	80036aa <HAL_RCC_OscConfig+0x44a>
 80035c4:	4ba0      	ldr	r3, [pc, #640]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d16c      	bne.n	80036aa <HAL_RCC_OscConfig+0x44a>
 80035d0:	2302      	movs	r3, #2
 80035d2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035da:	fa93 f3a3 	rbit	r3, r3
 80035de:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d102      	bne.n	8003600 <HAL_RCC_OscConfig+0x3a0>
 80035fa:	4b93      	ldr	r3, [pc, #588]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	e013      	b.n	8003628 <HAL_RCC_OscConfig+0x3c8>
 8003600:	2302      	movs	r3, #2
 8003602:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003612:	2302      	movs	r3, #2
 8003614:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003618:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003624:	4b88      	ldr	r3, [pc, #544]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2202      	movs	r2, #2
 800362a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800362e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003632:	fa92 f2a2 	rbit	r2, r2
 8003636:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800363a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800363e:	fab2 f282 	clz	r2, r2
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f042 0220 	orr.w	r2, r2, #32
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	f002 021f 	and.w	r2, r2, #31
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCC_OscConfig+0x410>
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d002      	beq.n	8003670 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	f000 be2e 	b.w	80042cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003670:	4b75      	ldr	r3, [pc, #468]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	21f8      	movs	r1, #248	; 0xf8
 8003686:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800368e:	fa91 f1a1 	rbit	r1, r1
 8003692:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003696:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800369a:	fab1 f181 	clz	r1, r1
 800369e:	b2c9      	uxtb	r1, r1
 80036a0:	408b      	lsls	r3, r1
 80036a2:	4969      	ldr	r1, [pc, #420]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a8:	e0fd      	b.n	80038a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8088 	beq.w	80037cc <HAL_RCC_OscConfig+0x56c>
 80036bc:	2301      	movs	r3, #1
 80036be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80036ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	461a      	mov	r2, r3
 80036e4:	2301      	movs	r3, #1
 80036e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e8:	f7fe fc98 	bl	800201c <HAL_GetTick>
 80036ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fe fc93 	bl	800201c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d902      	bls.n	8003708 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	f000 bde2 	b.w	80042cc <HAL_RCC_OscConfig+0x106c>
 8003708:	2302      	movs	r3, #2
 800370a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800371a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d102      	bne.n	8003738 <HAL_RCC_OscConfig+0x4d8>
 8003732:	4b45      	ldr	r3, [pc, #276]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	e013      	b.n	8003760 <HAL_RCC_OscConfig+0x500>
 8003738:	2302      	movs	r3, #2
 800373a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800374a:	2302      	movs	r3, #2
 800374c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003750:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800375c:	4b3a      	ldr	r3, [pc, #232]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2202      	movs	r2, #2
 8003762:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003766:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800376a:	fa92 f2a2 	rbit	r2, r2
 800376e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003772:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003776:	fab2 f282 	clz	r2, r2
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	f002 021f 	and.w	r2, r2, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0af      	beq.n	80036f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	21f8      	movs	r1, #248	; 0xf8
 80037a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037b0:	fa91 f1a1 	rbit	r1, r1
 80037b4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80037b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037bc:	fab1 f181 	clz	r1, r1
 80037c0:	b2c9      	uxtb	r1, r1
 80037c2:	408b      	lsls	r3, r1
 80037c4:	4920      	ldr	r1, [pc, #128]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
 80037ca:	e06c      	b.n	80038a6 <HAL_RCC_OscConfig+0x646>
 80037cc:	2301      	movs	r3, #1
 80037ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	461a      	mov	r2, r3
 80037f4:	2300      	movs	r3, #0
 80037f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe fc10 	bl	800201c <HAL_GetTick>
 80037fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003802:	f7fe fc0b 	bl	800201c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d902      	bls.n	8003818 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	f000 bd5a 	b.w	80042cc <HAL_RCC_OscConfig+0x106c>
 8003818:	2302      	movs	r3, #2
 800381a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800382a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d104      	bne.n	800384c <HAL_RCC_OscConfig+0x5ec>
 8003842:	4b01      	ldr	r3, [pc, #4]	; (8003848 <HAL_RCC_OscConfig+0x5e8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	e015      	b.n	8003874 <HAL_RCC_OscConfig+0x614>
 8003848:	40021000 	.word	0x40021000
 800384c:	2302      	movs	r3, #2
 800384e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003856:	fa93 f3a3 	rbit	r3, r3
 800385a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800385e:	2302      	movs	r3, #2
 8003860:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003864:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003870:	4bc8      	ldr	r3, [pc, #800]	; (8003b94 <HAL_RCC_OscConfig+0x934>)
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	2202      	movs	r2, #2
 8003876:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800387a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800387e:	fa92 f2a2 	rbit	r2, r2
 8003882:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003886:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800388a:	fab2 f282 	clz	r2, r2
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	f042 0220 	orr.w	r2, r2, #32
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	f002 021f 	and.w	r2, r2, #31
 800389a:	2101      	movs	r1, #1
 800389c:	fa01 f202 	lsl.w	r2, r1, r2
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1ad      	bne.n	8003802 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8110 	beq.w	8003adc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d079      	beq.n	80039c0 <HAL_RCC_OscConfig+0x760>
 80038cc:	2301      	movs	r3, #1
 80038ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	4bab      	ldr	r3, [pc, #684]	; (8003b98 <HAL_RCC_OscConfig+0x938>)
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	461a      	mov	r2, r3
 80038f2:	2301      	movs	r3, #1
 80038f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f6:	f7fe fb91 	bl	800201c <HAL_GetTick>
 80038fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003900:	f7fe fb8c 	bl	800201c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d902      	bls.n	8003916 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f000 bcdb 	b.w	80042cc <HAL_RCC_OscConfig+0x106c>
 8003916:	2302      	movs	r3, #2
 8003918:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003930:	2202      	movs	r2, #2
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003938:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fa93 f2a3 	rbit	r2, r3
 8003942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003954:	2202      	movs	r2, #2
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	fa93 f2a3 	rbit	r2, r3
 8003966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800396e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003970:	4b88      	ldr	r3, [pc, #544]	; (8003b94 <HAL_RCC_OscConfig+0x934>)
 8003972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800397c:	2102      	movs	r1, #2
 800397e:	6019      	str	r1, [r3, #0]
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	fa93 f1a3 	rbit	r1, r3
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003996:	6019      	str	r1, [r3, #0]
  return result;
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 031f 	and.w	r3, r3, #31
 80039b2:	2101      	movs	r1, #1
 80039b4:	fa01 f303 	lsl.w	r3, r1, r3
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0a0      	beq.n	8003900 <HAL_RCC_OscConfig+0x6a0>
 80039be:	e08d      	b.n	8003adc <HAL_RCC_OscConfig+0x87c>
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039e2:	601a      	str	r2, [r3, #0]
  return result;
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <HAL_RCC_OscConfig+0x938>)
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	461a      	mov	r2, r3
 80039fe:	2300      	movs	r3, #0
 8003a00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a02:	f7fe fb0b 	bl	800201c <HAL_GetTick>
 8003a06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fe fb06 	bl	800201c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d902      	bls.n	8003a22 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	f000 bc55 	b.w	80042cc <HAL_RCC_OscConfig+0x106c>
 8003a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fa93 f2a3 	rbit	r2, r3
 8003a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a4e:	2202      	movs	r2, #2
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	fa93 f2a3 	rbit	r2, r3
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a72:	2202      	movs	r2, #2
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	fa93 f2a3 	rbit	r2, r3
 8003a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8e:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_OscConfig+0x934>)
 8003a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	6019      	str	r1, [r3, #0]
 8003a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	fa93 f1a3 	rbit	r1, r3
 8003aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ab4:	6019      	str	r1, [r3, #0]
  return result;
 8003ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	fab3 f383 	clz	r3, r3
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d197      	bne.n	8003a0c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 81a1 	beq.w	8003e34 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af8:	4b26      	ldr	r3, [pc, #152]	; (8003b94 <HAL_RCC_OscConfig+0x934>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d116      	bne.n	8003b32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b04:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <HAL_RCC_OscConfig+0x934>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <HAL_RCC_OscConfig+0x934>)
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	61d3      	str	r3, [r2, #28]
 8003b10:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <HAL_RCC_OscConfig+0x934>)
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b26:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b32:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <HAL_RCC_OscConfig+0x93c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11a      	bne.n	8003b74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b3e:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <HAL_RCC_OscConfig+0x93c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_RCC_OscConfig+0x93c>)
 8003b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fa67 	bl	800201c <HAL_GetTick>
 8003b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	e009      	b.n	8003b68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b54:	f7fe fa62 	bl	800201c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b64      	cmp	r3, #100	; 0x64
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e3b1      	b.n	80042cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_RCC_OscConfig+0x93c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10d      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x940>
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_RCC_OscConfig+0x934>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4a02      	ldr	r2, [pc, #8]	; (8003b94 <HAL_RCC_OscConfig+0x934>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6213      	str	r3, [r2, #32]
 8003b90:	e03c      	b.n	8003c0c <HAL_RCC_OscConfig+0x9ac>
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	10908120 	.word	0x10908120
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10c      	bne.n	8003bca <HAL_RCC_OscConfig+0x96a>
 8003bb0:	4bc1      	ldr	r3, [pc, #772]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4ac0      	ldr	r2, [pc, #768]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6213      	str	r3, [r2, #32]
 8003bbc:	4bbe      	ldr	r3, [pc, #760]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4abd      	ldr	r2, [pc, #756]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	e020      	b.n	8003c0c <HAL_RCC_OscConfig+0x9ac>
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x994>
 8003bda:	4bb7      	ldr	r3, [pc, #732]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	4ab6      	ldr	r2, [pc, #728]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003be0:	f043 0304 	orr.w	r3, r3, #4
 8003be4:	6213      	str	r3, [r2, #32]
 8003be6:	4bb4      	ldr	r3, [pc, #720]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	4ab3      	ldr	r2, [pc, #716]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6213      	str	r3, [r2, #32]
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0x9ac>
 8003bf4:	4bb0      	ldr	r3, [pc, #704]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	4aaf      	ldr	r2, [pc, #700]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	6213      	str	r3, [r2, #32]
 8003c00:	4bad      	ldr	r3, [pc, #692]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4aac      	ldr	r2, [pc, #688]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003c06:	f023 0304 	bic.w	r3, r3, #4
 8003c0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8081 	beq.w	8003d20 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe f9fd 	bl	800201c <HAL_GetTick>
 8003c22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fe f9f8 	bl	800201c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e345      	b.n	80042cc <HAL_RCC_OscConfig+0x106c>
 8003c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c48:	2202      	movs	r2, #2
 8003c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c50:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	fa93 f2a3 	rbit	r2, r3
 8003c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	fa93 f2a3 	rbit	r2, r3
 8003c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c82:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c86:	601a      	str	r2, [r3, #0]
  return result;
 8003c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c90:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d102      	bne.n	8003cac <HAL_RCC_OscConfig+0xa4c>
 8003ca6:	4b84      	ldr	r3, [pc, #528]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	e013      	b.n	8003cd4 <HAL_RCC_OscConfig+0xa74>
 8003cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	fa93 f2a3 	rbit	r2, r3
 8003cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	4b79      	ldr	r3, [pc, #484]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cd8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003cdc:	2102      	movs	r1, #2
 8003cde:	6011      	str	r1, [r2, #0]
 8003ce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ce4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	fa92 f1a2 	rbit	r1, r2
 8003cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cf2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003cf6:	6011      	str	r1, [r2, #0]
  return result;
 8003cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cfc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	fab2 f282 	clz	r2, r2
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	f002 021f 	and.w	r2, r2, #31
 8003d12:	2101      	movs	r1, #1
 8003d14:	fa01 f202 	lsl.w	r2, r1, r2
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d084      	beq.n	8003c28 <HAL_RCC_OscConfig+0x9c8>
 8003d1e:	e07f      	b.n	8003e20 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d20:	f7fe f97c 	bl	800201c <HAL_GetTick>
 8003d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d28:	e00b      	b.n	8003d42 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fe f977 	bl	800201c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e2c4      	b.n	80042cc <HAL_RCC_OscConfig+0x106c>
 8003d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d46:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	fa93 f2a3 	rbit	r2, r3
 8003d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d60:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d6e:	2202      	movs	r2, #2
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d76:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	fa93 f2a3 	rbit	r2, r3
 8003d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d84:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d88:	601a      	str	r2, [r3, #0]
  return result;
 8003d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f043 0302 	orr.w	r3, r3, #2
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d102      	bne.n	8003dae <HAL_RCC_OscConfig+0xb4e>
 8003da8:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	e013      	b.n	8003dd6 <HAL_RCC_OscConfig+0xb76>
 8003dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003db6:	2202      	movs	r2, #2
 8003db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	fa93 f2a3 	rbit	r2, r3
 8003dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dcc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dda:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003dde:	2102      	movs	r1, #2
 8003de0:	6011      	str	r1, [r2, #0]
 8003de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003de6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	fa92 f1a2 	rbit	r1, r2
 8003df0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003df4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003df8:	6011      	str	r1, [r2, #0]
  return result;
 8003dfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dfe:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	fab2 f282 	clz	r2, r2
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	f002 021f 	and.w	r2, r2, #31
 8003e14:	2101      	movs	r1, #1
 8003e16:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d184      	bne.n	8003d2a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e28:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8242 	beq.w	80042ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e46:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <HAL_RCC_OscConfig+0xc58>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	f000 8213 	beq.w	800427a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	f040 8162 	bne.w	800412a <HAL_RCC_OscConfig+0xeca>
 8003e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e78:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	fa93 f2a3 	rbit	r2, r3
 8003e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e86:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e8a:	601a      	str	r2, [r3, #0]
  return result;
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	fab3 f383 	clz	r3, r3
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ea0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fe f8b6 	bl	800201c <HAL_GetTick>
 8003eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb4:	e00c      	b.n	8003ed0 <HAL_RCC_OscConfig+0xc70>
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fe f8ae 	bl	800201c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e1fd      	b.n	80042cc <HAL_RCC_OscConfig+0x106c>
 8003ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	fa93 f2a3 	rbit	r2, r3
 8003eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ef4:	601a      	str	r2, [r3, #0]
  return result;
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003efe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d102      	bne.n	8003f1a <HAL_RCC_OscConfig+0xcba>
 8003f14:	4bb0      	ldr	r3, [pc, #704]	; (80041d8 <HAL_RCC_OscConfig+0xf78>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	e027      	b.n	8003f6a <HAL_RCC_OscConfig+0xd0a>
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	fa93 f2a3 	rbit	r2, r3
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f44:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	fa93 f2a3 	rbit	r2, r3
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	4b9c      	ldr	r3, [pc, #624]	; (80041d8 <HAL_RCC_OscConfig+0xf78>)
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f6e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f76:	6011      	str	r1, [r2, #0]
 8003f78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f7c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	fa92 f1a2 	rbit	r1, r2
 8003f86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f8e:	6011      	str	r1, [r2, #0]
  return result;
 8003f90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	fab2 f282 	clz	r2, r2
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	f042 0220 	orr.w	r2, r2, #32
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	f002 021f 	and.w	r2, r2, #31
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d182      	bne.n	8003ebc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb6:	4b88      	ldr	r3, [pc, #544]	; (80041d8 <HAL_RCC_OscConfig+0xf78>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	497f      	ldr	r1, [pc, #508]	; (80041d8 <HAL_RCC_OscConfig+0xf78>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003fe6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	fa93 f2a3 	rbit	r2, r3
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004002:	601a      	str	r2, [r3, #0]
  return result;
 8004004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004008:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800400c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004018:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	461a      	mov	r2, r3
 8004020:	2301      	movs	r3, #1
 8004022:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fd fffa 	bl	800201c <HAL_GetTick>
 8004028:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800402c:	e009      	b.n	8004042 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402e:	f7fd fff5 	bl	800201c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e144      	b.n	80042cc <HAL_RCC_OscConfig+0x106c>
 8004042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004046:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800404a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800404e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004054:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	fa93 f2a3 	rbit	r2, r3
 800405e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004062:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004066:	601a      	str	r2, [r3, #0]
  return result;
 8004068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004070:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d102      	bne.n	800408c <HAL_RCC_OscConfig+0xe2c>
 8004086:	4b54      	ldr	r3, [pc, #336]	; (80041d8 <HAL_RCC_OscConfig+0xf78>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	e027      	b.n	80040dc <HAL_RCC_OscConfig+0xe7c>
 800408c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004090:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	fa93 f2a3 	rbit	r2, r3
 80040a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	fa93 f2a3 	rbit	r2, r3
 80040ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <HAL_RCC_OscConfig+0xf78>)
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040e8:	6011      	str	r1, [r2, #0]
 80040ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ee:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	fa92 f1a2 	rbit	r1, r2
 80040f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040fc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004100:	6011      	str	r1, [r2, #0]
  return result;
 8004102:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004106:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	fab2 f282 	clz	r2, r2
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	f042 0220 	orr.w	r2, r2, #32
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	f002 021f 	and.w	r2, r2, #31
 800411c:	2101      	movs	r1, #1
 800411e:	fa01 f202 	lsl.w	r2, r1, r2
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d082      	beq.n	800402e <HAL_RCC_OscConfig+0xdce>
 8004128:	e0cf      	b.n	80042ca <HAL_RCC_OscConfig+0x106a>
 800412a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004132:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800413c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	fa93 f2a3 	rbit	r2, r3
 8004146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800414e:	601a      	str	r2, [r3, #0]
  return result;
 8004150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004154:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004158:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004164:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	461a      	mov	r2, r3
 800416c:	2300      	movs	r3, #0
 800416e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fd ff54 	bl	800201c <HAL_GetTick>
 8004174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004178:	e009      	b.n	800418e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417a:	f7fd ff4f 	bl	800201c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e09e      	b.n	80042cc <HAL_RCC_OscConfig+0x106c>
 800418e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004192:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800419a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	fa93 f2a3 	rbit	r2, r3
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041b2:	601a      	str	r2, [r3, #0]
  return result;
 80041b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d104      	bne.n	80041dc <HAL_RCC_OscConfig+0xf7c>
 80041d2:	4b01      	ldr	r3, [pc, #4]	; (80041d8 <HAL_RCC_OscConfig+0xf78>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	e029      	b.n	800422c <HAL_RCC_OscConfig+0xfcc>
 80041d8:	40021000 	.word	0x40021000
 80041dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	fa93 f2a3 	rbit	r2, r3
 80041f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800420a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004214:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	fa93 f2a3 	rbit	r2, r3
 800421e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004222:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCC_OscConfig+0x1078>)
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004230:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004234:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800423e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	fa92 f1a2 	rbit	r1, r2
 8004248:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800424c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004250:	6011      	str	r1, [r2, #0]
  return result;
 8004252:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004256:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	fab2 f282 	clz	r2, r2
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	f042 0220 	orr.w	r2, r2, #32
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	f002 021f 	and.w	r2, r2, #31
 800426c:	2101      	movs	r1, #1
 800426e:	fa01 f202 	lsl.w	r2, r1, r2
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d180      	bne.n	800417a <HAL_RCC_OscConfig+0xf1a>
 8004278:	e027      	b.n	80042ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800427a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800427e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e01e      	b.n	80042cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_RCC_OscConfig+0x1078>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004296:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800429a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d10b      	bne.n	80042c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d001      	beq.n	80042ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000

080042dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b09e      	sub	sp, #120	; 0x78
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e162      	b.n	80045ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f4:	4b90      	ldr	r3, [pc, #576]	; (8004538 <HAL_RCC_ClockConfig+0x25c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d910      	bls.n	8004324 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b8d      	ldr	r3, [pc, #564]	; (8004538 <HAL_RCC_ClockConfig+0x25c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 0207 	bic.w	r2, r3, #7
 800430a:	498b      	ldr	r1, [pc, #556]	; (8004538 <HAL_RCC_ClockConfig+0x25c>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b89      	ldr	r3, [pc, #548]	; (8004538 <HAL_RCC_ClockConfig+0x25c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e14a      	b.n	80045ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b82      	ldr	r3, [pc, #520]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	497f      	ldr	r1, [pc, #508]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80dc 	beq.w	8004508 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d13c      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xf6>
 8004358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800435c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d102      	bne.n	8004382 <HAL_RCC_ClockConfig+0xa6>
 800437c:	4b6f      	ldr	r3, [pc, #444]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	e00f      	b.n	80043a2 <HAL_RCC_ClockConfig+0xc6>
 8004382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004386:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800438a:	fa93 f3a3 	rbit	r3, r3
 800438e:	667b      	str	r3, [r7, #100]	; 0x64
 8004390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004394:	663b      	str	r3, [r7, #96]	; 0x60
 8004396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800439e:	4b67      	ldr	r3, [pc, #412]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043a6:	65ba      	str	r2, [r7, #88]	; 0x58
 80043a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043aa:	fa92 f2a2 	rbit	r2, r2
 80043ae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80043b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043b2:	fab2 f282 	clz	r2, r2
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	f042 0220 	orr.w	r2, r2, #32
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	f002 021f 	and.w	r2, r2, #31
 80043c2:	2101      	movs	r1, #1
 80043c4:	fa01 f202 	lsl.w	r2, r1, r2
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d17b      	bne.n	80044c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e0f3      	b.n	80045ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d13c      	bne.n	8004454 <HAL_RCC_ClockConfig+0x178>
 80043da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d102      	bne.n	8004404 <HAL_RCC_ClockConfig+0x128>
 80043fe:	4b4f      	ldr	r3, [pc, #316]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	e00f      	b.n	8004424 <HAL_RCC_ClockConfig+0x148>
 8004404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004408:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440c:	fa93 f3a3 	rbit	r3, r3
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
 8004412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004416:	643b      	str	r3, [r7, #64]	; 0x40
 8004418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004420:	4b46      	ldr	r3, [pc, #280]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004428:	63ba      	str	r2, [r7, #56]	; 0x38
 800442a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800442c:	fa92 f2a2 	rbit	r2, r2
 8004430:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004434:	fab2 f282 	clz	r2, r2
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	f042 0220 	orr.w	r2, r2, #32
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	f002 021f 	and.w	r2, r2, #31
 8004444:	2101      	movs	r1, #1
 8004446:	fa01 f202 	lsl.w	r2, r1, r2
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d13a      	bne.n	80044c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0b2      	b.n	80045ba <HAL_RCC_ClockConfig+0x2de>
 8004454:	2302      	movs	r3, #2
 8004456:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d102      	bne.n	800447c <HAL_RCC_ClockConfig+0x1a0>
 8004476:	4b31      	ldr	r3, [pc, #196]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	e00d      	b.n	8004498 <HAL_RCC_ClockConfig+0x1bc>
 800447c:	2302      	movs	r3, #2
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
 8004488:	2302      	movs	r3, #2
 800448a:	623b      	str	r3, [r7, #32]
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	fa93 f3a3 	rbit	r3, r3
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	4b29      	ldr	r3, [pc, #164]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2202      	movs	r2, #2
 800449a:	61ba      	str	r2, [r7, #24]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	fa92 f2a2 	rbit	r2, r2
 80044a2:	617a      	str	r2, [r7, #20]
  return result;
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	fab2 f282 	clz	r2, r2
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	f042 0220 	orr.w	r2, r2, #32
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	f002 021f 	and.w	r2, r2, #31
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f202 	lsl.w	r2, r1, r2
 80044bc:	4013      	ands	r3, r2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e079      	b.n	80045ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f023 0203 	bic.w	r2, r3, #3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	491a      	ldr	r1, [pc, #104]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d8:	f7fd fda0 	bl	800201c <HAL_GetTick>
 80044dc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e0:	f7fd fd9c 	bl	800201c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e061      	b.n	80045ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 020c 	and.w	r2, r3, #12
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	429a      	cmp	r2, r3
 8004506:	d1eb      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_ClockConfig+0x25c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d214      	bcs.n	8004540 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_RCC_ClockConfig+0x25c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 0207 	bic.w	r2, r3, #7
 800451e:	4906      	ldr	r1, [pc, #24]	; (8004538 <HAL_RCC_ClockConfig+0x25c>)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b04      	ldr	r3, [pc, #16]	; (8004538 <HAL_RCC_ClockConfig+0x25c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d005      	beq.n	8004540 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e040      	b.n	80045ba <HAL_RCC_ClockConfig+0x2de>
 8004538:	40022000 	.word	0x40022000
 800453c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800454c:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <HAL_RCC_ClockConfig+0x2e8>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	491a      	ldr	r1, [pc, #104]	; (80045c4 <HAL_RCC_ClockConfig+0x2e8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456a:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <HAL_RCC_ClockConfig+0x2e8>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4912      	ldr	r1, [pc, #72]	; (80045c4 <HAL_RCC_ClockConfig+0x2e8>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800457e:	f000 f829 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8004582:	4601      	mov	r1, r0
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <HAL_RCC_ClockConfig+0x2e8>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458c:	22f0      	movs	r2, #240	; 0xf0
 800458e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	fa92 f2a2 	rbit	r2, r2
 8004596:	60fa      	str	r2, [r7, #12]
  return result;
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	fab2 f282 	clz	r2, r2
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	40d3      	lsrs	r3, r2
 80045a2:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <HAL_RCC_ClockConfig+0x2ec>)
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
 80045a6:	fa21 f303 	lsr.w	r3, r1, r3
 80045aa:	4a08      	ldr	r2, [pc, #32]	; (80045cc <HAL_RCC_ClockConfig+0x2f0>)
 80045ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <HAL_RCC_ClockConfig+0x2f4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fd fcee 	bl	8001f94 <HAL_InitTick>
  
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3778      	adds	r7, #120	; 0x78
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	08006da8 	.word	0x08006da8
 80045cc:	20000010 	.word	0x20000010
 80045d0:	20000014 	.word	0x20000014

080045d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b08b      	sub	sp, #44	; 0x2c
 80045d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	2300      	movs	r3, #0
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045ee:	4b29      	ldr	r3, [pc, #164]	; (8004694 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d002      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x30>
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d003      	beq.n	800460a <HAL_RCC_GetSysClockFreq+0x36>
 8004602:	e03c      	b.n	800467e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004604:	4b24      	ldr	r3, [pc, #144]	; (8004698 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004606:	623b      	str	r3, [r7, #32]
      break;
 8004608:	e03c      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004610:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004614:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	fa92 f2a2 	rbit	r2, r2
 800461c:	607a      	str	r2, [r7, #4]
  return result;
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	fab2 f282 	clz	r2, r2
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	40d3      	lsrs	r3, r2
 8004628:	4a1c      	ldr	r2, [pc, #112]	; (800469c <HAL_RCC_GetSysClockFreq+0xc8>)
 800462a:	5cd3      	ldrb	r3, [r2, r3]
 800462c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800462e:	4b19      	ldr	r3, [pc, #100]	; (8004694 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	220f      	movs	r2, #15
 8004638:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	fa92 f2a2 	rbit	r2, r2
 8004640:	60fa      	str	r2, [r7, #12]
  return result;
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	fab2 f282 	clz	r2, r2
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	40d3      	lsrs	r3, r2
 800464c:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800464e:	5cd3      	ldrb	r3, [r2, r3]
 8004650:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800465c:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <HAL_RCC_GetSysClockFreq+0xc4>)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	fbb2 f2f3 	udiv	r2, r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
 800466c:	e004      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	4a0c      	ldr	r2, [pc, #48]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004672:	fb02 f303 	mul.w	r3, r2, r3
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	623b      	str	r3, [r7, #32]
      break;
 800467c:	e002      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004680:	623b      	str	r3, [r7, #32]
      break;
 8004682:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004684:	6a3b      	ldr	r3, [r7, #32]
}
 8004686:	4618      	mov	r0, r3
 8004688:	372c      	adds	r7, #44	; 0x2c
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	00f42400 	.word	0x00f42400
 800469c:	08006dc0 	.word	0x08006dc0
 80046a0:	08006dd0 	.word	0x08006dd0
 80046a4:	003d0900 	.word	0x003d0900
 80046a8:	007a1200 	.word	0x007a1200

080046ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000010 	.word	0x20000010

080046c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80046ca:	f7ff ffef 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 80046ce:	4601      	mov	r1, r0
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80046dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	fa92 f2a2 	rbit	r2, r2
 80046e4:	603a      	str	r2, [r7, #0]
  return result;
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	fab2 f282 	clz	r2, r2
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	40d3      	lsrs	r3, r2
 80046f0:	4a04      	ldr	r2, [pc, #16]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046f2:	5cd3      	ldrb	r3, [r2, r3]
 80046f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40021000 	.word	0x40021000
 8004704:	08006db8 	.word	0x08006db8

08004708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800470e:	f7ff ffcd 	bl	80046ac <HAL_RCC_GetHCLKFreq>
 8004712:	4601      	mov	r1, r0
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800471c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004720:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	fa92 f2a2 	rbit	r2, r2
 8004728:	603a      	str	r2, [r7, #0]
  return result;
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	fab2 f282 	clz	r2, r2
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	40d3      	lsrs	r3, r2
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004736:	5cd3      	ldrb	r3, [r2, r3]
 8004738:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40021000 	.word	0x40021000
 8004748:	08006db8 	.word	0x08006db8

0800474c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b092      	sub	sp, #72	; 0x48
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800475c:	2300      	movs	r3, #0
 800475e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80cd 	beq.w	800490a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004770:	4b86      	ldr	r3, [pc, #536]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10e      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477c:	4b83      	ldr	r3, [pc, #524]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	4a82      	ldr	r2, [pc, #520]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004786:	61d3      	str	r3, [r2, #28]
 8004788:	4b80      	ldr	r3, [pc, #512]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479a:	4b7d      	ldr	r3, [pc, #500]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d118      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a6:	4b7a      	ldr	r3, [pc, #488]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a79      	ldr	r2, [pc, #484]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b2:	f7fd fc33 	bl	800201c <HAL_GetTick>
 80047b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	e008      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7fd fc2f 	bl	800201c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b64      	cmp	r3, #100	; 0x64
 80047c6:	d901      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e0db      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	4b70      	ldr	r3, [pc, #448]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047d8:	4b6c      	ldr	r3, [pc, #432]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d07d      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d076      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047f6:	4b65      	ldr	r3, [pc, #404]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004804:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004810:	fab3 f383 	clz	r3, r3
 8004814:	b2db      	uxtb	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	4b5e      	ldr	r3, [pc, #376]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	461a      	mov	r2, r3
 8004820:	2301      	movs	r3, #1
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004828:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	fa93 f3a3 	rbit	r3, r3
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004834:	fab3 f383 	clz	r3, r3
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	4b55      	ldr	r3, [pc, #340]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	461a      	mov	r2, r3
 8004844:	2300      	movs	r3, #0
 8004846:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004848:	4a50      	ldr	r2, [pc, #320]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800484a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d045      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fd fbe0 	bl	800201c <HAL_GetTick>
 800485c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	e00a      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004860:	f7fd fbdc 	bl	800201c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e086      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004876:	2302      	movs	r3, #2
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
 8004882:	2302      	movs	r3, #2
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	61fb      	str	r3, [r7, #28]
  return result;
 800488e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f043 0302 	orr.w	r3, r3, #2
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d102      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048a4:	4b39      	ldr	r3, [pc, #228]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	e007      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	fa93 f3a3 	rbit	r3, r3
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	4b35      	ldr	r3, [pc, #212]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2202      	movs	r2, #2
 80048bc:	613a      	str	r2, [r7, #16]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	fa92 f2a2 	rbit	r2, r2
 80048c4:	60fa      	str	r2, [r7, #12]
  return result;
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	fab2 f282 	clz	r2, r2
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	f002 021f 	and.w	r2, r2, #31
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f202 	lsl.w	r2, r1, r2
 80048de:	4013      	ands	r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0bd      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048e4:	4b29      	ldr	r3, [pc, #164]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4926      	ldr	r1, [pc, #152]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d105      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	4a22      	ldr	r2, [pc, #136]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004908:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004916:	4b1d      	ldr	r3, [pc, #116]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	491a      	ldr	r1, [pc, #104]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004924:	4313      	orrs	r3, r2
 8004926:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004934:	4b15      	ldr	r3, [pc, #84]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	f023 0210 	bic.w	r2, r3, #16
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	4912      	ldr	r1, [pc, #72]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004942:	4313      	orrs	r3, r2
 8004944:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004952:	4b0e      	ldr	r3, [pc, #56]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	490b      	ldr	r1, [pc, #44]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004960:	4313      	orrs	r3, r2
 8004962:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	4903      	ldr	r1, [pc, #12]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800497e:	4313      	orrs	r3, r2
 8004980:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3748      	adds	r7, #72	; 0x48
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40021000 	.word	0x40021000
 8004990:	40007000 	.word	0x40007000
 8004994:	10908100 	.word	0x10908100

08004998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e095      	b.n	8004ad6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d108      	bne.n	80049c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ba:	d009      	beq.n	80049d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
 80049c2:	e005      	b.n	80049d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd f836 	bl	8001a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a10:	d902      	bls.n	8004a18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	e002      	b.n	8004a1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a26:	d007      	beq.n	8004a38 <HAL_SPI_Init+0xa0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a30:	d002      	beq.n	8004a38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	ea42 0103 	orr.w	r1, r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	f003 0204 	and.w	r2, r3, #4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ab4:	ea42 0103 	orr.w	r1, r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	4613      	mov	r3, r2
 8004aec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_SPI_Transmit_DMA+0x20>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0d8      	b.n	8004cb2 <HAL_SPI_Transmit_DMA+0x1d2>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d002      	beq.n	8004b1a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
 8004b16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b18:	e0c6      	b.n	8004ca8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_SPI_Transmit_DMA+0x46>
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b2a:	e0bd      	b.n	8004ca8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2203      	movs	r2, #3
 8004b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b76:	d10f      	bne.n	8004b98 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	4a47      	ldr	r2, [pc, #284]	; (8004cbc <HAL_SPI_Transmit_DMA+0x1dc>)
 8004b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	4a46      	ldr	r2, [pc, #280]	; (8004cc0 <HAL_SPI_Transmit_DMA+0x1e0>)
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	4a45      	ldr	r2, [pc, #276]	; (8004cc4 <HAL_SPI_Transmit_DMA+0x1e4>)
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bc6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bd0:	d82d      	bhi.n	8004c2e <HAL_SPI_Transmit_DMA+0x14e>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bdc:	d127      	bne.n	8004c2e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10f      	bne.n	8004c0c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bfa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c0a:	e010      	b.n	8004c2e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c1a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3301      	adds	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	4619      	mov	r1, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c44:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c46:	f7fd fff3 	bl	8002c30 <HAL_DMA_Start_IT>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00c      	beq.n	8004c6a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c54:	f043 0210 	orr.w	r2, r3, #16
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004c68:	e01e      	b.n	8004ca8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d007      	beq.n	8004c88 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c86:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0220 	orr.w	r2, r2, #32
 8004c96:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0202 	orr.w	r2, r2, #2
 8004ca6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	08004dab 	.word	0x08004dab
 8004cc0:	08004d05 	.word	0x08004d05
 8004cc4:	08004dc7 	.word	0x08004dc7

08004cc8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d12:	f7fd f983 	bl	800201c <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d03b      	beq.n	8004d9e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0220 	bic.w	r2, r2, #32
 8004d34:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0202 	bic.w	r2, r2, #2
 8004d44:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	2164      	movs	r1, #100	; 0x64
 8004d4a:	6978      	ldr	r0, [r7, #20]
 8004d4c:	f000 f97a 	bl	8005044 <SPI_EndRxTxTransaction>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2200      	movs	r2, #0
 8004d84:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d96:	6978      	ldr	r0, [r7, #20]
 8004d98:	f7ff ffaa 	bl	8004cf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d9c:	e002      	b.n	8004da4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004d9e:	6978      	ldr	r0, [r7, #20]
 8004da0:	f7ff ff92 	bl	8004cc8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7ff ff8f 	bl	8004cdc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0203 	bic.w	r2, r2, #3
 8004de2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de8:	f043 0210 	orr.w	r2, r3, #16
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff ff79 	bl	8004cf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	603b      	str	r3, [r7, #0]
 8004e14:	4613      	mov	r3, r2
 8004e16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e18:	f7fd f900 	bl	800201c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	4413      	add	r3, r2
 8004e26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e28:	f7fd f8f8 	bl	800201c <HAL_GetTick>
 8004e2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e2e:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	015b      	lsls	r3, r3, #5
 8004e34:	0d1b      	lsrs	r3, r3, #20
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	fb02 f303 	mul.w	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e3e:	e054      	b.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d050      	beq.n	8004eea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e48:	f7fd f8e8 	bl	800201c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d902      	bls.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d13d      	bne.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e76:	d111      	bne.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e80:	d004      	beq.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8a:	d107      	bne.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea4:	d10f      	bne.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e017      	b.n	8004f0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d19b      	bne.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000010 	.word	0x20000010

08004f18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f2a:	f7fd f877 	bl	800201c <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	4413      	add	r3, r2
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f3a:	f7fd f86f 	bl	800201c <HAL_GetTick>
 8004f3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f48:	4b3d      	ldr	r3, [pc, #244]	; (8005040 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	00da      	lsls	r2, r3, #3
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	0d1b      	lsrs	r3, r3, #20
 8004f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f60:	e060      	b.n	8005024 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f68:	d107      	bne.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f80:	d050      	beq.n	8005024 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f82:	f7fd f84b 	bl	800201c <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d902      	bls.n	8004f98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d13d      	bne.n	8005014 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb0:	d111      	bne.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fba:	d004      	beq.n	8004fc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc4:	d107      	bne.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fde:	d10f      	bne.n	8005000 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ffe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e010      	b.n	8005036 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	3b01      	subs	r3, #1
 8005022:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4013      	ands	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d196      	bne.n	8004f62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3728      	adds	r7, #40	; 0x28
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000010 	.word	0x20000010

08005044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2200      	movs	r2, #0
 8005058:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff ff5b 	bl	8004f18 <SPI_WaitFifoStateUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e027      	b.n	80050c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2200      	movs	r2, #0
 8005080:	2180      	movs	r1, #128	; 0x80
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff fec0 	bl	8004e08 <SPI_WaitFlagStateUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005092:	f043 0220 	orr.w	r2, r3, #32
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e014      	b.n	80050c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff ff34 	bl	8004f18 <SPI_WaitFifoStateUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ba:	f043 0220 	orr.w	r2, r3, #32
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e000      	b.n	80050c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e049      	b.n	8005176 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc fd20 	bl	8001b3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f000 fe1c 	bl	8005d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <HAL_TIM_PWM_Start+0x24>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e03c      	b.n	800521e <HAL_TIM_PWM_Start+0x9e>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d109      	bne.n	80051be <HAL_TIM_PWM_Start+0x3e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	bf14      	ite	ne
 80051b6:	2301      	movne	r3, #1
 80051b8:	2300      	moveq	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	e02f      	b.n	800521e <HAL_TIM_PWM_Start+0x9e>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d109      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x58>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e022      	b.n	800521e <HAL_TIM_PWM_Start+0x9e>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d109      	bne.n	80051f2 <HAL_TIM_PWM_Start+0x72>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	bf14      	ite	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	2300      	moveq	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e015      	b.n	800521e <HAL_TIM_PWM_Start+0x9e>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d109      	bne.n	800520c <HAL_TIM_PWM_Start+0x8c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e008      	b.n	800521e <HAL_TIM_PWM_Start+0x9e>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e088      	b.n	8005338 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0xb6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005234:	e023      	b.n	800527e <HAL_TIM_PWM_Start+0xfe>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0xc6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005244:	e01b      	b.n	800527e <HAL_TIM_PWM_Start+0xfe>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0xd6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005254:	e013      	b.n	800527e <HAL_TIM_PWM_Start+0xfe>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b0c      	cmp	r3, #12
 800525a:	d104      	bne.n	8005266 <HAL_TIM_PWM_Start+0xe6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005264:	e00b      	b.n	800527e <HAL_TIM_PWM_Start+0xfe>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b10      	cmp	r3, #16
 800526a:	d104      	bne.n	8005276 <HAL_TIM_PWM_Start+0xf6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005274:	e003      	b.n	800527e <HAL_TIM_PWM_Start+0xfe>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2201      	movs	r2, #1
 8005284:	6839      	ldr	r1, [r7, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f001 f87e 	bl	8006388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a2b      	ldr	r2, [pc, #172]	; (8005340 <HAL_TIM_PWM_Start+0x1c0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_TIM_PWM_Start+0x134>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a2a      	ldr	r2, [pc, #168]	; (8005344 <HAL_TIM_PWM_Start+0x1c4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_TIM_PWM_Start+0x134>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a28      	ldr	r2, [pc, #160]	; (8005348 <HAL_TIM_PWM_Start+0x1c8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_TIM_PWM_Start+0x134>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a27      	ldr	r2, [pc, #156]	; (800534c <HAL_TIM_PWM_Start+0x1cc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_PWM_Start+0x138>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_TIM_PWM_Start+0x13a>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1b      	ldr	r2, [pc, #108]	; (8005340 <HAL_TIM_PWM_Start+0x1c0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x176>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x176>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_TIM_PWM_Start+0x1d0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x176>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a14      	ldr	r2, [pc, #80]	; (8005344 <HAL_TIM_PWM_Start+0x1c4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d115      	bne.n	8005322 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4b15      	ldr	r3, [pc, #84]	; (8005354 <HAL_TIM_PWM_Start+0x1d4>)
 80052fe:	4013      	ands	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d015      	beq.n	8005334 <HAL_TIM_PWM_Start+0x1b4>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530e:	d011      	beq.n	8005334 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	e008      	b.n	8005334 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e000      	b.n	8005336 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40014000 	.word	0x40014000
 8005348:	40014400 	.word	0x40014400
 800534c:	40014800 	.word	0x40014800
 8005350:	40000400 	.word	0x40000400
 8005354:	00010007 	.word	0x00010007

08005358 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
 8005364:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e03c      	b.n	80053fe <HAL_TIM_PWM_Start_DMA+0xa6>
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d109      	bne.n	800539e <HAL_TIM_PWM_Start_DMA+0x46>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	e02f      	b.n	80053fe <HAL_TIM_PWM_Start_DMA+0xa6>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d109      	bne.n	80053b8 <HAL_TIM_PWM_Start_DMA+0x60>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e022      	b.n	80053fe <HAL_TIM_PWM_Start_DMA+0xa6>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b0c      	cmp	r3, #12
 80053bc:	d109      	bne.n	80053d2 <HAL_TIM_PWM_Start_DMA+0x7a>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	bf0c      	ite	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	2300      	movne	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	e015      	b.n	80053fe <HAL_TIM_PWM_Start_DMA+0xa6>
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d109      	bne.n	80053ec <HAL_TIM_PWM_Start_DMA+0x94>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	e008      	b.n	80053fe <HAL_TIM_PWM_Start_DMA+0xa6>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005402:	2302      	movs	r3, #2
 8005404:	e197      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <HAL_TIM_PWM_Start_DMA+0xc8>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e03c      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0x142>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d109      	bne.n	800543a <HAL_TIM_PWM_Start_DMA+0xe2>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b01      	cmp	r3, #1
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	e02f      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0x142>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d109      	bne.n	8005454 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b01      	cmp	r3, #1
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e022      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0x142>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b0c      	cmp	r3, #12
 8005458:	d109      	bne.n	800546e <HAL_TIM_PWM_Start_DMA+0x116>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	e015      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0x142>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b10      	cmp	r3, #16
 8005472:	d109      	bne.n	8005488 <HAL_TIM_PWM_Start_DMA+0x130>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e008      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0x142>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d034      	beq.n	8005508 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Start_DMA+0x156>
 80054a4:	887b      	ldrh	r3, [r7, #2]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e143      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d104      	bne.n	80054be <HAL_TIM_PWM_Start_DMA+0x166>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054bc:	e026      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_PWM_Start_DMA+0x176>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054cc:	e01e      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Start_DMA+0x186>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054dc:	e016      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b0c      	cmp	r3, #12
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Start_DMA+0x196>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ec:	e00e      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_PWM_Start_DMA+0x1a6>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054fc:	e006      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2202      	movs	r2, #2
 8005502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005506:	e001      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e114      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	f200 80ae 	bhi.w	8005670 <HAL_TIM_PWM_Start_DMA+0x318>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	08005551 	.word	0x08005551
 8005520:	08005671 	.word	0x08005671
 8005524:	08005671 	.word	0x08005671
 8005528:	08005671 	.word	0x08005671
 800552c:	08005599 	.word	0x08005599
 8005530:	08005671 	.word	0x08005671
 8005534:	08005671 	.word	0x08005671
 8005538:	08005671 	.word	0x08005671
 800553c:	080055e1 	.word	0x080055e1
 8005540:	08005671 	.word	0x08005671
 8005544:	08005671 	.word	0x08005671
 8005548:	08005671 	.word	0x08005671
 800554c:	08005629 	.word	0x08005629
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	4a7a      	ldr	r2, [pc, #488]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005556:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	4a79      	ldr	r2, [pc, #484]	; (8005744 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	4a78      	ldr	r2, [pc, #480]	; (8005748 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8005566:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3334      	adds	r3, #52	; 0x34
 8005574:	461a      	mov	r2, r3
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	f7fd fb5a 	bl	8002c30 <HAL_DMA_Start_IT>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e0d7      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005594:	60da      	str	r2, [r3, #12]
      break;
 8005596:	e06e      	b.n	8005676 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	4a68      	ldr	r2, [pc, #416]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800559e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	4a67      	ldr	r2, [pc, #412]	; (8005744 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	4a66      	ldr	r2, [pc, #408]	; (8005748 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3338      	adds	r3, #56	; 0x38
 80055bc:	461a      	mov	r2, r3
 80055be:	887b      	ldrh	r3, [r7, #2]
 80055c0:	f7fd fb36 	bl	8002c30 <HAL_DMA_Start_IT>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0b3      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055dc:	60da      	str	r2, [r3, #12]
      break;
 80055de:	e04a      	b.n	8005676 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4a56      	ldr	r2, [pc, #344]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	4a55      	ldr	r2, [pc, #340]	; (8005744 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80055ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	4a54      	ldr	r2, [pc, #336]	; (8005748 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	333c      	adds	r3, #60	; 0x3c
 8005604:	461a      	mov	r2, r3
 8005606:	887b      	ldrh	r3, [r7, #2]
 8005608:	f7fd fb12 	bl	8002c30 <HAL_DMA_Start_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e08f      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005624:	60da      	str	r2, [r3, #12]
      break;
 8005626:	e026      	b.n	8005676 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	4a44      	ldr	r2, [pc, #272]	; (8005740 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800562e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	4a43      	ldr	r2, [pc, #268]	; (8005744 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8005636:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563c:	4a42      	ldr	r2, [pc, #264]	; (8005748 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800563e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3340      	adds	r3, #64	; 0x40
 800564c:	461a      	mov	r2, r3
 800564e:	887b      	ldrh	r3, [r7, #2]
 8005650:	f7fd faee 	bl	8002c30 <HAL_DMA_Start_IT>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e06b      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800566c:	60da      	str	r2, [r3, #12]
      break;
 800566e:	e002      	b.n	8005676 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
      break;
 8005674:	bf00      	nop
  }

  if (status == HAL_OK)
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d15b      	bne.n	8005734 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fe7f 	bl	8006388 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2f      	ldr	r2, [pc, #188]	; (800574c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x35a>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2d      	ldr	r2, [pc, #180]	; (8005750 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d009      	beq.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x35a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x35a>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a2a      	ldr	r2, [pc, #168]	; (8005758 <HAL_TIM_PWM_Start_DMA+0x400>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_PWM_Start_DMA+0x35e>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <HAL_TIM_PWM_Start_DMA+0x360>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d007      	beq.n	80056cc <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1e      	ldr	r2, [pc, #120]	; (800574c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <HAL_TIM_PWM_Start_DMA+0x39c>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056de:	d009      	beq.n	80056f4 <HAL_TIM_PWM_Start_DMA+0x39c>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <HAL_TIM_PWM_Start_DMA+0x404>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_PWM_Start_DMA+0x39c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d115      	bne.n	8005720 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_TIM_PWM_Start_DMA+0x408>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b06      	cmp	r3, #6
 8005704:	d015      	beq.n	8005732 <HAL_TIM_PWM_Start_DMA+0x3da>
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d011      	beq.n	8005732 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	e008      	b.n	8005732 <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e000      	b.n	8005734 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005732:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005734:	7dfb      	ldrb	r3, [r7, #23]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	08005c3b 	.word	0x08005c3b
 8005744:	08005ce3 	.word	0x08005ce3
 8005748:	08005ba9 	.word	0x08005ba9
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800
 800575c:	40000400 	.word	0x40000400
 8005760:	00010007 	.word	0x00010007

08005764 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b0c      	cmp	r3, #12
 8005776:	d855      	bhi.n	8005824 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057b5 	.word	0x080057b5
 8005784:	08005825 	.word	0x08005825
 8005788:	08005825 	.word	0x08005825
 800578c:	08005825 	.word	0x08005825
 8005790:	080057d1 	.word	0x080057d1
 8005794:	08005825 	.word	0x08005825
 8005798:	08005825 	.word	0x08005825
 800579c:	08005825 	.word	0x08005825
 80057a0:	080057ed 	.word	0x080057ed
 80057a4:	08005825 	.word	0x08005825
 80057a8:	08005825 	.word	0x08005825
 80057ac:	08005825 	.word	0x08005825
 80057b0:	08005809 	.word	0x08005809
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fd fa90 	bl	8002cee <HAL_DMA_Abort_IT>
      break;
 80057ce:	e02c      	b.n	800582a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fd fa82 	bl	8002cee <HAL_DMA_Abort_IT>
      break;
 80057ea:	e01e      	b.n	800582a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	4618      	mov	r0, r3
 8005802:	f7fd fa74 	bl	8002cee <HAL_DMA_Abort_IT>
      break;
 8005806:	e010      	b.n	800582a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005816:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	4618      	mov	r0, r3
 800581e:	f7fd fa66 	bl	8002cee <HAL_DMA_Abort_IT>
      break;
 8005822:	e002      	b.n	800582a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
      break;
 8005828:	bf00      	nop
  }

  if (status == HAL_OK)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d17b      	bne.n	8005928 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2200      	movs	r2, #0
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fda5 	bl	8006388 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a3c      	ldr	r2, [pc, #240]	; (8005934 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00e      	beq.n	8005866 <HAL_TIM_PWM_Stop_DMA+0x102>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a3a      	ldr	r2, [pc, #232]	; (8005938 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_TIM_PWM_Stop_DMA+0x102>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a39      	ldr	r2, [pc, #228]	; (800593c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_TIM_PWM_Stop_DMA+0x102>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a37      	ldr	r2, [pc, #220]	; (8005940 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d101      	bne.n	800586a <HAL_TIM_PWM_Stop_DMA+0x106>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <HAL_TIM_PWM_Stop_DMA+0x108>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d017      	beq.n	80058a0 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a1a      	ldr	r2, [r3, #32]
 8005876:	f241 1311 	movw	r3, #4369	; 0x1111
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10f      	bne.n	80058a0 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a1a      	ldr	r2, [r3, #32]
 8005886:	f240 4344 	movw	r3, #1092	; 0x444
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d107      	bne.n	80058a0 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800589e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a1a      	ldr	r2, [r3, #32]
 80058a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10f      	bne.n	80058d0 <HAL_TIM_PWM_Stop_DMA+0x16c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6a1a      	ldr	r2, [r3, #32]
 80058b6:	f240 4344 	movw	r3, #1092	; 0x444
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d107      	bne.n	80058d0 <HAL_TIM_PWM_Stop_DMA+0x16c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0201 	bic.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058de:	e023      	b.n	8005928 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d104      	bne.n	80058f0 <HAL_TIM_PWM_Stop_DMA+0x18c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ee:	e01b      	b.n	8005928 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d104      	bne.n	8005900 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058fe:	e013      	b.n	8005928 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d104      	bne.n	8005910 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800590e:	e00b      	b.n	8005928 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b10      	cmp	r3, #16
 8005914:	d104      	bne.n	8005920 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800591e:	e003      	b.n	8005928 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800

08005944 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800595e:	2302      	movs	r3, #2
 8005960:	e0ff      	b.n	8005b62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b14      	cmp	r3, #20
 800596e:	f200 80f0 	bhi.w	8005b52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	080059cd 	.word	0x080059cd
 800597c:	08005b53 	.word	0x08005b53
 8005980:	08005b53 	.word	0x08005b53
 8005984:	08005b53 	.word	0x08005b53
 8005988:	08005a0d 	.word	0x08005a0d
 800598c:	08005b53 	.word	0x08005b53
 8005990:	08005b53 	.word	0x08005b53
 8005994:	08005b53 	.word	0x08005b53
 8005998:	08005a4f 	.word	0x08005a4f
 800599c:	08005b53 	.word	0x08005b53
 80059a0:	08005b53 	.word	0x08005b53
 80059a4:	08005b53 	.word	0x08005b53
 80059a8:	08005a8f 	.word	0x08005a8f
 80059ac:	08005b53 	.word	0x08005b53
 80059b0:	08005b53 	.word	0x08005b53
 80059b4:	08005b53 	.word	0x08005b53
 80059b8:	08005ad1 	.word	0x08005ad1
 80059bc:	08005b53 	.word	0x08005b53
 80059c0:	08005b53 	.word	0x08005b53
 80059c4:	08005b53 	.word	0x08005b53
 80059c8:	08005b11 	.word	0x08005b11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fa32 	bl	8005e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0208 	orr.w	r2, r2, #8
 80059e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0204 	bic.w	r2, r2, #4
 80059f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6999      	ldr	r1, [r3, #24]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	619a      	str	r2, [r3, #24]
      break;
 8005a0a:	e0a5      	b.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fa98 	bl	8005f48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6999      	ldr	r1, [r3, #24]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	021a      	lsls	r2, r3, #8
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	619a      	str	r2, [r3, #24]
      break;
 8005a4c:	e084      	b.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 faf7 	bl	8006048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0208 	orr.w	r2, r2, #8
 8005a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0204 	bic.w	r2, r2, #4
 8005a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69d9      	ldr	r1, [r3, #28]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	61da      	str	r2, [r3, #28]
      break;
 8005a8c:	e064      	b.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fb55 	bl	8006144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69d9      	ldr	r1, [r3, #28]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	021a      	lsls	r2, r3, #8
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	61da      	str	r2, [r3, #28]
      break;
 8005ace:	e043      	b.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fb98 	bl	800620c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0208 	orr.w	r2, r2, #8
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0204 	bic.w	r2, r2, #4
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691a      	ldr	r2, [r3, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b0e:	e023      	b.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fbd6 	bl	80062c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	021a      	lsls	r2, r3, #8
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b50:	e002      	b.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
      break;
 8005b56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop

08005b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d107      	bne.n	8005bd0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bce:	e02a      	b.n	8005c26 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d107      	bne.n	8005bea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be8:	e01d      	b.n	8005c26 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d107      	bne.n	8005c04 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c02:	e010      	b.n	8005c26 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d107      	bne.n	8005c1e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2208      	movs	r2, #8
 8005c12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c1c:	e003      	b.n	8005c26 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7ff ffb4 	bl	8005b94 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	771a      	strb	r2, [r3, #28]
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d10b      	bne.n	8005c6a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d136      	bne.n	8005cce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c68:	e031      	b.n	8005cce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d10b      	bne.n	8005c8c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2202      	movs	r2, #2
 8005c78:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d125      	bne.n	8005cce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c8a:	e020      	b.n	8005cce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d10b      	bne.n	8005cae <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2204      	movs	r2, #4
 8005c9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d114      	bne.n	8005cce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cac:	e00f      	b.n	8005cce <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d10a      	bne.n	8005cce <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2208      	movs	r2, #8
 8005cbc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d103      	bne.n	8005cce <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff ff4c 	bl	8005b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	771a      	strb	r2, [r3, #28]
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d103      	bne.n	8005d02 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	771a      	strb	r2, [r3, #28]
 8005d00:	e019      	b.n	8005d36 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d103      	bne.n	8005d14 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	771a      	strb	r2, [r3, #28]
 8005d12:	e010      	b.n	8005d36 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d103      	bne.n	8005d26 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2204      	movs	r2, #4
 8005d22:	771a      	strb	r2, [r3, #28]
 8005d24:	e007      	b.n	8005d36 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d102      	bne.n	8005d36 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2208      	movs	r2, #8
 8005d34:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff ff22 	bl	8005b80 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	771a      	strb	r2, [r3, #28]
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a32      	ldr	r2, [pc, #200]	; (8005e28 <TIM_Base_SetConfig+0xdc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <TIM_Base_SetConfig+0x28>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6a:	d003      	beq.n	8005d74 <TIM_Base_SetConfig+0x28>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a2f      	ldr	r2, [pc, #188]	; (8005e2c <TIM_Base_SetConfig+0xe0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d108      	bne.n	8005d86 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <TIM_Base_SetConfig+0xdc>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <TIM_Base_SetConfig+0x6a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d94:	d00f      	beq.n	8005db6 <TIM_Base_SetConfig+0x6a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a24      	ldr	r2, [pc, #144]	; (8005e2c <TIM_Base_SetConfig+0xe0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00b      	beq.n	8005db6 <TIM_Base_SetConfig+0x6a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a23      	ldr	r2, [pc, #140]	; (8005e30 <TIM_Base_SetConfig+0xe4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d007      	beq.n	8005db6 <TIM_Base_SetConfig+0x6a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a22      	ldr	r2, [pc, #136]	; (8005e34 <TIM_Base_SetConfig+0xe8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d003      	beq.n	8005db6 <TIM_Base_SetConfig+0x6a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <TIM_Base_SetConfig+0xec>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d108      	bne.n	8005dc8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a0e      	ldr	r2, [pc, #56]	; (8005e28 <TIM_Base_SetConfig+0xdc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <TIM_Base_SetConfig+0xc0>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a0e      	ldr	r2, [pc, #56]	; (8005e30 <TIM_Base_SetConfig+0xe4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_Base_SetConfig+0xc0>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a0d      	ldr	r2, [pc, #52]	; (8005e34 <TIM_Base_SetConfig+0xe8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_Base_SetConfig+0xc0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a0c      	ldr	r2, [pc, #48]	; (8005e38 <TIM_Base_SetConfig+0xec>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d103      	bne.n	8005e14 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	615a      	str	r2, [r3, #20]
}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800

08005e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0201 	bic.w	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 0302 	bic.w	r3, r3, #2
 8005e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a28      	ldr	r2, [pc, #160]	; (8005f38 <TIM_OC1_SetConfig+0xfc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <TIM_OC1_SetConfig+0x78>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a27      	ldr	r2, [pc, #156]	; (8005f3c <TIM_OC1_SetConfig+0x100>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_OC1_SetConfig+0x78>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a26      	ldr	r2, [pc, #152]	; (8005f40 <TIM_OC1_SetConfig+0x104>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC1_SetConfig+0x78>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a25      	ldr	r2, [pc, #148]	; (8005f44 <TIM_OC1_SetConfig+0x108>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d10c      	bne.n	8005ece <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f023 0308 	bic.w	r3, r3, #8
 8005eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f023 0304 	bic.w	r3, r3, #4
 8005ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a19      	ldr	r2, [pc, #100]	; (8005f38 <TIM_OC1_SetConfig+0xfc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_OC1_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <TIM_OC1_SetConfig+0x100>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_OC1_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <TIM_OC1_SetConfig+0x104>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_OC1_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a16      	ldr	r2, [pc, #88]	; (8005f44 <TIM_OC1_SetConfig+0x108>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d111      	bne.n	8005f12 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	621a      	str	r2, [r3, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40014400 	.word	0x40014400
 8005f44:	40014800 	.word	0x40014800

08005f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f023 0210 	bic.w	r2, r3, #16
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0320 	bic.w	r3, r3, #32
 8005f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a24      	ldr	r2, [pc, #144]	; (8006038 <TIM_OC2_SetConfig+0xf0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10d      	bne.n	8005fc8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <TIM_OC2_SetConfig+0xf0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_OC2_SetConfig+0xa0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1a      	ldr	r2, [pc, #104]	; (800603c <TIM_OC2_SetConfig+0xf4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_OC2_SetConfig+0xa0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a19      	ldr	r2, [pc, #100]	; (8006040 <TIM_OC2_SetConfig+0xf8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_OC2_SetConfig+0xa0>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a18      	ldr	r2, [pc, #96]	; (8006044 <TIM_OC2_SetConfig+0xfc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d113      	bne.n	8006010 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fee:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400
 8006044:	40014800 	.word	0x40014800

08006048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0303 	bic.w	r3, r3, #3
 8006082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a23      	ldr	r2, [pc, #140]	; (8006134 <TIM_OC3_SetConfig+0xec>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10d      	bne.n	80060c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a1a      	ldr	r2, [pc, #104]	; (8006134 <TIM_OC3_SetConfig+0xec>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00b      	beq.n	80060e6 <TIM_OC3_SetConfig+0x9e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a19      	ldr	r2, [pc, #100]	; (8006138 <TIM_OC3_SetConfig+0xf0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <TIM_OC3_SetConfig+0x9e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a18      	ldr	r2, [pc, #96]	; (800613c <TIM_OC3_SetConfig+0xf4>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_OC3_SetConfig+0x9e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a17      	ldr	r2, [pc, #92]	; (8006140 <TIM_OC3_SetConfig+0xf8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d113      	bne.n	800610e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	621a      	str	r2, [r3, #32]
}
 8006128:	bf00      	nop
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	40012c00 	.word	0x40012c00
 8006138:	40014000 	.word	0x40014000
 800613c:	40014400 	.word	0x40014400
 8006140:	40014800 	.word	0x40014800

08006144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	031b      	lsls	r3, r3, #12
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a16      	ldr	r2, [pc, #88]	; (80061fc <TIM_OC4_SetConfig+0xb8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00b      	beq.n	80061c0 <TIM_OC4_SetConfig+0x7c>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a15      	ldr	r2, [pc, #84]	; (8006200 <TIM_OC4_SetConfig+0xbc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d007      	beq.n	80061c0 <TIM_OC4_SetConfig+0x7c>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a14      	ldr	r2, [pc, #80]	; (8006204 <TIM_OC4_SetConfig+0xc0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_OC4_SetConfig+0x7c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a13      	ldr	r2, [pc, #76]	; (8006208 <TIM_OC4_SetConfig+0xc4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d109      	bne.n	80061d4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	019b      	lsls	r3, r3, #6
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40014000 	.word	0x40014000
 8006204:	40014400 	.word	0x40014400
 8006208:	40014800 	.word	0x40014800

0800620c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006250:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <TIM_OC5_SetConfig+0xac>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00b      	beq.n	800627e <TIM_OC5_SetConfig+0x72>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a14      	ldr	r2, [pc, #80]	; (80062bc <TIM_OC5_SetConfig+0xb0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d007      	beq.n	800627e <TIM_OC5_SetConfig+0x72>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a13      	ldr	r2, [pc, #76]	; (80062c0 <TIM_OC5_SetConfig+0xb4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d003      	beq.n	800627e <TIM_OC5_SetConfig+0x72>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <TIM_OC5_SetConfig+0xb8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d109      	bne.n	8006292 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006284:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	621a      	str	r2, [r3, #32]
}
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40014400 	.word	0x40014400
 80062c4:	40014800 	.word	0x40014800

080062c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800630e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	051b      	lsls	r3, r3, #20
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a16      	ldr	r2, [pc, #88]	; (8006378 <TIM_OC6_SetConfig+0xb0>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00b      	beq.n	800633c <TIM_OC6_SetConfig+0x74>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a15      	ldr	r2, [pc, #84]	; (800637c <TIM_OC6_SetConfig+0xb4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d007      	beq.n	800633c <TIM_OC6_SetConfig+0x74>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a14      	ldr	r2, [pc, #80]	; (8006380 <TIM_OC6_SetConfig+0xb8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_OC6_SetConfig+0x74>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a13      	ldr	r2, [pc, #76]	; (8006384 <TIM_OC6_SetConfig+0xbc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d109      	bne.n	8006350 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	029b      	lsls	r3, r3, #10
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40012c00 	.word	0x40012c00
 800637c:	40014000 	.word	0x40014000
 8006380:	40014400 	.word	0x40014400
 8006384:	40014800 	.word	0x40014800

08006388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2201      	movs	r2, #1
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a1a      	ldr	r2, [r3, #32]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	401a      	ands	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a1a      	ldr	r2, [r3, #32]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	fa01 f303 	lsl.w	r3, r1, r3
 80063c0:	431a      	orrs	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e054      	b.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a24      	ldr	r2, [pc, #144]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d108      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800641c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a17      	ldr	r2, [pc, #92]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006454:	d009      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a11      	ldr	r2, [pc, #68]	; (80064ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d10c      	bne.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	4313      	orrs	r3, r2
 800647a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40014000 	.word	0x40014000

080064b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e060      	b.n	800658e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	041b      	lsls	r3, r3, #16
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a14      	ldr	r2, [pc, #80]	; (800659c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d115      	bne.n	800657c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	051b      	lsls	r3, r3, #20
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	4313      	orrs	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40012c00 	.word	0x40012c00

080065a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e040      	b.n	8006634 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fb fc12 	bl	8001dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2224      	movs	r2, #36	; 0x24
 80065cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0201 	bic.w	r2, r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f82c 	bl	800663c <UART_SetConfig>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e022      	b.n	8006634 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f956 	bl	80068a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800660a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800661a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f9dd 	bl	80069ec <UART_CheckIdleState>
 8006632:	4603      	mov	r3, r0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	431a      	orrs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4b8a      	ldr	r3, [pc, #552]	; (8006890 <UART_SetConfig+0x254>)
 8006668:	4013      	ands	r3, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	6979      	ldr	r1, [r7, #20]
 8006670:	430b      	orrs	r3, r1
 8006672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a78      	ldr	r2, [pc, #480]	; (8006894 <UART_SetConfig+0x258>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d120      	bne.n	80066fa <UART_SetConfig+0xbe>
 80066b8:	4b77      	ldr	r3, [pc, #476]	; (8006898 <UART_SetConfig+0x25c>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d817      	bhi.n	80066f4 <UART_SetConfig+0xb8>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <UART_SetConfig+0x90>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	080066e9 	.word	0x080066e9
 80066d4:	080066ef 	.word	0x080066ef
 80066d8:	080066e3 	.word	0x080066e3
 80066dc:	2300      	movs	r3, #0
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e01d      	b.n	800671e <UART_SetConfig+0xe2>
 80066e2:	2302      	movs	r3, #2
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e01a      	b.n	800671e <UART_SetConfig+0xe2>
 80066e8:	2304      	movs	r3, #4
 80066ea:	77fb      	strb	r3, [r7, #31]
 80066ec:	e017      	b.n	800671e <UART_SetConfig+0xe2>
 80066ee:	2308      	movs	r3, #8
 80066f0:	77fb      	strb	r3, [r7, #31]
 80066f2:	e014      	b.n	800671e <UART_SetConfig+0xe2>
 80066f4:	2310      	movs	r3, #16
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	e011      	b.n	800671e <UART_SetConfig+0xe2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a67      	ldr	r2, [pc, #412]	; (800689c <UART_SetConfig+0x260>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d102      	bne.n	800670a <UART_SetConfig+0xce>
 8006704:	2300      	movs	r3, #0
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e009      	b.n	800671e <UART_SetConfig+0xe2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a64      	ldr	r2, [pc, #400]	; (80068a0 <UART_SetConfig+0x264>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d102      	bne.n	800671a <UART_SetConfig+0xde>
 8006714:	2300      	movs	r3, #0
 8006716:	77fb      	strb	r3, [r7, #31]
 8006718:	e001      	b.n	800671e <UART_SetConfig+0xe2>
 800671a:	2310      	movs	r3, #16
 800671c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006726:	d15b      	bne.n	80067e0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006728:	7ffb      	ldrb	r3, [r7, #31]
 800672a:	2b08      	cmp	r3, #8
 800672c:	d827      	bhi.n	800677e <UART_SetConfig+0x142>
 800672e:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <UART_SetConfig+0xf8>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	08006759 	.word	0x08006759
 8006738:	08006761 	.word	0x08006761
 800673c:	08006769 	.word	0x08006769
 8006740:	0800677f 	.word	0x0800677f
 8006744:	0800676f 	.word	0x0800676f
 8006748:	0800677f 	.word	0x0800677f
 800674c:	0800677f 	.word	0x0800677f
 8006750:	0800677f 	.word	0x0800677f
 8006754:	08006777 	.word	0x08006777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006758:	f7fd ffb4 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 800675c:	61b8      	str	r0, [r7, #24]
        break;
 800675e:	e013      	b.n	8006788 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006760:	f7fd ffd2 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8006764:	61b8      	str	r0, [r7, #24]
        break;
 8006766:	e00f      	b.n	8006788 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006768:	4b4e      	ldr	r3, [pc, #312]	; (80068a4 <UART_SetConfig+0x268>)
 800676a:	61bb      	str	r3, [r7, #24]
        break;
 800676c:	e00c      	b.n	8006788 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800676e:	f7fd ff31 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8006772:	61b8      	str	r0, [r7, #24]
        break;
 8006774:	e008      	b.n	8006788 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677a:	61bb      	str	r3, [r7, #24]
        break;
 800677c:	e004      	b.n	8006788 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	77bb      	strb	r3, [r7, #30]
        break;
 8006786:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d074      	beq.n	8006878 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	005a      	lsls	r2, r3, #1
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	085b      	lsrs	r3, r3, #1
 8006798:	441a      	add	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b0f      	cmp	r3, #15
 80067aa:	d916      	bls.n	80067da <UART_SetConfig+0x19e>
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b2:	d212      	bcs.n	80067da <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f023 030f 	bic.w	r3, r3, #15
 80067bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	89fb      	ldrh	r3, [r7, #14]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	89fa      	ldrh	r2, [r7, #14]
 80067d6:	60da      	str	r2, [r3, #12]
 80067d8:	e04e      	b.n	8006878 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	77bb      	strb	r3, [r7, #30]
 80067de:	e04b      	b.n	8006878 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d827      	bhi.n	8006836 <UART_SetConfig+0x1fa>
 80067e6:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <UART_SetConfig+0x1b0>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006811 	.word	0x08006811
 80067f0:	08006819 	.word	0x08006819
 80067f4:	08006821 	.word	0x08006821
 80067f8:	08006837 	.word	0x08006837
 80067fc:	08006827 	.word	0x08006827
 8006800:	08006837 	.word	0x08006837
 8006804:	08006837 	.word	0x08006837
 8006808:	08006837 	.word	0x08006837
 800680c:	0800682f 	.word	0x0800682f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006810:	f7fd ff58 	bl	80046c4 <HAL_RCC_GetPCLK1Freq>
 8006814:	61b8      	str	r0, [r7, #24]
        break;
 8006816:	e013      	b.n	8006840 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006818:	f7fd ff76 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 800681c:	61b8      	str	r0, [r7, #24]
        break;
 800681e:	e00f      	b.n	8006840 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006820:	4b20      	ldr	r3, [pc, #128]	; (80068a4 <UART_SetConfig+0x268>)
 8006822:	61bb      	str	r3, [r7, #24]
        break;
 8006824:	e00c      	b.n	8006840 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006826:	f7fd fed5 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 800682a:	61b8      	str	r0, [r7, #24]
        break;
 800682c:	e008      	b.n	8006840 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006832:	61bb      	str	r3, [r7, #24]
        break;
 8006834:	e004      	b.n	8006840 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	77bb      	strb	r3, [r7, #30]
        break;
 800683e:	bf00      	nop
    }

    if (pclk != 0U)
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d018      	beq.n	8006878 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	085a      	lsrs	r2, r3, #1
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	441a      	add	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	fbb2 f3f3 	udiv	r3, r2, r3
 8006858:	b29b      	uxth	r3, r3
 800685a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2b0f      	cmp	r3, #15
 8006860:	d908      	bls.n	8006874 <UART_SetConfig+0x238>
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006868:	d204      	bcs.n	8006874 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	60da      	str	r2, [r3, #12]
 8006872:	e001      	b.n	8006878 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006884:	7fbb      	ldrb	r3, [r7, #30]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3720      	adds	r7, #32
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	efff69f3 	.word	0xefff69f3
 8006894:	40013800 	.word	0x40013800
 8006898:	40021000 	.word	0x40021000
 800689c:	40004400 	.word	0x40004400
 80068a0:	40004800 	.word	0x40004800
 80068a4:	007a1200 	.word	0x007a1200

080068a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	f003 0310 	and.w	r3, r3, #16
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01a      	beq.n	80069be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a6:	d10a      	bne.n	80069be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	605a      	str	r2, [r3, #4]
  }
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069fc:	f7fb fb0e 	bl	800201c <HAL_GetTick>
 8006a00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d10e      	bne.n	8006a2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f82d 	bl	8006a7e <UART_WaitOnFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e023      	b.n	8006a76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d10e      	bne.n	8006a5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f817 	bl	8006a7e <UART_WaitOnFlagUntilTimeout>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e00d      	b.n	8006a76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b09c      	sub	sp, #112	; 0x70
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	603b      	str	r3, [r7, #0]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8e:	e0a5      	b.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	f000 80a1 	beq.w	8006bdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9a:	f7fb fabf 	bl	800201c <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d302      	bcc.n	8006ab0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d13e      	bne.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ac4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ad0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e6      	bne.n	8006ab0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	663b      	str	r3, [r7, #96]	; 0x60
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b02:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e067      	b.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d04f      	beq.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b4a:	d147      	bne.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
 8006b76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e6      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	613b      	str	r3, [r7, #16]
   return(result);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ba8:	623a      	str	r2, [r7, #32]
 8006baa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	69f9      	ldr	r1, [r7, #28]
 8006bae:	6a3a      	ldr	r2, [r7, #32]
 8006bb0:	e841 2300 	strex	r3, r2, [r1]
 8006bb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e5      	bne.n	8006b88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e010      	b.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69da      	ldr	r2, [r3, #28]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	4013      	ands	r3, r2
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	bf0c      	ite	eq
 8006bec:	2301      	moveq	r3, #1
 8006bee:	2300      	movne	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	f43f af4a 	beq.w	8006a90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3770      	adds	r7, #112	; 0x70
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <_ZdlPvj>:
 8006c06:	f000 b800 	b.w	8006c0a <_ZdlPv>

08006c0a <_ZdlPv>:
 8006c0a:	f000 b825 	b.w	8006c58 <free>
	...

08006c10 <__libc_init_array>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4d0d      	ldr	r5, [pc, #52]	; (8006c48 <__libc_init_array+0x38>)
 8006c14:	4c0d      	ldr	r4, [pc, #52]	; (8006c4c <__libc_init_array+0x3c>)
 8006c16:	1b64      	subs	r4, r4, r5
 8006c18:	10a4      	asrs	r4, r4, #2
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d109      	bne.n	8006c34 <__libc_init_array+0x24>
 8006c20:	4d0b      	ldr	r5, [pc, #44]	; (8006c50 <__libc_init_array+0x40>)
 8006c22:	4c0c      	ldr	r4, [pc, #48]	; (8006c54 <__libc_init_array+0x44>)
 8006c24:	f000 f882 	bl	8006d2c <_init>
 8006c28:	1b64      	subs	r4, r4, r5
 8006c2a:	10a4      	asrs	r4, r4, #2
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	42a6      	cmp	r6, r4
 8006c30:	d105      	bne.n	8006c3e <__libc_init_array+0x2e>
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c38:	4798      	blx	r3
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7ee      	b.n	8006c1c <__libc_init_array+0xc>
 8006c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c42:	4798      	blx	r3
 8006c44:	3601      	adds	r6, #1
 8006c46:	e7f2      	b.n	8006c2e <__libc_init_array+0x1e>
 8006c48:	08006de0 	.word	0x08006de0
 8006c4c:	08006de0 	.word	0x08006de0
 8006c50:	08006de0 	.word	0x08006de0
 8006c54:	08006de4 	.word	0x08006de4

08006c58 <free>:
 8006c58:	4b02      	ldr	r3, [pc, #8]	; (8006c64 <free+0xc>)
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	f000 b80b 	b.w	8006c78 <_free_r>
 8006c62:	bf00      	nop
 8006c64:	2000001c 	.word	0x2000001c

08006c68 <memset>:
 8006c68:	4402      	add	r2, r0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d100      	bne.n	8006c72 <memset+0xa>
 8006c70:	4770      	bx	lr
 8006c72:	f803 1b01 	strb.w	r1, [r3], #1
 8006c76:	e7f9      	b.n	8006c6c <memset+0x4>

08006c78 <_free_r>:
 8006c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c7a:	2900      	cmp	r1, #0
 8006c7c:	d044      	beq.n	8006d08 <_free_r+0x90>
 8006c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c82:	9001      	str	r0, [sp, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f1a1 0404 	sub.w	r4, r1, #4
 8006c8a:	bfb8      	it	lt
 8006c8c:	18e4      	addlt	r4, r4, r3
 8006c8e:	f000 f83f 	bl	8006d10 <__malloc_lock>
 8006c92:	4a1e      	ldr	r2, [pc, #120]	; (8006d0c <_free_r+0x94>)
 8006c94:	9801      	ldr	r0, [sp, #4]
 8006c96:	6813      	ldr	r3, [r2, #0]
 8006c98:	b933      	cbnz	r3, 8006ca8 <_free_r+0x30>
 8006c9a:	6063      	str	r3, [r4, #4]
 8006c9c:	6014      	str	r4, [r2, #0]
 8006c9e:	b003      	add	sp, #12
 8006ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ca4:	f000 b83a 	b.w	8006d1c <__malloc_unlock>
 8006ca8:	42a3      	cmp	r3, r4
 8006caa:	d908      	bls.n	8006cbe <_free_r+0x46>
 8006cac:	6825      	ldr	r5, [r4, #0]
 8006cae:	1961      	adds	r1, r4, r5
 8006cb0:	428b      	cmp	r3, r1
 8006cb2:	bf01      	itttt	eq
 8006cb4:	6819      	ldreq	r1, [r3, #0]
 8006cb6:	685b      	ldreq	r3, [r3, #4]
 8006cb8:	1949      	addeq	r1, r1, r5
 8006cba:	6021      	streq	r1, [r4, #0]
 8006cbc:	e7ed      	b.n	8006c9a <_free_r+0x22>
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	b10b      	cbz	r3, 8006cc8 <_free_r+0x50>
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d9fa      	bls.n	8006cbe <_free_r+0x46>
 8006cc8:	6811      	ldr	r1, [r2, #0]
 8006cca:	1855      	adds	r5, r2, r1
 8006ccc:	42a5      	cmp	r5, r4
 8006cce:	d10b      	bne.n	8006ce8 <_free_r+0x70>
 8006cd0:	6824      	ldr	r4, [r4, #0]
 8006cd2:	4421      	add	r1, r4
 8006cd4:	1854      	adds	r4, r2, r1
 8006cd6:	42a3      	cmp	r3, r4
 8006cd8:	6011      	str	r1, [r2, #0]
 8006cda:	d1e0      	bne.n	8006c9e <_free_r+0x26>
 8006cdc:	681c      	ldr	r4, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	6053      	str	r3, [r2, #4]
 8006ce2:	4421      	add	r1, r4
 8006ce4:	6011      	str	r1, [r2, #0]
 8006ce6:	e7da      	b.n	8006c9e <_free_r+0x26>
 8006ce8:	d902      	bls.n	8006cf0 <_free_r+0x78>
 8006cea:	230c      	movs	r3, #12
 8006cec:	6003      	str	r3, [r0, #0]
 8006cee:	e7d6      	b.n	8006c9e <_free_r+0x26>
 8006cf0:	6825      	ldr	r5, [r4, #0]
 8006cf2:	1961      	adds	r1, r4, r5
 8006cf4:	428b      	cmp	r3, r1
 8006cf6:	bf04      	itt	eq
 8006cf8:	6819      	ldreq	r1, [r3, #0]
 8006cfa:	685b      	ldreq	r3, [r3, #4]
 8006cfc:	6063      	str	r3, [r4, #4]
 8006cfe:	bf04      	itt	eq
 8006d00:	1949      	addeq	r1, r1, r5
 8006d02:	6021      	streq	r1, [r4, #0]
 8006d04:	6054      	str	r4, [r2, #4]
 8006d06:	e7ca      	b.n	8006c9e <_free_r+0x26>
 8006d08:	b003      	add	sp, #12
 8006d0a:	bd30      	pop	{r4, r5, pc}
 8006d0c:	20000368 	.word	0x20000368

08006d10 <__malloc_lock>:
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <__malloc_lock+0x8>)
 8006d12:	f000 b809 	b.w	8006d28 <__retarget_lock_acquire_recursive>
 8006d16:	bf00      	nop
 8006d18:	2000036c 	.word	0x2000036c

08006d1c <__malloc_unlock>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	; (8006d24 <__malloc_unlock+0x8>)
 8006d1e:	f000 b804 	b.w	8006d2a <__retarget_lock_release_recursive>
 8006d22:	bf00      	nop
 8006d24:	2000036c 	.word	0x2000036c

08006d28 <__retarget_lock_acquire_recursive>:
 8006d28:	4770      	bx	lr

08006d2a <__retarget_lock_release_recursive>:
 8006d2a:	4770      	bx	lr

08006d2c <_init>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	bf00      	nop
 8006d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d32:	bc08      	pop	{r3}
 8006d34:	469e      	mov	lr, r3
 8006d36:	4770      	bx	lr

08006d38 <_fini>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	bf00      	nop
 8006d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3e:	bc08      	pop	{r3}
 8006d40:	469e      	mov	lr, r3
 8006d42:	4770      	bx	lr
